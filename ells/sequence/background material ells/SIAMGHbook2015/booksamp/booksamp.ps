%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: P:\BOOKS\Pre-Transmittal\TEX help\booksamp\booksamp\booksamp.dvi
%%CreationDate: Mon Jul 06 15:46:46 2015
%%Pages: 29
%%PageOrder: Ascend
%%BoundingBox: 0 0 504 720
%%DocumentFonts: GaramondNo8-Reg Helvetica Helvetica-Bold
%%+ GaramondNo8-Med MathDesign-GM-Regular-T1-10 Courier-Bold
%%+ MathDesign-GM-Regular-OT1-10
%%+ MathDesign-GM-Regular-Italic-MathItalic-10 GaramondNo8-Ita
%%+ MathDesign-GM-Regular-Symbol-10 MathDesign-GM-Regular-Extension-10
%%+ Courier MathDesign-GM-Regular-MathItalic-10 GaramondNo8-MedIta
%%+ MathDesign-GM-Medium-Italic-MathItalic-10
%%+ MathDesign-GM-Medium-OT1-10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips
%+ "P:\BOOKS\Pre-Transmittal\TEX help\booksamp\booksamp\booksamp.dvi"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2015.07.06:1546
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: texnansi.enc 0 0
% @psencodingfile{
%   author = "Y&Y, Inc.",
%   version = "1.1",
%   date = "1 December 1996",
%   filename = "texnansi.enc",
%   email = "help@YandY.com",
%   address = "45 Walden Street // Concord, MA 01742, USA",
%   codetable = "ISO/ASCII",
%   checksum = "xx",
%   docstring = "Encoding for fonts in Adobe Type 1 format for use with TeX."
% }
%
% The idea is to have all 228 characters normally included in Type 1 text
% fonts (plus a few more) available for typesetting.  This is effectively
% the character set in Adobe Standard Encoding, ISO Latin 1, plus a few more.
%
% Character code assignments were made as follows:
%
% (1) The character layout largely matches `ASCII' in the 32 -- 126 range,
% except for `circumflex' in 94 and `tilde' in 126, to match `TeX text'
% (`asciicircumflex' and `asciitilde' appear in 158 and 142 instead).
%
% (2) The character layout matches `Windows ANSI' in almost all places,
% except for `quoteright' in 39 and `quoteleft' in 96 to match ASCII
% (`quotesingle' and `grave' appear in 129 and 18 instead).
%
% (3) The character layout matches `TeX typewriter' used by CM text fonts
% in most places (except for discordant positions such as hungarumlaut
% (instead of braceright), dotaccent (instead of underscore) etc.
%
% (4) Remaining characters are assigned arbitrarily to the `control character'
% range (0 -- 31), avoiding 0, 9, 10 and 13 in case we meet dumb software
% - similarly one should really avoid 127 and 128 if possible.
% In addition, the 8 open slots in Windows ANSI between 128 and 159 are used.
%
% (5) Y&Y Lucida Bright includes some extra ligatures and such; ff, ffi, ffl,
% and `dotlessj,' these are included 11 -- 15, and 17.
%
% (6) Hyphen appears both at 45 and 173 for compatibility with both ASCII
% and Windows ANSI.
%
% (7) It doesn't really matter where ligatures appear (both real, such as ffi,
% and pseudo such as ---) since these should not be accessed directly, only
% via ligature information in the TFM file.
%
% SAMPLE USAGE (in `psfonts.map' file for DVIPS):
% 
% lbr LucidaBright "TeXnANSIEncoding ReEncodeFont" <texnansi.enc <lbr.pfb
%
% This tells DVIPS that the font called `lbr' in TeX has PostScript 
% FontName `LucidaBright.'  It also asks DVIPS to expand the file `lbr.pfb'
% into PFA form, to include the attached `texnansi.enc' encoding vector,
% and to then actually reencode the font based on that encoding vector.
%
% Revised 1996 June 1 by adding second position for `fl' to avoid Acrobat bug.
% Revised 1996 June 1 by adding second position for `fraction' for same reason.
% Revised 1997 Oct 1 by adding cwm  (used in boundary char TFM code)
% Revised 1998 Mar 1 by adding Unicode for Euro character
%
/TeXnANSIEncoding [
/.notdef % 0
/Euro % /Uni20AC 1
/.notdef % 2
/.notdef % 3
/fraction %	4
/dotaccent %	5
/hungarumlaut %	6
/ogonek	%	7
/fl	%	8
/.notdef % /fraction %	9	not used (see 4), backward compatability only
/cwm	%	10	not used, except boundary char internally maybe
/ff    %	11
/fi    %	12
/.notdef % /fl    %	13	not used (see 8), backward compatability only
/ffi   %	14
/ffl   %	15
/dotlessi %	16
/dotlessj %	17
/grave %	18
/acute %	19
/caron %	20
/breve %	21
/macron %	22
/ring  %	23
/cedilla %	24
/germandbls %	25
/ae    %	26
/oe    %	27
/oslash %	28
/AE    %	29
/OE    %	30
/Oslash %	31
/space %	32	% /suppress in TeX text
/exclam %	33
/quotedbl %	34	% /quotedblright in TeX text
/numbersign %	35
/dollar %	36
/percent %	37
/ampersand %	38
/quoteright %	39	% /quotesingle in ANSI
/parenleft %	40
/parenright %	41
/asterisk %	42
/plus  %	43
/comma %	44
/hyphen %	45
/period %	46
/slash %	47
/zero  %	48
/one   %	49
/two   %	50
/three %	51
/four  %	52
/five  %	53
/six   %	54
/seven %	55
/eight %	56
/nine  %	57
/colon %	58
/semicolon %	59
/less  %	60	% /exclamdown in Tex text
/equal %	61
/greater %	62	% /questiondown in TeX text
/question %	63
/at %	64
/A %	65
/B %	66
/C %	67
/D %	68
/E %	69
/F %	70
/G %	71
/H %	72
/I %	73
/J %	74
/K %	75
/L %	76
/M %	77
/N %	78
/O %	79
/P %	80
/Q %	81
/R %	82
/S %	83
/T %	84
/U %	85
/V %	86
/W %	87
/X %	88
/Y %	89
/Z %	90
/bracketleft %	91
/backslash %	92	% /quotedblleft in TeX text
/bracketright %	93
/circumflex %	94	% /asciicircum in ASCII
/underscore %	95	% /dotaccent in TeX text
/quoteleft %	96	% /grave accent in ANSI
/a %	97
/b %	98
/c %	99
/d %	100
/e %	101
/f %	102
/g %	103
/h %	104
/i %	105
/j %	106
/k %	107
/l %	108
/m %	109
/n %	110
/o %	111
/p %	112
/q %	113
/r %	114
/s %	115
/t %	116
/u %	117
/v %	118
/w %	119
/x %	120
/y %	121
/z %	122
/braceleft %	123	% /endash in TeX text
/bar   %	124	% /emdash in TeX test
/braceright %	125	% /hungarumlaut in TeX text
/tilde %	126	% /asciitilde in ASCII
/dieresis %	127	not used (see 168), use higher up instead
/Lslash	%	128	this position is unfortunate, but now too late to fix
/quotesingle %	129
/quotesinglbase %	130
/florin %	131
/quotedblbase %	132
/ellipsis %	133
/dagger %	134
/daggerdbl %	135
/circumflex %	136
/perthousand %	137
/Scaron %	138
/guilsinglleft %	139
/OE    %	140
/Zcaron %	141
/asciicircum %	142
/minus %	143
/lslash %	144
/quoteleft %	145
/quoteright %	146
/quotedblleft %	147
/quotedblright %	148
/bullet %	149
/endash %	150
/emdash %	151
/tilde %	152
/trademark %	153
/scaron %	154
/guilsinglright %	155
/oe    %	156
/zcaron %	157
/asciitilde %	158
/Ydieresis %	159
/nbspace %	160	% /space (no break space)
/exclamdown %	161
/cent  %	162
/sterling %	163
/currency %	164
/yen   %	165
/brokenbar %	166
/section %	167
/dieresis %	168
/copyright %	169
/ordfeminine %	170
/guillemotleft %	171
/logicalnot %	172
/sfthyphen %	173 % /hyphen (hanging hyphen)
/registered %	174
/macron %	175
/degree %	176
/plusminus %	177
/twosuperior %	178
/threesuperior %	179
/acute %	180
/mu    %	181
/paragraph %	182
/periodcentered %	183
/cedilla %	184
/onesuperior %	185
/ordmasculine %	186
/guillemotright %	187
/onequarter %	188
/onehalf %	189
/threequarters %	190
/questiondown %	191
/Agrave %	192
/Aacute %	193
/Acircumflex %	194
/Atilde %	195
/Adieresis %	196
/Aring %	197
/AE    %	198
/Ccedilla %	199
/Egrave %	200
/Eacute %	201
/Ecircumflex %	202
/Edieresis %	203
/Igrave %	204
/Iacute %	205
/Icircumflex %	206
/Idieresis %	207
/Eth   %	208
/Ntilde %	209
/Ograve %	210
/Oacute %	211
/Ocircumflex %	212
/Otilde %	213
/Odieresis %	214
/multiply %	215	% OE in T1
/Oslash %	216
/Ugrave %	217
/Uacute %	218
/Ucircumflex %	219
/Udieresis %	220
/Yacute %	221
/Thorn %	222
/germandbls %	223
/agrave %	224
/aacute %	225
/acircumflex %	226
/atilde %	227
/adieresis %	228
/aring %	229
/ae    %	230
/ccedilla %	231
/egrave %	232
/eacute %	233
/ecircumflex %	234
/edieresis %	235
/igrave %	236
/iacute %	237
/icircumflex %	238
/idieresis %	239
/eth   %	240
/ntilde %	241
/ograve %	242
/oacute %	243
/ocircumflex %	244
/otilde %	245
/odieresis %	246
/divide %	247	% oe in T1
/oslash %	248
/ugrave %	249
/uacute %	250
/ucircumflex %	251
/udieresis %	252
/yacute %	253
/thorn %	254
/ydieresis %	255	% germandbls in T1
] def

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: GaramondNo8-Reg
%!PS-AdobeFont-1.0: GaramondNo8-Reg 1.05
%%CreationDate: Mon Sep 6 2004
% Copyright (URW)++,Copyright 2000 by (URW)++ Design & Development
% (URW)++,Copyright 2000 by (URW)++ Design & Development
11 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 2000 by (URW)++ Design & Development) readonly def
/Copyright (Copyright (URW)++,Copyright 2000 by (URW)++ Design & Development) readonly def
/FullName (GaramondNo8 Regular) readonly def
/FamilyName (GaramondNo8) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -225 def
/UnderlineThickness 51 def
end readonly def
/FontName /GaramondNo8-Reg def
/PaintType 0 def
/FontBBox {-177 -270 1128 953} readonly def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3EAB2EFE52DD44B141155221B5D4FD57
9DDD6D8F67894F800A91AD15BFF6E489C6C8F6753DD19235F6D009BAFC646BB5
410B5AAEC5743673E9E39706D5F3678CC44010A7E5D1BE22AE3C1207C75ABA52
7FC9B6051BC18AE9581F8A2235E81865D67EE8C1155808FF9D08444B6C2D12FA
ABAF700FB8183D9C949F84B9CAA85F0510828DA0B30B87C971E938C5159535AC
B1CC45096D21CA880087ACB4CF45D4A6A1EB2918E4834807F5E22B4379E17CFA
634E4E3DB0A2DA363A8770D3D05D10C88D579EED9BDA33A60A7874F9A5BEA357
6F068F8188B9E3FBEB9781358DF8E2F9D550F587B89FF4B05E7D5830DE884937
11475465727A945A3C49114BD0761136BEC1D4269D235DBF044430FDC3D6211F
D58E626000C53AFED1D26D89D9360A68EB2DD23E70E36DF3309F3AD67326DFF7
CD48691157C8A9443553F8FF31343B25942FA8F9BBEF580A5EDF4FB2F5458CD4
92E9E6CC502DAB588F7E2D0A3BE44EB55A2B3E8187FA24980048BACB26B7E860
D983D360522F3D2F8D2638B49066E780391BE2C45A8B2FA28A40B961024CD27A
35855FE02B89BF3A048105E88CAEDC8896A8EA9509870AEB2D8BBB777FFCA00C
18BE09B443E9E325862D58AEA73F17363590F705D4BD231FDF90935F296F43A0
4119F58BEE026609E66FE4A971CE1C25791DD555A184FADB8B5E1B8EAA354AA6
DE60174B7F116A34E18D10239B444436B61B27A598F43512CFE65E0F6153851A
438386E0DBF5E49247535A52C50673B15E1628987464D387B95EAEE7DE4991AC
955F0A225B14476B9A29A2D2D279660B30F0651CC91319D9F96E6F32AF93C331
F149570A5C10410DF8B4198000551512C31A066558ED187D9B502E6AA99AF5F4
7108EF7770BC8B934757B5A3883CF6803F0E49BFCA5AD3CF0256F3A23E625862
21EECDD8E0FBC8CB899AB262AC7C556E257A5F17A0C2314B231B561C8EF78EA9
ADEE7C13880D015A65176978DF013CB760A68F8B4E14C11731387DA71F979763
CAAE85FC522CD84A75D166C96DA1E41C309D8A299BB0F6524D530C71035E69EA
3B43FCFA95447F9B74687E6DB0C2D9F6B34E57D7A9F3C6CA0408CA0179BB6A76
7656D20C10D2A9162094445D2D7BE698150F9031680B0F2AF47E5DDC1C62E0E3
89B1C4B40A9995719EEACDE41F7D892539C3A2036A2FC44D22CFFCF87CF76310
27C5FB0B00CB12FBF788225C96B464FB5E0EC5078D9DF87056EDD8CA2B186EF1
6CA75D4D5D0A73DDCC1D50CB5FFB340DF4BF5FDA5657F80704DDBF83A387BC05
3E36BBF940C2DB1DF4DB6E1ACACED6CCF3733D4B681131808C68CF4B09FDD95F
93C2FDB3FD4C41CE6A186A6D33F60B0FB537541AD2459946C42219DFB3FDD0C2
DDD8202F907F6DE48B31844838EE9A0A6EF10683BD9BA4B465231A0DCB1B3A21
04003CE178CCD5ED6EAE9FE8C66DFDBDD50B3881FCA1A45BB6EC900FE3E73644
5F46538BA5C30C18D00132AEBCE36227EBB2D5FBCAE22D7BA801A24F7B469091
B4182BBE2C1D8011F6D3FA8206521A83D34D410C9700BE28867B9CF1B3A172E5
9DC058B276E8851C6623C713C81DA480C32DF1CCF19BAD893186B35003556649
8457EB73E1170EFC621528BDF66FFC0D4195852458FF1DA41FBB4C9BA565A410
E466B35E0282DF3711DF5C6BB2FDEA22A070692F213E2BE3E179B004CFDF7E30
7213F2745D04A052EB979503B6429B70C9A49421876F9D16DFE9901520D07BD1
B52EE10D7C476C9FB5EB919A1D92B6CF10C41359096C657BE453A2A711F414B1
6ACB71E179EFB9654AADFFC21A73701E1FED05EA2E6627C292001DA8142060A6
25BDBB0CE2FFEB527E7F7FF5E51B981C30D13BBBD899E19C8533448048FDF434
B2C0423F951E67836D570166D3626CD8D71DCD918EA77708CF868ECCB6643C28
3A61B6EAC364BC59AC02B40590A2A6EEA8B3F74F71494B412ECFFAD6ED505A05
8192076AA1CD0205AE9BB54CED17DE5C6828E00B51C71D491A9C3C1FFEF085A0
B9DAF734608D46B78A084192255AB1CAE69F79328ECCE7431D2565FED0FA9663
DE81273E2CC87AFC14429FCF460AB6765C0F42680F80121551249FFC64105BD1
AB32242279D3357035671F4D5AC764CB562BA9D3A843751186C962D26847BBE6
864339CDFD85C441C0D7A1F4B4F00308F0036CD7D839F3263FB1CAD089310642
893AF3AD561C22720C0CF528C641EE430522D62F3F6BDBC5DE3B35D43FA75D54
03C7889F0BD7E996BACCB156864D04A0B53317458B94C7D1C33CFF111F801E30
C87011B8DCAF6F52EBA08FFCEF7D5890151E29DE93AEFB85122E898E59961827
750F0B7896BD16668BBC03B92FF4410E272B1A810429311730F267343D0FCCA8
8D29911C311C235CF381F02FBF83D16D182E954E92CB6B0473B31E4C4D15ADB5
FC6D3B9BCE67129A0914660BC3CBCC7B27D9610E42C9B65A750187D2C0D18EFC
778321A6ABCCC9B5C71D0890A636EA39606035FCE2589785D98A4A83F1390445
F689512462C098A20D5BCBECB34F0C108B0940535304021508FD5108026BE645
CB9695A77009E865489CDDCA68DDE39572C675BB4B5754D6ABBDBE1CCF9D8609
5BE64A36FA75DC2D82117919DD59F2CAB2B61F652CCCE2929999C5317E4517E9
4A9DCCB6DE330D9888D0597FA3AA70DF55B9B5EC6E07A75665259A4402AA48CB
DF32E7DC0B920A172C60310C10FC15C2C1E19D22D66A4FB6461732E41654423E
E79103985F065F6E7F05D1DDFC26AFB1BBAE8EF5FA845DCBA076362ADA40B71C
7EF78271ED4545B07D03E2627C8A0B7FF55338A74DD2C0EF62DBF62310C0AA65
DDC25283DAE0E2D1CEF75FBA92ABD47A5E038F9C19A4C1F85306BB47ABA09AC8
117274C261FE8C805163A6957D6BECE4ECE2ECC342DAD01CB47576C0AFCD00AC
3E61C44EA6EAAA6AC1C3C44C57A7CC4A337EADCAF47C5C193501085F6FB390BF
A22D36D08F90A9E83E267095AB061CEA7000F63CA5B9426D7B9B7E9767A9F5DE
2E805FF00A6BEB0EFC18BF6FA92CFB8D535B2D1FB0C5524FC0BE4380495071B3
3D795B59B803C94B5A1350011C7DE3759EF572804409B84130723001BC0963EF
665EF4D27FB37B08E03DB5A61D45418C11A86C1A517F8620121B4ED00B3A7282
78B67543FAAFC357BE2B166BFC8D8A92C7D46EC32D6183496664A3291F5811A8
9F3F1D593F3A841C4C77CB377505D848BEA5A753B73A1FA96E4895D581642F59
FFBE66646D4199287893E868C395722B3410C6DD545F7A56460AA874392E443C
986789395C997262119E30EB552DF44BB8E710CD843327B1F3E0C54FFD55A4B8
64B822E4BAA28D2D6EA0A9CDE765E680CABAB9A4474758D2E81F0232832374A8
B2C95DF751A861D61B99E6DDBF2BC6D6DF576ED46D4E8B8AB84B9C06208CC4C4
E564673100660F383E00A761F396E600113C1050E2EB80ED122624E6CDD62EB5
BC80D1CD8C4908E723D1704067E7F06303521B69B90ECD4C29D1FC596A231947
3A95ABA8284DE0A2DAFC69673E1FBA8A218E61A2CE8BF08E5BC37AE13B78C075
721642408F85F5C6069BF2E62035170D82A1EC5B2469441439044DAEFFB9D6B0
61E38FDD5D938D4DFEF81A9B1FA7901C53AEB69C2FD956EB21B671FC61B06268
B672E98D6D3A967E481F12E52E58E3A0A038FE7A73BBFFB621D02C36E94ED8BE
EA90F9B09D2C3445D1FD39ED89E75E678ED39995AE246E88A625E36CB1C3D5EC
1A7970C407FEF32F232AAA226D1D0D0CA248BC4766A7C2E01F0669D5BBCD7921
89A12FC9B62E9198DCCDBE38EF6323EEE6FC5966952482A638F67C02D5D8423A
4B836B011B3F053126DF08DC831037DBC994C4B96D4043E15BD579878811AAF0
B2D2BFFB14FF918A3998FCD1A94A8A28D53654AEBEBDB8C31157E47C6DC5B93B
DA314C41EA33239EFD5CCA5ABF6DE35D35C05BD6232B0B747A461EF4FABDDB6C
50DF24852BC56951B6A64CDC1275FB37F4BA6B717966235D875DC59585AAD4C7
82B78A35432FA37834FF59BB7711A89333B47E0D7353D88969A3F3D825DE270F
BD18DA8559D7632B59B8CFDE75919A2BF091276F3327B05A59B3CF4542133E0B
EBBC3C31F886170E2417CD3927D31F71BDB8D9E835B804E898168197C02C4AA3
522F847A0ED79E24089C3D2E1137FB264382C518438B85CE548D474BAFE710DE
A53AE89EF389AAA83F51EB22932C2779C3B008AFC66A35EA0A14A0964639C608
01C1EF4A331CE87F3BB39FB24F9C16AF11EF44748B00ED3BCFC87A868EFFF746
2ABF70F755D4FE7B97FA9A2049428812D1F114AB1FC1C356A321D671000DE2F2
AC2B228E030BED122C049463AE81F7539E1AE05F1D9A70DA01FF96A9517E36FE
9CA36B46B1A4A86889A91F161BAFBF18900D50FEC3573110B501C22E1E25B3D7
62873DA182659C4A6CBD685D78CADFEA384D74AD2105FCDFFC53D1C706A1BF1D
CD5A607A1F49CA66CB13B87FF2CD107853612CB37B3904DB1CDA291D11D02F4C
22823EB0023632772BF8651FCE0A792B0D384DD87114A9B084DA5E9E831A6B52
D6FF2F1F282CE7F1680558F86F01329F1C46D07EEB92F5C883A8D0A7978639EF
9DE92D471EDCAE3860723EB13EFDFEBB8A80ABD337D96DB8CF755A1874321074
3F0C96100BB7FEA769AD6DB8473716E252685AB90D788643BDA64825FB3D16FB
82BCB6BF1AE4D866B2FCF090158F1A416240A8391B4C5C555DAD5EEEB9E3C801
1702D0227F23904838DE90AF89400F9AC9F012CCB53A2B88CE090D471B7C2289
58E52B599C414ACF6BB7EB6DC648AEE91DB9CC190E1243322A60E0B185C54A07
B65C2E1D8C2C4506ED5B45D0361A5C08AA50EABE80BB11B4949902475E6CE9C7
32582DE0C923E6461EDD83AC9356B664F8F10F1F0CBBCB3182AC508C2A97BDF0
8C1356CE769F42ABDCCAA5E0F1B44EC9D7CF5F18828D49F7E7B7E69C93F3D45E
FDEC64F8855E80F6D17852F4C2FE16A6F95F40966FC29B8D54736D607CA8EB56
2E2E1453462E7AB377C6BD16D115FB8283141457531E7E800CA4CCCA1F715F4C
2F16E876350EFEC9ED9B6A5BF6B667F721F1BBB3272A3A4E773B8D621B2E0C41
75E76128411F6F62DAD3C7FA57770DE181A612268EFB91D7B28ED1067CAD94EA
03759C1463730F5D3B2EFB4950EAB3E8301A537ED6B29FF9D2D0E3A53F7C38E0
38DD8EF9243AA73DE4FAA4A4E29ED940E95914679BB03B39904AC4A1A00EAD53
ABB334A30ABB7ECEF68E11D21CE3F2CB7D728719F0CEA2E079DD62E2EA1990E5
255A4662A6C1DA3AB7EA0FDB1228C5AD91475EC0A40C37B25127094429F7D0CB
86F95A00E8E775BB362658E31653953D75312631D602213A9E6E56C077EAE6F2
F7D3BBACAF65C562E8C6E110D2829ED5E831A94F9538E18E647DB2339D25BD06
B671294D9C62352A2CF2DB087417C62E87D4BC7ADA4DCC3BF7B231680606DDBC
C23EF880CF3A532941DBD1298F49880188FB629F9874A71B79F606BFA79D2CFC
F4DFC6FFC26057B78B17D212801358123442F42C936BACDA8F6E6D3FAF39BC3E
AF1876ED77FC223B3E7945E0FBE896C70C8281FEEDE827FA77431CBE496E51F8
21FB8ECD6E55B2B1935A1A645173A1B4FDFE7E3A533BB4915F77E601BED695A5
9AF733A3A750468534353B20EB7488379AE97C50334C156FDDDD4B16A2AC7195
DA50C4BDB1A8AE0C24067AA5DD56519A5BA8157C54FB2838C1A380410386BDB6
CD26559ECBF41165E0E2B12759D876E93E8A0EA42E60BDAE59B21F62790DA678
87AC54C10EF2EA4D5D3EAAD53C17F44959347C3F491297069BFA77876957BB8D
4FCA5C7B8B474448B26091BF6E26721FEFB63169936A61930BDF460161D3EA5C
193CBAE6B2AB40060FB0B603D3A2D5EB7D4D2FDB04A0F1BC9F2B67CA60F69031
84CDABF80687D6383CA5789842083533036AACFB5697836EE2A0E00ACC6407A9
CDA067967A43B35100A13D8A86E8AC689C191C18200CAA9268341ECC241EF2C3
8610F8F35888E87E3AF5DDBA7199B34282C530D8F47B26EA83C566AE4E4A6FF0
5E04EC3BBD8CB6B208C71C43D3EE6ECB3F8B5911A1651FCC037B603CFF4F4EA2
A0F99102FC88AC0C591F66241ECA8269A34B5441CC0CFCBABED4063F144C89C4
FF35EF81584ACAD95CAB483C9237C22E4BF7B7687F1681D103D7DFC415017C2E
5851A2C4A5CAD1C2D3424E9CD58A179A2BB40AC54D2E45D2069015495850B3DB
D091C7D41B7859835D08CF0AE8B33EED629D7313FD9858C8219FE24BDAC7E321
10282FB5B9CE583C3316C7EDDA3AD5A84ACE6F8C51299E860EBF0AD67C63AFE8
37B7F041CBBDC56ACA7F3925001E64CFD0E88C484AE928F6A7F4454579ABD905
5CC8CFB01373D14EA6FAE90AAC299B0A3174D32B6A82C3B240CC99E5EBE7BAA5
C97B6B8F4763D21E005D89FAEBBD7D8B06F3F8642FB1566B3BC263484034C1A9
DF71C8538B03CF18809BA09332C5DA24457DF7F2AFBA61F8B754C7582A8C0A71
BC1C6BD483FD867BC2938609EE52C0271A7ED1FDE816E9FE518742FBB3645667
801FD1489387E9A74C5A4E6E1750131E90A5EED0AA43FB91DF06F288DEAB608F
F30180DEC637330A3A664A1F08E4F43E7E80E645F7AEA19F3011F4AC44FA5358
837F7CC6ED863F0FCCE5F79066847D234C0A8CCB717FCBA052088FF015136D44
AB7572548358430EBB1AFD7F47CD6129B2FD9FF30E64CB7CD996D10E5C4B5F74
D3455BE977C234673E53BEC8685109E4F5CA712FADC6FD33E9B0E6F4977566D2
27C89956CF45B173A01BBCE289A295CFD5C2D2ABD635DA7FFE17B5FB21D0CEC4
5CCE9134E120F85C107CE5E670014BCD3FE0C43754CA811C2667B98729EFB280
A85DED082F6CB6E98AB29BDA8B9B5B38E548162584D2EE4508EC7EFC0FA553B7
5E9F85F6D97E297FF1FC3CDCF9A3CC69C76B1CB6942DDF6A86944B3BEE596931
DD7D5EE5949236930F1B69B12B699A2FCA90DFB3DD730D96D100DC5B1BBB163E
A28278CCAD5FA2CD9E35988FD5B8584B58D2A96BA4FD643C6C1D3B6F61BEA096
CFB1380FD318AC45D3E7C7387612A0A690BEBEEB3ED8F7DC2D8CC6A1FD45E073
C26068D662B269929C431F13BDA571E3523E5AF46542857D48094445955899DE
C98013B1859C373054F3C9BFC9D574EED73871579F724D3AE58EDA5794442906
18452AD087D53AE8C12FFB85421943A78832A4DE2BB999F2ED838531541B8D17
AC88386A79B3499F99B48F8A92F378FE3E732E32BC0767B9FBDBA0DB04699C29
88BDF034744ED43E21F26DBAE2550DD4ACA051EA0A00301076763F9271860BB7
58FCDCAD041120AAC0862B614085AE1C15D28F14C20005B39C19BC5F3362DF19
FF27514A43947F016E0DF7250FB37711C0E606B13FEC775A008822F0003C71E6
86B96B4D4AC1588665784F5D6FED61B8B6037355EC293624F454A9A2CC66CCC1
6DC273D4A01A3B8AAF36852968706EB94D17207B7DF2BF1E994FFFDCDA3E76BE
9897B98755C6267D7675CDBD7282B6F16525822B1BEC9C161EB85166FB6E723C
0AC7FA6BA49EA0881583D592358BD2E97DC820D7C91199141033AF81A1516607
B892A03FB6E524774D439914EFA7707B0A9B94E0BEF9D47D21527A3B1D808785
CA3490D0E14466BF3406D2AF6DE5C7F46BE9F4D5016AAF1D1642A028C9C9DCBF
E53223D096351D214B3DC904C32F7E847848C9EC8D98FD54FA95EF36B456B0FA
852538DDC4145A4C842808CBF589AB941348DDDF01194F49D8164A43FEA1D48D
AE476797C6DED917F9F48F217D5C46F7E3C1C144DDEC907CE0F426523EABE4F7
7143EBD6C7ACE62FA6AF1374FE190DB63D26C2FDF57BBE1AAAA2DB9927C04A13
624850276571E8BAAC6262FEA539A4556B9C244B200B2C30952A4DD9221DE09A
77B967058F386437EC967908E7851BBF2779EA237021FE653D031928B5EBFB65
264C08F4AFE461E5A2EF030046700B475E00D41AB0D9CA93D8F5B1DFDCB27132
9400CAE5B90560D4FC5E65A1A23D6D7EA98B4262F9F5C1186772E4BB26D5939E
507D946D805BC78580A7EF7997467C254D74D5092240412D54EC62508D026B77
72AC32D66D201E49B504C1AB273CD8FD589EC2438A167DD3799972464CE75AAB
769DCB3C115844FDA9A2D92ECBCC9770D0132628D7CAE18EDEDBD5F626175A38
CF69B612336DF07330779615B0516422E5ABC80AC9D793153E99C4B4F9467A98
BB2A1B002F6C556B9279FC9194E2846675A21436F96354CB974425E272774923
AC44C82D135453BD56678689754F0DF1EFA2B357EBAB1A189F424831F6578541
FB21A36E4C6CBF1F3118ACB750D98062B2D28844E50E7E44723EB4237702AE22
72FFD1124BFA91C2B251064F8F0B8FD51ED8506633238AC886D639207031A9A1
CFA77B04FBE0579547FBA0BB8BB34B51C9B4AE7A36326A5B4B5DB26DD5B01F72
15D35FB2D63518E33F2360022700959A62CACF5C08A2D263423FDD88FDFCE784
82D3F5D22ADEC865F113E77B08AC29D1F25C3EF360ECC5DE85C9F339E8DE7FEC
36032E09C30DBBC10E108665DBADEC977F6E7846D73CF8F90D73DFB2FCC6CA51
0D1697AC1FF0A19C372A9734D542E31E91520E8F904FF4D138518DD564140AAB
4C978D44937AEBF236B4D6F4854E03909A403F6731BA0480DAFBC85C21A80A68
AE510704F729FEB3AC16B6E3061BB0DCE1E7BA8E5424C8D0A899F621CB490A68
23BF8235C5A6F1795FE08342FB4FA5F83392B4B54E43ABAEC2B7C4AB403149E4
6F78BB6AC81DE809BFBCF8A569CFE3C161CE184562603F7B03B0C29A6665AA60
64C8DDA0974D7AD5B001B139A939FAD11687C905A389EC51A2326F5D3A40F938
AAF88CB18CFF74FC89AE9A0B32ECDFD0BF9071424CE045BA4664FA7011D8BDCC
EEBD4D5FD86A6DB4C3D72032DCD75308954C0E694A20B6E17926BA32815ACDEF
96F442BD63C7D3CF3C8395F8BA54D931B5A817AF6328A90DE4DAEE9941D44D8D
1E3A19399F13B93D9B567948AE07A199D5825CB5DB62680664A8C32A7059E8DA
C1E663443F5376EC13D4824C8F9AE2E675EF11E395BE0CF4F16E7B0E575DAC7A
0324909EF3EF2A4C728BC84F21F8E2E240900C2AC7BDEF8FB9D4574698BC8D4E
3748A7AB70671F12FC2A455157B1BF595EA3E14929085DBDA5AAA563B6A59B12
647827BC6F11BC2C3CD7CDEF8DF24F9D8593AFE260F9E5F5A40A469C0464406B
7A1AE866B66445F46D432299F879232E98F9FFBC326D9D0B73DBED9495D080DF
8A78969FF3C08562DE4012BAEF33DC7033F880B0C4C682AF762302005B0400CB
5F7CB4982A86932EFBF8A7CFA315D2A1B0FA5117C21FB2DE99DD2C1C51590A04
D6A74092A710A9A82AF7E4210EEE6AC5E5FE8B8A3794787779F7699443E56F51
2E3CE8C856BCD307E414688E194E6130736AA33A536F7130F3FADE59740C6395
F0DCF6CA9C06832E0BCDBD641B9E673F20AFE5D3D769E408B6BD71BFC42CC17B
0608329D093E1F99904BA646CC5760009233FDE0B38CD4EC1D07A9F817ADBD1A
A3442526A4E19A8C02D1BD76F1DB27CEA5D181D7E6B9C78542A5F062F69B9351
48E81C557C4E1B77F5441CDA5E14D2EAC98DC8423EFB3F3A2D2CAE793A820A25
BB2E4AA081D5EE21179FDFFF655E4CFDAB7EBDF1D97E15147CD2F0C0E7EE52EC
5A8A0AB9A574039A5B0B9E2065FD749FDF345C143EB8F2A289EA703C24663DD7
C2033896EFCB4A473E8545D12267B73080A454BBD64F4066B32470977B38CEB8
25817324D6DF44E8987CDE0CDC2FDD22CD17486F59D93ED63637E95DA9E5DEF0
3CDB67F5B430EE469F8BB5520F841891A44016F574B48377A7B35AE42B2EE0F2
A2C0F3B4F3AFF31C3BA66C8F36F2FA455078A85E6F0E771D83269A99D5503668
601C5DF29534A987A1EEA442759246C9FB1D736317D5834E302EF8913C6BB608
353A2932BDA647A4E659A13983666784980D7B29A9114E32131D04FA0F4A1A7F
6BA07AC9FF78142387C1883B80126A329FF8FB8643BB806233A525CF543A88FD
49E303845B21072013AB738A65626477C1F1B8790B06372211F15B3ED7B870C6
13541C2AAB90A551916A646F58084A7FE6668E22ED3E54945B0A6BCB56B3688C
C44465DB74D9CD6F6179FD087F07E48A48E44CB8514B92D2913293D99529B8F9
EA47202B4392FC6D22DF03991A9D95416FBEEA99D37EE26EB45D698F452B7BBF
7284D4C06FA940F9ABDCD1AE4F22E9A730AB8D4E03339F840C8578B6D7B384C4
A0B8D79FCFEB956AA7C4AB88272B4DDAC2A26AFEBA71949B1C8751402F55C38E
0C20B8F926447ADA151893F3AAAA53331F900ABDE14654AF1562FE50627D0B82
8432369D5D312D357956CAC2C4DAD2B14BBA9894075DA8A9200686C64F328339
EED292A1D5AF346648EB1F4F28BB39A43980A914C7FDB09D1CBB1414E44E4886
2B3F92ECCD38463342F9748FC7BC8CF9437C07B1A1500EA70F1F0F037DD8587C
B54E279243C2A0366D689A08E673E503AF44B18EC04D2B8F47B369ED9AFC3E3B
74F586AEDFDE61534120AF7E48269FBAF65FDFBA4176A0260ED78BA22D73F5F1
599A0296DF018DDA798A0DC897D233A80CF0B4EB92433CA23DD2E4413B11FC9A
0751C986C2F3F13096294F0BA10BD27EA9EB2987B6810DB17B2176953F4342D0
B05283E667F57EE5B71075C144DF45E747C96796C4858B94487B10BB0D95FCA6
2A8AC6AD572316264E153925BAEFE0A8EA75729C45D63A6ED2CB38980BE0E158
1AC2287A41CBA205AC0B551B5F8665309B1F747F1354E70E91F4110F6ED2C9E0
B9E27E5EB32D93EB64F9373D829A69E2B42AED8BFC426E598DC935A5FB81CC1F
6F9627E8FB8D95467A2297D83ADD922A2813504CA1EC0B3FC9A7DFA151A749AE
6556F0D49C547CE4F065413ABB689244F248F0686AAD20D4140B854F2E7C3CCA
3515F8956A3ACA607CD0CAD7FAFAF85EFBE02E49091BE71BE45DA7C06D2B7FC2
89251F14C55ED95B3E71B0B811EEDF90F5C4AE3A36A69B2F0747FA5652523239
93316A94C0DFCC7356BD6CC7CE44F36D246C140E93D35E2A923EF762F377B5AB
62AF3DA89831F1326F2471ACB023DEE119BF9575D1374253B44A943D4733D8A1
532D71BBB2FEE232D41920595AF0E1BD5154D3FF754428AE9A7554607C9A1014
1E3868C51AF0BAEFD62BB6F264877A80EB55E9BD80359E6CEEB261135F73B0B9
C6D995FD0CA209FB81A5A18E98E9785EF0E43F48B73455D293113BDC83BE187C
5B3005795F57EA33B60DB4784C80119CB77D9DE1DAEFB959888B5DC6EDA08D24
977639DEF45F662F09A21759E004E2255DBDC20ECD9239E2E96E73CD01019E64
2F4BA159E3D21577F6233EC6EBA90AE3391FA1FD73E1A4C27A3DADA085369937
1C01CA2FFD60920C0693565AE6461EDD83AC935D1C64A695F2491899540B30F2
8B747DFEA576A8335926EC334D4FC9261D33D2F902742D0E51D69C73859F4817
4B65626A8F6A5D715D48F8A86062D4B2F7D36BF5D8338A3D9785BDDF5A16E95B
1A1A90B4EEFD97AE5D18BFE17532209C3EFEF694D65BBB0A5DFF80F6DF80518B
985D783FD6CEA8F92E2968FF726EB83685DD3B3DACC4F13118BC1B6E25066C7F
E21B350012091D83D6350A31E19B37E2722ACF4FB46AD2324DFA3185D22CF2EC
2AF9664B9FB3E4F39B4E372C87AD148762481EA506582D0C817460440E97A7CD
B8CC5C7C3CB31E874AE5DB72CC6063AEB0594FBD382ADE9714DC4B23882B1FE8
02167DCFBB62E87C9544C781047021DF46F69D7674A36339E58816C7A8483933
1D071515CE6AF7CC9768F72151B6DBAB02EE7999C2A97A19634892D0F4B60137
D712DDA34A21214F68576524BE0B1B9D7954E8F63C8D44AA92004E8D5B1F3849
D5C356280BE9A7F7253F7FF837BC19B85D576DDC150F2066AA14CEA45F75FFCD
C194DF7541D34DFBE9593F146586BEDE9B4149FBCC1B848998B61EB83C71F1C2
7895B0F15CB902EF9E2617F4321DC2D59FAF2BD300218B8714BF018DE8EA35A9
81C0AC8EC82A9317C6077F046C5DC0D0C0CA5F034F90371BF4BF97B231916443
CFE0D6959D5114EA20BDE0917C28ED4AB2CFDEDD19E0382D3D58C90DC6F1E8D3
7D608BCD8C2F7239B03D2D153E3FAFF64D314B6A2A1ED7F751C926A472387869
490FF59CDF6401A457DE299FE165DAAC8998CFC24B20D04EDD357074969A1FC9
50A563CC9590EF6C927B65657FD613B8376A3BC813AADF797F6358D4B2341575
900CC6F069363B8CAC7E5AF3CF854023A8480AC8BC554849D162DDB5D13A0034
139E7ACCAF0F945A2563ED5A291EC1B8AFAF1AC8FC2CC872C6CAFADA11CD79B4
6A5752527C58DB3F478A39B1B0F1EBFB4686645211715D753D6863E7872D04E9
E5E36ED5BC79376ABF5FE2F185347949C7A9A32791920686F6574C8EB746D5CF
B41D526D99AA5755774ADF550DEA9012AD3D9EF3C67F0F2DF2075677C61515D9
1B75F759E76EDA3D067979B376901659196C05F277E5B6745FF42AE6F1F4670E
973829FA620AE92AE6390229E1F15174DF4AE98590FC74605A15ACB7E5275582
F7A299B0F502F49637A3099F1E6F70BF8AA0960031EBFD5EBC64404E8BBB482A
45530AD70630F748EABF2208CD8C7973617953F36F70DB778E6032E3243476B8
74464269ACA5BF8253D459945ACDCC8DA70D5339C919D9954FE91E079DCD0CCB
AE6B9AF13A25D14ECC5FF4C6D1DFBCF8CEE94B2D04B9A93E9118B3322A5C3489
4BEB40BEE8B5C55D9F59B11344A0B6E3A9A1704083D27D5690B18843ECD4207D
820615BF6AE3921693A7B12C5083F0C991CCB5EED234DF2C1CEBA3DB1E042443
B665E915991D932209B3F4CFCBB9967D5D2F30D1986CCB571F91D96EC8DFC16E
97A5802DED516CD632F679E82AF866F6313DBE8E42D4B1055591CB9256C0CD4C
CE3F8060B700822EB157C4BE8DE189B77D73304B66C6BA835EBDDFC19E88CF11
D2E7FBC54AFD17747D88A77C5C5009DA281F29ED78B547A4D834DB5A8CDC0263
A623B9667246FC2462100547A0C0F58DE48BDF9F82878ABAD0E20B2DC4D523EB
7E0C2CB532220752D104FA159B6DE3E36B04B69FB1E640A4C01EAC003C9D7D85
0A9652299EC9FC0D82E3C7A33B6889D8D3C9D932F270788C2EEAA65D065D2105
AB15A687127B97FF63E29661537A84CFDB2E63B8840BE4F9C7E39DEB8A1237FE
4358DE2C2FDED543CBEB81BC4E4C9E25DD54953C19A2E022CE8D316D29F50F1C
9F8A768B495ED6FE28B419FA2620849978C811EC38A21692F938A0608ABC3F1E
6193E58F521CEDA9446FDBF3500C0CC44CDDE9C577433F1C34EEF64B1CA783CD
8AFA7BDF9AD94BB10DE065893DD1B99CF60E70EF23BBFDBD098BB8D82C00F953
49DC121EC622899939A8EB2A7B29AC753ED719B0EDA92EF2EE4E7B73DDA667AA
6E818F99D189A3513995F82FBF7482F59FD0F96B3E2A4466CCA44755133B3AB5
2F2E454991A62FB03473A98E06CB61793EE13DCF5C2E244DC85556F666C7ED81
894089B687A826D6841809D5F0B52D59E6AF662CFDA9AC18A33CD4042C363198
B3186005E9D570E7A1E2EB5632AF3BF6609D576EC783186F66BC0AC8953B06F9
9B4CF1A5FA7BA0C6C2EE65F3412825E15AB6E3C75600D22E6C0CEDB628CA6280
F684DB64D969015B9BF09E2EB27D88CE83FB5746791B7EBBF98AC811FE95EDB2
9E93C684E4623C0ED138A48259DC08D6ECE0EF01BCD9EEC871AFD57FD3DE68BC
B11B3D0DFA60D4F1FDCE6B39387CBE54C520F44C00231098F3DB66448653E536
A3D89386E1431C5152326FEF4FA38D419001AE35BBF8E45CB1D9EC09E266A737
9762DCDE4ED63CEEB367F9F821BC41A7FEB9BF2AABEE5EBCF53CB1041DDA059B
BC1CD1305A3BA4B31B29DCAA3E8D119738E420E03ED77D9824DAA20B84FAA9A2
DDD36208C2C27956D4647D2D624D9688C49F9C1C2FBC20813149D26442237EE2
121C14F116A1114838B333EF11AD607E32352AEFD997AD21C556376D21FB706D
26251A2ADD8806BE4D1495247B1EC6571E5D15825D479AF0E6EA5FCFD52F0175
3FDC5EBCB8388014947DFA87EDCC6CCA022F798EB3968CB90426920BCE9B1474
8E6778F8D57CE7532220B7A63C6DBB9532ACA7C461BF0BA086CED7A715147DE1
AB55FEA2AA4FB28CD56DAE1865B46C21E0E7B75296A2B47E4C81BA6C9E6FDA99
321F57F6794E4F8774E11795B04FF3E6F6542C4F1C6EAEC54DA233359CE1218A
76C37637331B271A011727FAB8501DA3EB452F903E8CD929C309009C30F1C356
E5AE411E7EA01A0FC4D532C129C31F9E8C66735C59EA38E3BCACCC6F85A6E455
F47A1FA53C4A2010D694B95DA29C67A81D03C05564AD9917EA478C1605A709DB
9A94BC08D61C1A6E98311D9DE7B63C2CEE2DC1118746EEA119D9804673924FC2
0C12DCA73553CC5A757FA50D53E6AF18AF09A1B9C4792EEB62C22746C788F104
490DC1B3A97937AFE44F3CAC59721D3A7328F6F57B13A373A9E0DDCE6E0CB200
84673725C1A82B8C6655D93EE99C369A527E8B26E91080CAA7A22E78EC3E3C10
0B5FA02EC33422C9ADDE0F3A11433BB95A41B97B64503E0E89C031ED687DECE6
D95A2B7A44BEF5528367724E6A7662499EA3FCC278B616531C0CB5BD64B9DB0B
2EB573082BB774BD3A77F09FAF5C0BEEA7B88FBDA4EA491DF016DEEEC4AA85D1
7812F9302EE8C0D76C455DB90852326DE98A17CA6154B18B7D052CCE37604064
528B38EE9A2C2FB48FF04C76B4230E584DE6D4A350C71845D5158534EE24A738
DA3C04F52BEDC9F5ADF0686CFC61F47D6C101972BC861F80C36AAD3511F899AF
EAB9DED4512B493D4CE9712BD8D0E82E5F05D1F960307E83013F420403409EFA
81F6B5E80114385D6B52E2CA87A66F037C4184CA5445D5B4F43726D9BC891653
DA66D6E7708B90450506739302816399B8C8357C1F0EEC28517DBD928D3FF52E
73696F7EE6A9A6C549D8F732F745D9F1A4A9D8A9F924028ED77937B477662CCC
E77BADAA0968396D9F990892C2D7E95B159A68B1967CA98D2A8C5437FC0B77BB
85D026CE39C8A5D9B970AC4A2E4272557C556DAACE18F7B182FBD0D0A7551372
F78817D52F1208040634512C47F2DDC9632F3E92429BD896052571745501CFAA
4364C8EB1924EE4F43BC4E4ADDFBAF8C4733117C76CBA4823F89B77292DB0525
9952F2641C0FB8C9090B9661196DB6B78F7F4600F85897A97EB497CFB3AED2F3
76754E1A05A4D64FD0ABF4960730E587E469E95259D62D6A4F639D0B81EA3E9C
55448729DEC75D2A0E8B213B4867F2F40963ED20273DE977D7675BDD7272671D
CC2994064F5810B772FE3752CD2D236F7FFB0A82F4C0FAB6B9AD9B8AB909430D
446B592B86C7A08A586B816A9F33C742355CAA0161322A7F2939CD95B2246112
743572F3E067C6572AC00EDFF20384F08E6A601CCE457B53231EE928907159BA
BD9C192EA36BECC9E384D56BAB8807CEC8A8F7CE1AD1497CE2E1BB5DE4EF9055
4DA157F0B3F4ADE8D0DC6B9E205C7C32C27241739C55034216407B22A304F0A7
E2E08897D14EA190CC4C05466205126E4CDCC23EB4C431FC6C1DBBF79938BA65
B361534F8E7AE523E0362AE977FED22B5D04F2E7058E549A59D4BBF338EFAC34
668DCDFD42ADE014DD11362031E1E6ABC85888DC059DBE81F40B65934AD2E4DF
3C2F18520EBF2DC86360DF3B3C7434A5BF4A3D0CA816CBAF5C1129FA76BE1E83
219B7A7B7AD36C24DB626587A9925F62EA08552117756CBBE4BEE813FBEA06BA
E87B5AE215F297800367437E55E2913AEE5916EE29FCBCF10F46718C5BFFE41B
155E16E0E1BD9418648F63F45FAFE8180B3BB8453EA2DCB96E05153CC4C64F5B
520074C56E7419D9C7915646A06DB1D8B7A0F17BA86D508EAE2F72EC68A4ED8D
EBFAC497B79523DB296E70D1A6C7AC81487D7C1D247910FA340968F8A24156CF
D2346CFFF4AF74AB081E3C94C08C45C8528649880557BD2644344705A89B2E5F
8A8A0A9C078EFDF4E3C5DD08C031E2D37BDBEC27C6A65DF5EAB9D083A518A98D
7D89DB25DDCF413E8F95E4A91040E68BE1B956DE2A5E19C113E3D789B976869A
6939DACBAF6EC2C7EDD3C999EF16CD22FA16EF776108C3CAC2048F0AFBEF18DC
039974CA6F28A5541A50131452772CD1E728117F24A4CACCB5E48714B1806773
DB97A59CC583538BEF8F258D90FB7B2E1419CD852F12F6AE155FB5DC1624874F
BA14B87DCC79F5D58108BE96E83D43404BEA4DEE1884ECD27676F0A9CA79E93B
108178E35B2156AB6340E87B4A9647EB5D3C3800535E81BCF9F47B77C67DB8B7
F1EE2B9EBB475BC5F86D26747C1148DBA6DF409089726B4545434DCCF7BEF00E
A5394A1CABB323CFDAE42DC88A08CABE14CF30B45113B2C6A0B4833B5D98AE03
79BF7CC50D840A7D18AF8E8FB19B66C3F7F67219535A75D910FDCF167F3EE67F
DAB8DBDC95149020604783648B771808EDB13C5212138BD161ABADCB3F9E143D
1C495AA4B6AF77194C3E3167924346444B06992125DF242385076493F0C98583
36F527238E7C6B65A6FF2607142E11B4A49BFC02009D766E2F537138E869D28E
56710F7DF7064B0E41819343C17FBEB9733973D9209023E6F8A6D97913A1D1A4
8DD2D5E41E4E03973AB333C1936499FF00F3DAA8C81E9933AF652119087586E9
EC8D9C356ECA3A4B1F5A83B6A7E0DC2E93563ACE8C7B182FB072B20F425F2D5B
15C5979392CD0BC8E938400BE800C27E72AC855B2DB35300D6E198F7F15FC046
89D6B48F8C90C2BF34FB77D107652B4B2D4F5B59051A97A682EF346AB6268446
7F95BA5AFDBD5AEC9B4068A10D2557FD1160743732CD5548684B349A14ECDEA0
65466406B8BE0E6E292E1F6EDD825DAFDF663C27749019745588C73640A4329F
C640208EB24B141846E8F70092D8726428C569C92D62742E713C16CEE765CFD0
78FBE8481C4AAD3A831D2ADBC4C719FC0000B7F7D363F8DC2F0E194F2D80E254
B4CF15B87648351EBE08AB51C7CFEF394987C6A6D34C0F4094C1293DD34A132E
F8E9B8C18949EE661744FEDB87A67ABBF1498970E7A839BFD9341112B52A621A
0BD4C7C75CA9013E6F407F592450C521DA1645571F7F551C355AF01070A814F8
A7F6297717CE77F57E7D628D29D55F665FBBE7D250FBF2019AF8A01B598D59DE
DEA75DB5DA61A8A7E4A6341537645577809BB602CE222077FA1D8DDDBBE832D7
57B743D1744FBD36E28A3A4A9FAC3650493ACAB06E38E32B0AEB90D9BC0E93B8
7A7C9D9CB3C80E8EB2AF96F6E64E62877FFC20085E246E981ED1D5A24B044048
814B6ABFF7C18B3DD54B8D4D75E360FB906D1BDD5D2A35B61B56F2DAA334F6C2
7D4F165649DD0EF30B2F220F742C52264048B429D2342152F2292A428F51DA47
8AE97D891F7F0B64C3002F1D7C407D3261F8813AD30AAC9619780EF50AF459F0
818F807F0A71F43814714FA084CC6360AF36C57B575F23E8CF6595357AF16637
0FBC34663071B789A9041BABEDBDA80F4423AEB196008D01AF1A2A8B6021CF78
563276F7CCABB86D40ADFEC8AB3C63CE9D70B2996D1D9B5DAFAB6F8DED26854A
8B6CC3087E9FB34EC9BCB0E1811CAA24167603386090AF562DB6177EC12CE0A7
96BF93542ACEC9A59326B2145F7417C0A15F1DC673AB304312F5F7235A497AC3
8170891D0D1D07D45CEFB8413BB34784DF15E1F11B15644BF6F3DF9D2CB12DD5
A5D4B9B9A6E6400D5118B4D347C96AFA92D50F12DBE4701AA328D40C87664CC2
F53F183FE8DDCC8D115A94D7F27915EAE165D64E95B293CA1EA6E6CCA7D1B637
C2BEEEE4AAF181C4F335F43A98B04F90F5FD0DDC1C401C56F989C07F6E354A77
D7407AC9EE35142A60AFC47BCE121C90772574AFFD56EA4F3AEE60454A766CCF
9DAE18C9D9E59B092FBC12EB83D8BAAC6DB072E6CDD2B5B5CE637CDB0F62984B
3F134ED6147988BA8F56D8CB848CC13750E8360E0B8B5A82452E85BE3252BA93
FA9353539550DA2057B324399A3ECCE5E2BA5137835CD7C3256E3B80E5D62A43
3A0D655CC10F6B49D11EE1F69E52157A9C53E5C49473C88B8B3A93BB5C4F61AC
D3CAB2176B5211E044FBCBE9A8B45245F2D583036D3B0941F2BA0FDEB23243D0
54937D3D25855AF829D5869F2C700C7E93C4532F06805C0366ADAC0954F7980F
ADA8BCDAD0AAA08CFC30B50429487BDD2CDD96F29BAE1705068A42C9283C79D4
F1737CE9189876ADFC0735466CC4622D208F21285365609DB9B0433FE61F3F6B
9D55C5876B64215742E7F831E34E36BC5DDACB0F57E46F201E73B0980166D417
C9555CB8D988528267795252C961F54846F35BD4F02EDC92174AF311B022D72B
1E3A81E6446D973476D20E17BB9E83D0ACCD0D618950963A2199FF324C07E898
C53CC73845AD8452FA6960DD9F4BEE4B255B6555B32B69CB5533EE0005A8B3F2
AFCF3A5DD7C6710BF8D7A9CE56A52B8681CF27A4FD971E7871B59FD460550855
A79E8D83E5793804A88ED13C1EE736C7405145B8D490DE0A8F9D81FA5CC0A9D6
92F22DD378AE8AACB9E24445C80DE9938C1822B7CA759E8E3424E95A6FD63C1B
52859105FE16622C09A6BF61D6535A8B622687CEADEF97755B0348FA9DC5B5D7
771CB97E6B3760D798820AF7BB2F70120D5291D6372C79C94A12ED8F2A478545
98A5CDD5ECFDD085EE27FFF5160D03822AECE2F824A4BF44A2E54D4F6A4929AC
EE221ED73B1A2872EBD355AEB130F6DA28F00A661A0BD55202233C0DDA03EFAF
7E05F1729F4F0D10A40E8B4E9C6F10C856A7113014047A979716E017C4BB7A1A
17351B89567CAD3B8A838A10C51A4D61030C7A97825AE52FB71BD7EE5DBD0E07
DDB60AF2B3E2A25F2AC7705CE33A63854A58795131CA48D41C869806C86BE48F
C5A9C59E328EC6220D39DEA724F866DC305401E5B7B2B51923143BC38666FBD0
0FB2735E44945AD0C77999785E6427AB0384D256BACC85EF62918A254CD35347
265C89AE4BE1EAAE713EA1F30CFF66451E05B82A50EFD24F6D44D0A0EA39EE86
6FB80C37F38AECCE09296069CDFAB842E314477F33E3F481CD7EF4387121F7BB
3E71C123B7E8890D96D782E539AD11B4792DA3BC7A178335106E26E9BC3E8C40
F473649B4D7F22C60AE317552DCE23C564D36B318AB17039266B0E02E97F0B13
60B3DF4E828129FA4B31B30327A457CFBE6357FE2164A69A76D2D39F4E720B56
2C644A01D192F20C3AED0544B6FF3810F1E3C9ADAD23DD3861DF9CCC90BA74CC
3BA469FAF69F64292E2C132428E94CD9D55028BB5FBA27CC2E03F06156E749CB
86F28399662B028F216180CC8093D5F4CD8582E2059752A1B87291529FB2A680
41FAAA07B271E1E907A9F42F32F6245332F5FB5B6AC1686FDC2285576E5FD2E0
EA1BC88E5230994618C4D35E4DB532EC9A6C16F788A04E3EAB844C4A1C07FC19
AFA19706666D83E40B6A29DD11CA561A46453DD794DE84CE4FA6EBEC3E5B5ABF
F793F0F1ADAB967B536F95118B5617BFD3F22C7BB225AC2CABCB3826DFB95F84
D6BA695D7DB05121613C9ADA4D28A1F0C481B401969C6DB0AC86C2B9A96A55AF
373994003B2D0C0A52D30BAD6AA96AB7ABD71752551202BEF47F4CB1A1B433AC
A3BCC38A83C7ACC1869D19CAAA12185B15BEE99940BD3B54CFE141BB04599C65
9AC02A484283ED57ADB033686C59273D1649D08DA6BCF5526BE7137DAF69FA3C
B988F39F78C49028F495EB1E319767B68DCCC878BF60E5729E10FFDB273F7452
754F4E856242272C1E427D7A7242F28FAB23C77AA3DC217DA4EE9BDD7F1A030F
77DC91D0CAF33E322B3CEEEFC72C9A74794E35098D281BEAF4AE3A0136DACA89
4F3545377F6CFB041895DA2E4567556402694E6ED5C5BA248AD1B27C6BB9F5F1
6DC74537882691866C2A203507376080AD6B7EF441F4EC1A2017D6AF1D429201
711ABD6CD0F27BF5EC576EF15068CD4CD5FA7E20735D4C8FFEB47252E352FFCE
5B0D2FE1799EF116090837D1E19433A2CDBE7EFCBEFED7E4F2AD094A15C20634
C4DAB8EE814FBD5D21BAB2B70E6B5894A8120F405C0CC4E2BB008A82AC5546A1
652742819FAE52AE0ACF389B077C63132FAA7CA06DCDAD3AFCB6BF39DA4CFD96
07359D07DD355C7F9FF066B20516B8A36C2AEECB8793DE7E422D62A2352AA5AB
F35A6FAEC768610CF86CA62DA3A005404524A7DB934E130435668E3861DFB486
6656097ABBEED467CDA97404B9E56C0C9089FE0F5C2A09573858CD2CF6E42D82
A8598E9C54FB8B769FD056AC7CE1F8CC0CCBEEDC5F13966852EB22C974EF1942
7AA323DF1F68B1F5A5E5FF90CAB5F030DFDF37C7882F50F7941F16C4C0C2C885
72B24B8B49875D19B09426C23631C34B9375ED7372E3FF0048B4A800C4D2131C
E8C79D15DC8427654D6079FC54DC8DE632131BFFE61E59E54D135CE6215485EF
CC91AB5F13B427ED1AB262124DFEAB539D5CFFF3C7C7E403902036C4D96850D6
ABF94BD6A911C864EF6626CA3814E7CF2C3A528E8E33731DE8BFE2D24F89183F
003D50035ED1C16B2A8BDEBFBF83327634470097ABDEB9BC5AA7C7ED395CBAC9
510A6537D399EBC68ECD17F7058453735A8253C059A562FB355C09F982414AFD
BB84460F4D9E86CFE5723E8D5A62280221C9E55F66AA6BCF1A7F33EA2BA95D0A
A2E2DBD4602A71EAC13DA32915A4C8FF83A168CA85A734A0B1C9D84E718EB70B
7EF286DC04A485502432CB45F8142E64482A62060AB2F20D74977FF1F1D8EE05
EDF8E95C5C8F56DE5F06C043B8577C98B6E7D99DA2A54FD9D09DDD09E7B0005D
72CD16FFAD4F2122E84EE35079AB3537286D970C44BFFAF68FD29BEAED7011EC
56519E07D4EF9CA0F2D3E3A923C339F54A5A9E5E4640D3F1C80D9778C3B4A103
79027848F8747384EAB4DED9F67E6FA127CC69D4B4EBC4CF3AADC12214887B3A
EBC4DCE6A63805F30377213E397E24F9801F2D4E7C7885CD14349BBD39F2F79B
56639B4E46BB2EA6D0F54CBAF27AF417DB61C3CED4A182B33A184652F54B7BBC
D69C5406E6DAEEC15DD9E86835833A74E091DFE77936E6A40F83E98856DCD1C6
4DCDF58186E3CEE4277EF721E794371A7175687991ABFDC04294F180A35E1303
4D9FF9D8DF3D3CCE8983FDAD468EE0CE2DB8A5493AC24A696D96221968E094BC
9303C6A9588EF72BB3CB14663CD157654892EBEDB90466A25A3113A921C32D3A
8E2D65F737E2E45179730B17F2EA703E214D890D81D04EEA3245940A50E0D824
92D4391E74AC98BB2648E1CA0D1B8207CF3085F0F6038B4A64456D7920BF4F24
B7AF9FB17A7279602B1DA92E8DCE659BAF7C85D425DD225F1E1D787E25D439FA
07D2BD30B4CEC44735F258F2B3101976FB2195662B61687D46C5E4A3DF68FABC
05D6F76D49C962B3CE8A4B3A74642E6694561709722801F734006C370CB280B5
A0B9DF7B023B896CAAF8E3086A586642931978BF6A03113FCF9BF1EC265C3D02
F760EF60B95DE1D4C622277A11A3458B8BA8A3CCBC5BE563AF961AD8EAE207CB
779780F795566CF1384F4D488D2919E75CC5D4802344A210EB84A9434E5DFE5F
B4233A9C467DD9D717D74C9BFC1B076F187343D2900F8B8CE414C2713134D4C9
78B0D558F154BAC0BC40E60FAE2A1E7DEC1955D7ACC14963CCEFC1EE9E5B5E5D
B3F528FCAC4F0A488E587CAB761792A766BCFEBFBB307A3F037871F3E4C0C1F5
B8B9E6520E173D6CE994902A4C425BA9CBDEDD23A9007CB79A4DC7A4478AF522
DA6A5B4AD1F51356AAE6F52C0CA46D1A19F2A2CE59978AEBCE752A949B3C61AA
ACE76AFD660D4B94BD71BAC77C16253B56219819B415A89232260B52982E0807
7648C96FD17B0C7B925BEAF96C0A7961662E33C7DC173A7B8C0E14F490666826
F2097CBF8E4801DA35056C366A89B15D74A748187941EA0A5D01B18B7CC6FE8D
06BBF864E88F9B71BC6D95B4D1C9A28F6E6BE21505042F67E3EA8BA574A5CA77
8ADF799C9A2FFF0C032AE07EA2B4B3DBAFA742B8D9FCE9994E536C9E8B86A33E
29DB117B8A2204D8D825C424F3F045DBC62FBFE4F353020A3AB25A8D2F467F6E
E4B67E07EC0787F7F7B9B36B3B4990DF8510F710233BBF15FBB549956DCA8CBD
2E6F817A7190076264757FA3783AFAF119E5A60DC4DF32B76C6A3A6BAFFDF04D
160DFFD963E8FAE991EF2449BF18AD6E7240F6C143BDAA7CEC341F7B5B3C4C14
1CEF2F4964125002EF15762D0AC7638E2326288130A377650B7960F745754CB8
8C032736F626C0BB3CAD2EA33A8E457D3B6F4C278BC7587C09CFB052316DDAC0
F3422DFFBC9898A8EE32B2931874602833B43E25D69672224A98E1C11A0D4463
A2E72AD22F23DD2622B6472EEE959619AA0A69F6F36B9BE10FEF414B4E2F51C5
265515F35A248283CE1DD7BAB294481001F5468EA84AA5D5D56E5C930D30181D
C4BE0390895C39463A5B3792BD5363A2F261FBF15B4D6783E9D13EA947917987
76A0DFA51C7B13D848B76EA8B0326C054483AD5B8EF3D97266D353E81E03EFA1
56D380F32D344420AA823AD19EEB553ABE1251AC6030B971EEFD8EAF580B464D
D2AD250033418E9994C36E6AEBB8A332C8C169D7DAA4CB5E0BCE82B614CA396D
13FE5FCA92FE541D8DA8FAD2645F003D3ACE4E902FB66811C6407500CB2ACBF8
B7C2FB5F44C11E7CFF78A0776044BECD53E35E68B22FFB437198CA85D97152B4
FEA940D7D9E69B81ED5573AD8E36F6E98D21A25443047BC16FFC471F433536AC
4ADAE01D9B1936FFE6546523E7A14D8F2AC1C91A16B4807555FFEEFAFEB66B75
C2DDDD1F20778C9B9E07A0A91FA0B51AEF213ADFF3651AF2CB8E3D91169DA52A
F888E68DFCFCCB7263A42FDDE859D28CC45FBE95CC396F8851C2E7E26E9C1D9D
F5029602D228E52E18CF45050E3A07C8471931105A4300B17D88B2652BAB017F
F2D506711951B94E027351497839698C567C31CDF05C839DAF2CC580ACB30DEC
046B05F160DE03ED0345653DE07C59871A5F478F45A893B34997FBACE4915BA8
A1338F983EED7D9B52810BB231EA16B8616BFD3F7039F54871D54876C9E67AB2
D1E4B43E79E52E1F9185730FD75FF0EBAF91956710445440A94C098ECBFAE809
B8BCF35F73090449C779C3C71F4D82B27FD4C0ED9328083D7B253A38D4D5C707
FF17F1FDFE51ACE11DB4B93CC518C42225AA1DD1F87F75CBCF1D81E1E89787F9
3A84561764E695CA9B080928032A5E0EA279E9901BA4D7C50F805C778F59CCF6
2EE5536BB19C39B4A4FD85C5373371E3D5BD9BAD14FB5D851DF05D5A4C4800DA
716BFF39E242C22606C209A4DB718A48346990F5C8E7A6C8E48AF552A9DCBD5C
AA8CB6519569679784BEB05AE1D22CE0DD89FA0172EFB97F9A58B1862655BA3F
94EF1B911A6A7A2711D4204FB72FF749CC5A5062B690889BEAA6A050682C1B48
7B58312D15E4ABD3054CFEBD041079EB49E2527E74DA264007768A838F6AE975
EA644DB4D5140B4AA22256DAAC5E1E8A9166099EAFC643F7CF544B8A2CDBBC5B
50417654398DDA2564636F5B87196036680700BE574819BF1A8A9AF184E0E250
F5FA3A4D1EFDE0EE20298CD6D0B4F11089B91E67490A1A0428AD65D811B7B958
99851673AA85D9AF5E20251D1DE1B6EB4FCB84EFBDE7CA9957E8A857812E3754
A93D5A18A13F93FF3C4A279FE8051B5D90A46C39CFD7B3FE897AE531E17DC153
539A7D559D80029AB30D0FC16A53A6F72B6D9993D585D66158F4E4A444B3EEF1
F6598A4A7B7EEE9F68B71565A59FEA19DCFE4C5CA8A3492B384BFBAF1F1E9370
F753B680FB6D1B419D4C35818450F384BAFEF1F13FDE4C5757C3F64EBC7FBCF8
96902460C0F26590A7894CA6F98B82996A49810917537F7DC74C4BD274E637F3
84E090D5B654340A2F011DE98EEF749A2E86F22BAD7477791A1F5B79E2B233EC
B97E5020A22511ABCFE2D52861F68448ABECB07186858FE8A3E7DEA349159CE1
95CD808F737AF751AD8D0EDE20F767F0BC468FE4C6907BAC3B56DF7FC689D2EC
F974A921B6B7177C6578AAABA2462D5D38ACD7C205413635B9F88553A0FDDD27
1AA0B60B932181983BBE5299F16DD903623D05838862EA91A74D7EA4A861064E
50AC836C1F1BCD54BC33D3668A6C518DB9097B5B4404BE07620E1AD0B2FBE881
A858F1CF073FDBA22BBAF0B46E974E074A8CB0D8D1A49FAF12EC41FC9CDC1684
C3E997591FB113F89F2A6F0470E807E72E523BCA5C54D857E62EAEEBE87A9FED
652D8C97E3AB647C3D41B9FD401A4699624031969E405314FEAD43C439B2085B
C400DAB603A6E518C9370656DECFB575A8D7B4BE2374206C6B5DE7C4CE30767A
3C15ED49A0B70E6CBF9D4CCDD4B44E3CE08BE693FF7D107FD425AF3935BC634E
AF8CFD396B68502A8E356306108B1DA94A02F61B2C3809F989DB0031B86F06BF
4BB8B7CD216D654AA370152E24C1AFEEEE3640BBBB391381ECC5B549E3914DFC
DEF58418D47B553CD52C69C4906A42767401CDE9B2A14A0E6192788F7B3FD7E8
482CCE0F08E70D9599254F9280FC57C98C01F268F8043B6E0DA83152A4797242
896832957E4DF12E4DC55BE1ACDF8DF6EF815D9837ED0AFD468D1526B333AB06
65E15007F5CECF9527FE1A40CA630D3D2E7100E9B1E8AA508E088404347FB02B
F8F8346AF0BDE97A42F45CBAC66D27AC2EE14B2DE7D20B9CE96CCFAC2C09F78E
349CF0BB5B33C7606B0081ACEB543744EC3D8B07009857FE07B12514FE55D808
CFAF12D40534BBECAF66F3079D5A84A53FE48891DBC49212CBE7F8742054D2D5
96A7A714D1782422C52798897F06911247DFDFEB4D1A0B4DB0E92E3FF383B465
5BE0ADF0BC638197FA305F3B759D937592753B2E229A808B3EEB28C341E46884
CD94C6C1731C89A140411880B87F531FFF3063389B0239C4F4B507ABF1F6C1D4
FB14C111027F6E61D6616DAF1ADC13E2DF7449DC24AEB1B0036430D131CB0FB2
6F6BF341D630ACAFE5591ADCE58C00FA35ADEE5CEDC800E9AA7D9D25DA876E35
F7AB7EB604CCCB67FECC2A58FF1330027D00F1F664415F190F62E3A20A1012F1
4A8FBC4394E4A1483386C39B81B285C05BE1D60E6FA08E649EF52616F1D45745
A471FE8D060D439D238CCE4E64B93B4E07707DAAD151065CDD03C9D5A9C20154
242A9B598268F20AE81955C090ABEB18BE22796A88B03AD4CA5BC897AC62EC0B
CF786DA9D1454534772021C582E0B53776680C79802B01B2976525D32161F457
5029B13F6E6DB055D922AE46F1093001384407603943A036885C037ED1253133
46B3948ABBB2A5E8A6214166D00B4255A3A2AB145D325B8F658357A65C96F8F0
E5BBDE578E87EF91DA339A9DE56E5A3BA77C18DE0DD56BA6B766EEF1BED371EE
8BBEE0524CEEB37E8876A5798C6352C9D50C7831BC6E27020D08EE7B4CE1D070
D4A9A0BBFAEAF16D580AA7966969885FD82B77EAF01BEEE2BA4120FE29B5F78E
504CB774D742018123DA761D506321F1767088E1FD89E3AFF2EB0011152CE14A
4FCF642993064F6C3A19EE8D738017F6462F4652283DE8A9A1BDC228C7DE9BCA
13539FF8A8D202EBB9821B7481D727F74F69092F1767962A495852A5D69DD04B
84F7F2E7B8AA2A41AF653AB36D2AAF872098BF697DA70132042DF88A0C528BD9
D0F55C919F2AC39D686ACC3BEB6446EB098617E064A4D33525030C23D7FFA210
881115883E8A3E40223446627AE9FB7EF97740925D8210C84CA34092D031D52E
8F47F15818C8D5310CA9BFC908A2BAC4B399B0CB67D7224052BC6A016BD10BBE
F2628247D10087278666AAA539D6FBA773008355FC2C1D8E4D4AFC7F3C07DB6F
92B142B68E1DDCBE3D8E6A72E10A4DFF96628C66CE1362EE2D81084F42D9EFC2
C22DAC0DE78A6EE3E3A683D8EA215E1BAAC68B1055C12E1480659E12A12BCA9D
C5A4527C4BA6EDD6EF2045E77E05C1FDF0093AA71D794C82F37AD508A2F44F41
B24AB2BA31A08B88690D43CB948E62EA0F009A59EF14036C1E04DDC3786AE33B
2BDC78035B03ACFF4E7CBF7B1FB7F0EBAB391431DD819E46318D71E606565B24
8EC48675128AC3326977CF19ED3536896B443AEC90BD6A489FED1B482224AE0A
2E9253BBEDBCF08338889E5A83548DFA0BAAB4E87B1B89695E13A52197BBF6D3
2DA82E871400D236CA725C1979E1381E83BACD34F7BDC91635716AE4C6B081E4
CA29D22C89A71EE2BFA87432FD508B4E0C12C171908599B9ED90326EA49CE0E9
1114F0729CBE44DA12318439734E691BC16C50359CAF2B96D48C11292BCD3F34
FA44416B5A47804F848519F15CBF82685C9F24311380A08AAEB1CF70FE1ACAAA
A7380D92D7D9B939EF46045A9A14E106901BACC8919C0682CF09A9AEDE56E1C4
14478E9BE88EAAB0EB266FD5D2029F85BEBE08D79F2671B5216884744E3F6F86
DE3C5D95C9A06DDDAFFAE11F23CC607E1DD2C3FAFA2303498FA2ED8D03D70D33
ECB2BF25C10D11EBC3EBF69242104720773A8D4D63C44C1994D2569817A57895
6B77DF7CB5A078BB622D92DA5D3AE03BFF8EBF2D7678D5AB95E28784822D4BED
2ECCFE8E24C2DBA518B058EE2AF793F30572038524C46479DB73768DB27A8B17
C8DF7C90E39A3B4CCBAD62A52B28503EEDDAF7ABAB635CBE2673F334C42AB27F
7AFC5E9BBF6196A2B0A0D682665291AB9A865D57478C55D6E68104F54DC7AE73
C7CD88106A2E583C0992F3B09962A1BC99D2C76B98F966F02866F47C44CB2F50
970307CB7E5DE9B276DB5AE562C1234D7910EE88462E96C1DC8F105A987BF5FE
332288EE844BAD42270766CE6577D1CF93789137D41D70E918997EABD8BE7A88
0ED4F117F45E60B6CD066A5D0B1B06ADE232228BC358664824C0D780908DCC4E
5F4C76D7BA429D2871B61BDE9C8E3505177E9F14966B91C0E09EB8C411F2F5A3
21F25A86392372B3D1D53A3CE44FE96DD10A0A37939F84B98320FB722933391B
EF1EC7CD8A25189B1A275DA9016BBC314F081ED206B5A38FB34F752A0D685BCE
51684344BE7152B022572B688133F3F000E8DA2D0BFAF96ED81DC37B9C4604AC
266832F2A13B0E094A9D2C751A1777EAB30157BB83A99ABEB011A6C258C44DCA
B98DCA4E6A8892F4D8EB48F7AC5001B62061D61BD019F0D83BD8D35AABFADB9B
BE0F208CB9379D72BE6F2300B6BD26EF0B7911A144452D42EFAAACDBFDB72841
1B1298261F516C995012DE09AE78EA73970CBC722C37E786B7B77A910019DF29
9A503F78BCF285EEB3732DF3C35AFB3A1DF0B82BBD7811B86DF9A7F9588003F2
96EB7A6B510A0512A59578267FC44B28FBC0CC1CB2AEAEA2EFE67D88598D8408
D11904245A30DCECD9BB0414355BB083D486656966208B225689AEA9B70B408A
74C85B55382711FB65E53C6B3448C09D28515A5522BC5CADD3C5D6CF5846F442
DFAB9856532243D1B8BB577A78A22A63394EBFC80CEC0A333C1370E11C4F50D4
04560878F9756ADF11B04B5C58F7F5765E90EA49ACC62F58F17E218D6A1422F7
1CA13A2C349E5CFE76C03D8B90327D36C8A228FFD94681840A121729DF790030
7014B9093FC79D02766DC2988342C45575DD0C997763327B7F94F8ADDB21F00C
F33F25FA6614767CC62212530238CE3FD626CC47D247CCC32B5CE9B04D14FAF0
D90A9D3D91DFAFF5CB4601BCFB0257E3FE8A62E433D54022D52F378B0CD15B91
A6C72F31CDE1EEF76C8FC487DB709710F3600A53436F9D2545F729D070F48226
E5B79BF0DDBBC6B8AC439B96384090C65C9B09A7E001808A87C3E07DBD9C4DA4
F7BD490EE9DC0EFF374556E3EE3BC07DF2BB91C311AB0772E25AE272C7A960A0
E2931EE233475F1ED5AD64E97EC8CB29E68126CB1751E6F6F923680D1EDB67C0
60206BAA0A754521489724D169182934B3CFB1CCED268928843422C51FC18049
FBB59A834F89B278EB8C6979FB21B6F72A568451792D7F98364D619E55D36AB2
75299D5D1548BF70765214C319F6259A4C583EC65821E11B0F3C4A5DD8B5907A
BDC01CD9AF1ADEE05F67C1CF8ECE90CC47E07EF3390DEA9CE13769B2844542D0
6FC5C01EF39A5089D9F80001EB619D4E59F5D9076B1015EAA6C8A573C3D6DF55
AA287F315CAB3DA3FB389FEDA470C77FFE9CE9E9E09D7CF6DD45192995378E55
BC1521C80DBCD6F0DCFB67AAF9B2EF358B82E8F9DD3DF5D3AE974BCB704F944E
AC79B2745F15A0123907EB3C019BB4AA0CBB8C2DADC8A5A256B371365B8C8D68
B2F05A86C459F07DD36A0A3FA38BC7A6C9F63592C6DBD86DE7CB264C65770F41
F19C9DAD2F65B95391AF39F4C250B61E8F42F698B9852CDA5C1F0113C35CF7C0
50626A9788327FB46FFBA9DF716BC9BCCB27C238440275EF0FF71F765E733CFC
6DA9EFB6E3410F118B842E7B0207569EA42E4A6AF7FB5F1B8D01245DD9D1F597
BFE30334ACA8D3D41CBED3B1AAE99DDFFA8AEC7DEEBE820C02ED2F3E7F275FD1
7FAC5E0EC42FA7DDFEAE861402E217CDA515626099F056383C4D87F7A9917295
89600841A61F2D0E847C996DA40E9BDAA856CE2BC14B26FF7EDD73BB303F53BE
55E36C3E62376FAAA46C0E5E3C02FCA220069FB614956B8A8DBD7E0483C3CCF2
5CDDD1F3DAD2965DECBD7C08E1125C289CC5F45ED1D7D21BF1BB245397522725
5CEDFF39FA98C4E1D4C8C482814985C5C13AB3B710031BCA12D5E893E397FABE
5FFA401A01587A11CC6D1A5179660A21D915A74B0ECE9935827BB50A53FC299C
ADEA3D3E57EE5438D07F7EF0B5361A19513A62E870B40806C8FE8DCD943D1602
8F8B82617D27D97359B35B45D99DF29DABAD973E3D86D6B10EA6D7388ED0F853
7E6D12F55BD4BB8C02A9C9D46E49C841EC0BEFC6121C0A6AAE01D0EAB08BE557
392C9C6BA1E8A013C2D4BCE22BE5447BF702F0BB005A5B25A4ECF655093060E5
FC8D976B3DE6153035B89C06DE301C7BDB2DA4642F61B509E696C86796232FD9
DD0F76156DCFDAFA8FE67BD282CE02BB5C85DE6589B60227C906ECBB354E5B8A
E4740D19D804B1E9A7E8AB888A2C48C9A39EDD9E0B958CDFAA493EFD74F76791
E1FDC197A7D374C8F36D504E5B69E3C866CE06E2E728ABAAF341C690707CB849
95EC66DC16C8FD2C44AC11FFB151F666F89541A5041FD082CAFC7911785A58D1
5FAD3FEADBE50D2C43555C1265E6A88F93ADE3BCAB1845B240C9CE922D6FB6B6
BC51E0B3AA7AC602D160F87DAFFD71FC9646EA4D43F9598D6FF630D2B76D355A
30E1BEBEABCC809C5E1983031368CF1ECAEE19FAA1A711E712FB9CAEAB2F76C7
B14B5D9CDF7DA58CF4425B966AC9754C3E7304C1D3563C3559392A6DFA014CBF
5751258426D1490F705AB289C396DCB60D8C4AB9EF98B87601C454E0B8AA5B92
99039045E422A6D1F01A10D8CB859D6C6E135A54616B747656B7248754148ED2
2619BDF8580CBA8ACD7765D679A0F5CEEA5C75B79621EC786D000A57815F886D
54BD34D01057D949D4DF6CC802752B205B26783068C228C79F083E5824CD4F71
17260791E1B427B61F5518B3E911CA11CE4216B4C322D56B596B79F6ADAD2C0A
DBAE8F002FE772F6D3EC92EA2199EF6A412545DF6938C250C555C8A1EEF5E23C
F3CC903EA4226EA03EB23E9B418A2F55AB0EFF90F85DA7A9213D557ED2F6F284
CB634C955895689D1E8A8568FF2A5C81DBDE56D832A68C88DD61CC27FAF636B0
DB572F5999745B0DEA1AB2955A11708050309CBDAF7C116F295549265DDAA5AD
9F825C61E4046DF07665CF40191D3EFB8AEC722F623ACD0FE65731CE856F2F47
DC5F52C604EDAF527DC9752BB7332F61FE2142E5612666FE7052441A63EEB1B1
81907BC2FD9ABCD6B2E7C565BA58EF0258C2CBB53C90C7507B2925F5770AFF22
1067797FBCEF199442492BAFB54F1317BB7B4196CD37897262E9D77840375B60
9D4E9438C2D541657DC3D6140745356E034CBB75E34942D8C70F4AC10BF1EF1E
FDA7B96E8C2ED837A27711453DC1CC6FE3364F9F76CA61489E43C1F1F47B847D
3A7E4D6DD8929A6728F4A5B756CAAFB7A672CA0361CAC38715531688F61E2696
41435B8B7AF843F48A341BE43F9A2CC69191AFD66E708E9442557249C55D87DE
F28694CDA990B59D479461E1F6A3D2837288757768A250B6E6EB04342E8AD958
1E3271A2154CACED2E36C18ED3185D3F2F3F5A9CBE19456B2209BCBD730E81DA
959E38B8B1F951030BA853CED6223B44F2E4578BE6B7FB28996EA0F327B2585C
444ED47FE39081F87EC9E3FD44338A874859ACE303D84EDEF379EBB012DA7A8A
A4B95B99E986A628A7465F5E4D85038BC725620B4FD1708D03C93C4CC1702AF2
33F8B0790770EF351CADAA885E1AAAC426B7F9E87C10DEF376B7E2482456A703
5C099B4F0B2E9AFC93FD0E5EBDB744F1C9C22BD77FF613D6D7298601DBC3C5A6
19DA3B511333F39E1B0946AC4D4307CA96E098471A47F51E03ECBF5F207AE076
0407326032BEF1EFDF018D843F1F23418BD72FCC07C8EDF922D7F44FA66120E8
23D6EEC5EC5A1676DEA58179F0F24D5BBC261BD814F53D7D52AB95D11B22CDD9
D2DE249C41CCD045B437E866C524BC453D3F16B3ABC0123AED3972F24149D3DE
41F18C7B6C47F33C911F01F5BD7F21AFD46424CE2556160CC255787FAB64DBB4
2F28210E209E70D26CC657D9A53837CF42F98ECCE68FC73A2CC8960A658D461E
862330FFC250A5E51D730DF64824254E2C4491B14B9604339D7545D6117C9562
FB73CDEE4CC45BE4C13B99AA2EECA7AF03B7F6DD3FE3C5BB14B35DE7589A81A9
660680670EB14C02E571524922BC5B3C3DFF54043B5F26F0C0BA0B0F505A5E3D
EF579B5E64B57BB5AEEA7C6A5E26CCA67D4396D88E01171E8646EA1A74F4E165
BDB39543C66A4E8D949FEF2B05B3CA5B3F3498ECCDCB076A6ADFB1B1BBF9914A
21B11C24E48F964F8140DBD0F8898A71AAA0603ECC76734AE30C9A5B15AA0351
3681D764287D84AAFEF3E509457C7A828CD8EF199BE7D8584E706FF7227C01A1
38473CD0EFB056C73CAA1EDC05A3A72AC01414092685DF67DEBCE74BF62153D4
968933EB8AD20F3A79B97DEC58EE0888E7CE168C0B187BAF00CEA5F4D493EDA3
D40FB8A1E4D2DED75C11BCA711C41B674D00248E1FDE02CF8F549D57FDCD95FD
9C40B589B6780FA394018942A23A90C353B3724B2493FC507751AAD2830F5EC8
2E498B734D6BF3F1E5738FC9A3992FCABB2BB438A07F5A11D365CB3230866ABB
B8E6BA72FF3DEA762FFA03979F2DB18557452939E10DF81E93E0D15CE14E0861
B601625D1356F3A1803357D211970AA292701B258A2E294EAC3D5A54D5847A96
70E1B0E1FA8F41785F386E3782932F063D498C1A165D40C2A658A16C92909C32
EB786EE5E0424B08E652B80AEB7C01EFA26309D72F65CFE7653E3AA7821D867E
A47B45960302EA00DF0320EFA5D5B49C76E86C8840AB575327B995283E814103
64E140CF106F6333CA58A8BD9969F3C9031715135A2671EEFBC3EA2D79B7AD97
9AAEC4FB7D562E7B7DDEB21932161B02024129281982302D4755359572BC7327
DC38C249EB12F11208F6F24A8F37F09083C2B38C0A82329E0A9CD52075DA0763
B8D672538E50BCF13B75DA37AFBAC24D5DDDD7E43D79FCDB2BC5F43DC0D7186C
53D466ACDC8928C6B3EFE144761C9DF1A4758E7FEB5217177303F5A3D5506BCA
7BD8BC1980AAB48C544DCFBAA102708EFF491AB914BFB8395457C957370BA720
9E869D6085C2E517A97905F3DDF003098FD7FF6B43BADA06ED946C83ACFD5AD2
6328CABB48D49CF11ED0DF7A489B355F1D78FD88E69EBBA348B91F004C181E1D
E9CAA7E0EE6348D5AC508325CE9CBA2FCADFF0A21711BB38A7D50DF9E793283C
E54BB24D43CF7219D4F997C915EE771911E10D8ACFF1775CE105A4D15C8BBE0D
6B854D85E1C26A51E4CBF73F6D9903F320A1EAD1A494F5129F5A91EA0149CC72
DC76C8408320DF71BF49CF06447BDDF2A851EA6C012E3E3CCD36A9FBBB01AA1D
F464F3684C11DCEDCD4856E14FC18ADDE0CFE6F97CF8D7F3E36B58791853EB95
91E3B83A529D2BA62EDA5553BCEC633EF37F683242475833971188C9CBB8CF47
52F318FDFA4959816F6A36F5C7793A031BAC93FEB56B473CC028B8ECB8B67FA0
ED5FC7D5EC07E6989AFFA6D382E4EBA934D35EF0248675AF7522685C72F88696
6601C53826AE89405643A1DA5205EA25D6ABB76D86DABB351183110285725C43
24E2D31B32A10E6FABF13525F16668ACC11E08A50E87F2432F492A244CD261E6
14D2BA07D2626CE8D4E7D855BD188E416A55EF93798F648C0E7B30509C29E3FE
733E385D75BF7ACDA7F98089964143F3853043C087ED122A1ACDB77BFA7E1987
883DD4E2D62A5F6CC9B66F35F9E66EAF574558DDA9272734A4E117F1B175186E
FF88164CFBECDE21D83AE82FAEE5AF658F087E3165C2908F9E445DDD6B859612
973DC4FC634042A897166E1E7DDACEC836BA2AC7259C123BC46BE4613DECAC77
4AD2E627ABDA9AFB50FE179E74DC1428DB7605BB5CA165DBDB0D2052054DF810
789A3EA7EC7A8317A1ED1AB5D26488DB4D35B6935D9CEA7BFBE557FBCEAD41B6
9C798AC17A28071646FBAC710CE2961435BA6A90387BC0CF979F1AC5E996DF08
9AE0D072DB7059A54DFAC561BECA2C1629BE2D647A79F68449B392C6613FA7F1
764E7D7CA50BCC70E7F07A904AA788FEE4BC61E9B3E6256ACBD28CE06BFBA36E
3FC55D762B3A86D9A508885C93FD5E8DC27A83367B0C60FFA7FD8C505124D576
DF942EACED6E04D64E400B0C4AF2DB4062EDC35EF0A00745D8986ABF612CBF84
848A3B53D536E3FB3124FB45467FB0E4729A08C63FA76E09620BF53B9C4CF81F
151888B2181113909EB66DECB8A144A1DF245CD3760B31870D69C4C1E589717D
A9C048A4F0F6DAE25569FC592D6FE4208BA8BB290023BFED30A54746B72DD4A3
EFADFE0771979D269935CCA1E94C7181453DD11A869667075C3DBF791F2566DA
81AC8F809DDD2FAE72E8FCA90846A3EB6ACAA30FA5D8527FF2EA0F2A8D258E81
7286EE54ED3170B74DB22B42867E4AB6950797DE698BDBAA08BFF5F98CE019B2
C9B9B268498555ADC5F9CDEA69AD52968E8F050BBD35C5B84703C2B7296ED283
C3BB35E572AA78724DBA6A3C250E0DF206BA733D9344C1195DB08E26490088C5
B72CDFD54D4900875A16AE24D1238C15FB4E17CCCEAF45E1ACB49768BD50BED5
6BE606F3B25B9ABCD1B817069FF2178130D54EB8FAB6078A0A1B85BC77DF20B1
8FF681199616F4EECCBB59F60057FCA0CC06B44FCAF4C5BAF5E9198F3432A1FE
36DDEEFA8DADCFFCD87BF4CE46A080CFA1384EA402B28948A926FB014A670DD5
6D08743A313A9B8E1ADA0EB1590C7A41A635EA60A77175B7F68C5BC2BE65D21E
9220D00CAF7B95820E67936263B74CF4666AF0B083CCFA61F3419BC35EBBCC5F
11E7B16011425BCDE2C9B8E5E65940B66782BA0C811BDB4F9BF8905382A96F3B
B33E419C518DC8ECEA7F8A181A80D55462C0A6962C593CF91E5B724DB0277C63
032ECF3EA6EFDCAAFBA8EEEDC1A3EADD0C36ABC4897855697CA52C5C0F197DC0
953C765B2740A3F6CA2B27951EE163BC01526E21D14B2F917DDF1923CBC1DE82
1C2A47AE7ADAD7CEB1A413039A66D469A8CA358AE5E488840C5C14662158DE7B
2235DB738B2882B13846230B5B0C244C341286A440AF57BEB63631A12E82F76A
DCD31847C726405383689412079EBFBE5139A826D6526CEF0BD669460823CA21
249EC2143498C583B317A36FA76DE41AFE8401ACE8512D41FB223EDBA9DB63CA
E626A61C9BDF207115E86FC849AEA30D6C829FA37C4EA9979A45B6A3CBC31EA6
12B805E8E68F28ED5C89C97FD2EC6F93C2823822D02621158133F661DE82D06E
7EFC5AA121AB17A6330681E6B82BC7CDFE018974A66C385AD7336848DD72419F
6FD431C32B3A138DF6556D6249B5BA6D4A4C9102AE91E080DE9DC495425E5EB1
D90FB154FF09A37D02EF64D97C3D03BF025622E4DFBCDCE2CFB9305A43D9CA42
16EF15A3A358FC5F2234367046F2D47AC9FF614FC0368346C0F1869625E409BF
CF837AE2D313BCDFB9219F795DB57B73C366CE6012031C781B501855A513A311
704A8541275F9A3C884524822243B430AD95388CC278A873E689E778E286B0E6
19B5F7CC0A9D0344614F422BCE8BD95BF4894D1B75803049BB9D8EBC26EAAB92
ACD1957609F05089C50D047977B1F321FEBAEE1F5EEF136DB4A65D63FD43AA99
CF8EC08CF47CDDF0A85CE2466F3ADCF3B574987F6B03B8C6E3A6C67CDFF21714
C8B393218D4C56E72EAF24C830DDEE938F2B84F5CA5A0AC6BD145765C1E713D9
1372CF13A7B6C6DEE0B4F135E868896FA169B57EAA4CB97156E3E2ECAD484490
95F2270BE4326D25E24990112CDED3C243B64F9CEA7AD47406A2889424B93F37
63C92FC77BDC75B6075923C423866C64B312B0911E60278AB43C7DF4D3F42BC9
C806D25D1BBC168433D299D66827B70ADA01D659C52B0DDC5D5F95B09D6BA406
14653CB24DFC931D8A5CCFBEB51C47A8B6B04A51F74CAB5DAACC3227315E849A
681AD93C98CECA754100D99EE86E8FB733C6656A555C3072DB332988BF6D915D
E782149E00AF6A64A5B80F8F29AAF30F3B845130F6DB63DD2D370A583A50C8D0
BA86484F9DA1B94E4213B7A4F7B122024C2CEA9C0B65385F584CA2ED8461A2A5
AB35FA4483E0694B8D49201AA07B1AA9FCAB486F0CB7F9B705AF5F04CF8722DF
56D5BE2DAA46E128AC6D32F3E1EBCB20976CB369909937D89305C1E33B432C5B
832499B7B53ABAA4C9CDC4177F834A756CC02D2844BFD2120855852C0B5A25F1
0BB616723F13C3DF84FB725BFB9CE4CCEA77EE8CC7D7E1AB454B72F498BECED8
215ECA7EA1EB0BB4C2E8688CBB09D3C16CD83F21CB43A351C9D9B82A7A8D492C
310C172E2DEFA1AF3928339BA46BA50B49E5B73D76E89B6BE076DE2E073C987B
2F86BC66AAC3EEFB5E5806943B8A5C5B99E7634F1B694368948BC74FB278BE49
3B34177BA6D45FF158DCA3BD3103B793F35AA392DF9FE3E0A112BC5B0DC4F121
0420BEAD07C6222DAE94F487B56A753F81C481D5FFF3285D45F9B02B16F0A3D5
EA7862BCA4C5F6B4031E4F585E70B3C300D574D485D8BF0D8B9ED7457BBF0B41
0176AE3CE268950D623B0FE37FCC4ED7079172C1FD15CB8D2480D638196FF47D
6227BFC844426E350ACDF510776D00AA1C5276C8DA5EC6B45BDD9EE3DAC559BB
539DAC2BB4D3541A3E70FBCC9C6DF59A01BA7C7AE87E5D8E886DDE9F0168378B
D5AB8F7FA04ED8EFB6F37734FA294D1D3A03E267FF76554D4731ED75B3A35B30
C2A0A2AE9322260E6B43055D8C612484D72DC6F67B59CC11AC6A84BD327150E6
36DA51052C3AD1029CB75D29C94B602C057A25E26C0A863518B261D2B91CF17D
AB21AEBCD4FC73FB66B48324B5C6B38287F801587836CFE57040B52A4FDF33B3
6E2AF66475E1F44693B713CDD6DEDC50F8DADE2F3599D029D32DF929E3AEC21A
7C0E256DF701824AC007D54A1FFFE9333827EC0868FA882D013BF7A014408DAC
EA54475D8A768ABA3ED418777B7C6BAD6C55772A0484D23A544CF9BBACA84C9D
7678C901BF616870C5EDA61C5CCB53C3B0955EF631AA987756C312106B7A37CD
5CCF5FD9C19954FC8733EDC6503A7909E106AA33D256E8293909815BAC198862
562970A45CBEE377D280FC37838D6794134590C9858DAC3CA6E3B83A079B46E6
776546F9BDA41B77AFF79A1F4B9FD3DBA03EF6E49ACEF0CE2BEF4676B17395CB
CF1637484CBBF5DB74740E39AED7B0E5A7CC7F25D684626051DC2EC058E8665F
ACE9C5C4D991C09F03EC39CA44D8EBDD9E3801A794C6932533C853A4F4B38205
9EDDB9F57161626721F9558A53D9C7FF9AD44FEE9E2A4B31B84E2AF425B91EF8
D5541482AA80854FFAA7D4467CD2E56BB5372171C6D3F1FF8E111D7C8D21C3D2
9E210F14F563B23D55DCE7B899645C2853757D77A518D23B63E45D1B76DEA581
7368FC895AD3F07A4ED8D3BB9DD7D6020455B85078EB6EE46C34775F18654EC2
8E38078863200CF8DBC9241CB214EA7C369DCB6057B4BE61321A26EE10A943E3
DF0A8C124A8A125AFAFD03406E156F655E24CFBA3C65737DAB36D1C305303C0A
1C2FA183CDF98769B440644A7AFD9D8285613FA776E5EBB75B26B98F2FD9F6F2
6F11E0CB30485C68197E493B6F7E7257C9FA86B973BADE4E320C2C9C3B9BC7EB
7E9BDF9F683D42DC6CD5233C1E2044CD62FCCAEE5A35466A50E3DCB2AFAB0DB2
D2A3B00DE08D3C34D06A478195735AC2B9F94BA742D69D38EBBDBFD97A15AEE0
F39F02C0F492112C69FE9047C862C0AF16982E3D2FB3A450414B0E4D5A7AE87E
4CAF4E05CABD395EC39A3ACE98BFB1510DD7F30F7CE55404013C9433E5B27344
09E39AF9F43D304B2FA1BC5FCA878364AD5AA9359B9D859E60C9534D804EDAFC
D1F484A610BBC9B5DA641B9FD709EC8B0DD90A8578E429299E9AF3BB36AB5857
CF21B6107AB0932E29D8885FD88FB16176FBC3EBE7309E5B48D7795AF8B5CA1E
46000874B26B1AE63A60FF813793B97A3B1660BDBD3DD66FF4BB6789CEB40FBA
8668550E02E2497E23A6ECCFD1BE6D32AA486F67E29B94B5844479D744C9ABFC
D095A1878476C2ECE8D0DF5DD4634ED3B99CC562ED9A1F5F574EE541599C8D37
D3407AB51BB894B6A6A1BF66DDBDFDBB1ABD0EA30CA8C01CF0F9D72B40567D6E
EE309F10894DB4C7E31E140D1F309617D9FD4EBF8C2A971FAFDE591E0C7B9357
099B60E7055397CAAB3807C8311B20A5442CCB3C62D8549C0E76AC8B4664301A
AB99D3D920916263955C33A271AD0BE8EDD6B58278E16694E340C2C2245564E2
B67CF152DB54DA492A363119FD8B11262BF900B5C149E620905AFEDBC1787E84
C921D18E4FC51FAC7BD45B72CF7C3E8222FE14DCF2FF9B14F153C091AEFF09BF
29AB2AC30DC53D8204CF691FB6AACE2236F1DD824AB0FDC03C336897A4129CF5
35DF52B199CA664B22771895670DF70ED41CFC30A0E1C64962820FAA50BF98E7
F709C1298D6186E30815D20B15CDB86D5111D3098D0AD68649894609F5C632F1
229DC4043BB10C20DE6680D2E75CA041DFDD02E52CCA56D664820751940DB258
16C640F72FB1E178D16C6D2C47362FCD554AA4C65A0749EED1CBB03365AD750B
DD855121C5438B254BA3A37798CCA4F7DCEC6DACA020A60AA455E97A60952218
26C9A130C621F42FDFAB8D02D710974F299982C11F5D9CA246000B28C9F2A089
3CA394727060866019B59CCD43FE6CF5BAA9BDF22855841B4B3F86FBC2D319FF
B28F128D53957137724A0F96AB1B292FE8266C8DB68E9967B2D2528FFC6C032C
D7A16D60053687F6C7734635912E3DF5F640ADC3BB708F2BD60483126E9F475B
E3379BEA8C36B67229E55CC6DB7175D7F6937B0E86CAEF12C59F26499A9FD83D
10F62AFF0F32C09A245D831328E911BB08F608305BE7A5361C1524F05E9A6EB9
8AB1BFFA6183F372D7C9FE0A24A06CE6E6F6531C083A33E0F5569D6BA44E22E9
D1F9B1FB1C03F864844095E9A3C71234558A8A14746E5AFA1320CC343C538177
ABE78BEE066C2B625A9FF3679C03B6B896EFC72742200EC2949058119928F347
EC8B71CE8B3222C089EBBB84BC086FAF7C89885C9F226899E1C38FD114882D03
6EF88C400BB7BECE24CD781688F1315FF8625ADC0F68C87E4216B52F4B0A1576
75D3D3D3A455DF560A7BC52FEF4DAB9A2FCCE3243B8C5E69782F3A279763E211
8D0691394969587E30828DEDA1B0548F4415CC9594AA7055F7FC00645F500CEE
B2686CA82208FF5CAF106F5E11BFD7C57D58A0D3619CB9963CC59FC7CB1BD0C4
73070B90E93002D9ACF888C9AB0DBF20D42F66A35B95A02FD17C27183A9D686F
649063169BCB4109C4A32317DF27AAA385C2AE0F918F6B256EBC657DDD59E1C4
6B365D88FC565DF69F1A27F1C38FB831005BA67317DD36F330EF52948AC80D69
320C0FCEE538DD1464AC564A1F5B0BCF57E00B8CA52BCED83E255B5E95EF131F
756DAA481BB973D3DC5A18E85068683F77DFE7E5EB4BC3B42E81C418DB7E7E33
8F94A6F32ACD19E694346D36F23567ED6220762C0D190FEBCDA9D9D778220911
21339968BF290BCF896842095BC3519DF7626208FBC1693B029C33AB3BD8BF62
CC5F6D4D47CDF84A29A36EA668BB7EA10A9BF75B0CF5DD65978ABC0F820723BB
A5946B569D4B3FFE1192B29F39875863727A25F865038C0C00D6A3927D608C10
47426758B49C4B75E9708DD07F61715C54FA2303AE11C29786100EEFCBB2F6FE
1C735A510290B63FDBE672C259A530807EA6F8E370F547AFD5EC475DB500FC2A
A1547C76BE89A4097246FCE7662217DB7338985D624E9E2B48B2D6FC87AFBDDA
686AF7B6B1B97D42D168ABA0DE1F173F012BEACD54178CB3AF8EB410623D74BC
5A81E4AB5636F7C07061A0F7C012C5AC4FCBB6B71E237E92E4B50C86B218E63E
B318D37173B133DECCCDE2C65525E3972E42D080619C0A4EBACC3067F0618AFC
9841809A7E7984305EE527946D5362793A537C03FC47D585273CF9154DBFB5B6
6FC6EAF6D2DE5916555D7B6EC2290AFF4835BC321D4BD6CF085A8E2E437D0AB0
BC7C13007C428CED54BFFD52BFDC9EE0C7DCE491F642C802FEDA28ACEB044838
E892556943EF4AEB61319231F63399A6032911AD00BF4E51F84AC40F570C6EB4
68F2E7E0435C28F194060290DB80680A8531BF1752320C178DA28325D86C9DF6
881F745EC712986B21A97014B2F8A25EB39839429C43065ED90307090D1B16B6
2E1BC00D4ACA00E09391E6DA27E12CF38418036AA216816DFF252BE0F33F66D7
5C589496A5FEC09E32B53A017D19BB36023E4BE688674155664550D5FDE5F1BD
104FE5B9FA277E721C558A1BFF2512C96030C98461F7B28C0CFF3F60D15B1C0D
A73836F4F70EC50FEF320CF184A09C94CECBCB17DB9BA533B1994C1453E86395
4B7A73B9B8E6FDE280B52B07120AD0CBFC75711E8C00C83387852518496CD9A9
64205E9166CCE5C67A1D6BA79687A5EBD8DC746C9CA4056EFEC6FC799CE85732
06624196032D3AC50DCFC44CC8C2F76835F0640E6CC2CE928FB501B14DC6429E
043F307713D3AAE275912842923593F16CD0FA83FD1CD0A8437F5A87A0C39639
A53F827F562678D6295D09A7CCBD6BD76BA0134843FAF58930A9310621B69099
ECA02B9A3EE53C2AC39A2B1E934560D11C0DB46B3F20E5C12292A7B861C14F9E
3077D7F614DC693D2409A56E9A9160098D44C4549C9779D4A4F36ACE3F00C0AA
64BBF32F8B5BD9AC8EFD6ECB5140D07D1605450BE6F5B705D75A2C45C04F3DBC
BFE34C7932E9F26E420BE1E95D224556E7BB8192E97079CAECDF4BDF5B42B71E
EDD7C22B6BCDB53F5989AD81D00195722D279E18572F0CB6E6F468A9702834AD
3858E940EC3EBB1E4EFC65AF9D7357175E0252480BF78212EA31F4758DEE0BFE
145725448E4746899AD8258126FAA6FA9444C1DF1F4776C3891CF3422DCFAB66
2E95875CCDEBE3C4914E46FF88C245D90EBEE82D8FF42C98957C5308F7D0AA06
E276212F42217AD2ABB88C1D1679609DA4872A774D273A8AFFF0F2815CDCA2E0
B5575F5FB13461FB429FF3146E6B484D41A6B0B56D13255F200071FECAB471C9
41AF0B0F51E638A19DB5150AF4172F9604DA2231D1836BCFFA6DEDE03106FD85
00EE07F430016ED9613AE30C8056B4566381F985449F66310CB905FEA419215D
A0AFF1BC6B46FF46C7427556C14D437F67C70C88289998AF834BEBD007D80E19
29E64E8C636A0B5771198A4B142F4713F4480D37CB9FF291E25DAF2CCBC5045C
06AF62A6D3DF4557DC30B5AB1E7AD1799E96A77B6787EA1350C84F0ADD01864F
32283772B75513985DBA5735598A51B9F694BA4A86AF8B3CD5B31B898F7F8D0D
D9A976D7A6F12E283378AFA1055F5BC43429661AAB22F68D42B7AB35C3DD54A2
5096E033F380FF36FDFF5F9C602EB47FDA057D0790AEA3D2460B0E22B7D330F5
2AC98611B780A468CC00853C0E1CF59AE3505BF680E083769518DD6EADF94702
EC617B07BE659ADE934EB96A4CD1BEDDF34FB1A858D925E05750C14C2CAF682A
9331263E86B7CB136BCDFB9BB10016803CB9E9A29B2E1208B1C760171CE55D45
A05E8ED36CE2391CDCC928FF91625A811C33A9653FE3DDDE74726634C2141DEC
F2E53A72ED9DA127FC416C9213903F92671FBE82108938833BDE77EC6FD6D1D8
A7FD6DBF03F819C18053C7A2D9EF4FCC1412F820A362010704F331D347988266
8BFB8FFC6BB2B30DEB051B825A934471AC9FD51204635ED9DFC65B64BAC72A56
02969AAB5FA87F5D12836BA0B2E4E9E5A5D5FBEC5B7F4C7EF6B6BE9FFBA366C6
0FBA208CD1B3A184705319E3D1580CA5966477979E63A1388E8E1A7DBFB34E9B
5E90AD6C3F34158F54BE84C36276EADE4B2D98F8A4FBFACA22E7E2743F6079DE
ABDF6ECDF70137487886D50533210081CB67ECF8827034007C40D3738DAA562B
807C517A776CA4A5CADB02CD59C596A3ACE9F83457A2513C7404D3D306D0520F
9603B9094AB2750536978E91C821AA080EF61D4D68A5759A2DE48DE172A042D4
1844E7159E7C9468CBE109E7F6349E98940D22404EA46030D729C4DCF2E92BD2
4C7DE52200FF4F7EBF529C10AE122EB428DCFD376960E9A6D88A8FE8A2A4BFFD
FB66898247EA3D0B248FC33D7EC5D4BC964284D47A6C9242182BE4602007EAAB
569F3F65EFA7F96617F27572BEA81B0938DF25366168CCB6A4E938FF90A3FFDF
F6456323DC05A25AD64E11E9981557663EE72C0455AF2BF6496B5DDB3A1C5663
0CDCB8CDBC47058A2CAE31A548F5271067C1B534B9B5A16E5BF83F4CBD10C0B3
251D6E91DF84BF5A912246956A3208C82CD83ADD0A217F2FB989FFAAF363FBCD
164F6DB8F7F4C55C341372F28DFB75CD20697E998DAFD1E9FEADBED1F2F81D6C
FD1F9E621AA238AA37A12D1DCA8E8DDBD3C479E052C2409A8676469E4D946951
097451BF0CD283685FCF099DB2F82BED0507F112919B39F07BEDAB37FF2C129B
68F83C33713B73A82DDD55DC54005AE30977F4E57971938583AB38C293041C6B
F0D15CEBFD994DD813734EF8A317E032B2B52F6FA74991AB17C89323F4015715
44CE7170E780A8B6FB18BE412BA03A6E3EA8F18EC6AC82DFC40DD79E088DFEC2
DD2B4619E79095B13319838490BCF3A9F0B36475A54ACB0A4E2059DCB2B0BD7F
85C1AF35C527228ABC0744DE5188FB58734A2A65658A8E39B6EA74BDFCDE61E6
D9566BAE2460B471D2DF40B3C57FDE1C2D7D5A4115EB64D775198719E3D77244
ABE647E0EA5D971133E35CD000503204D307806311FABC43B7E46F5632870CC7
197A72BA5C69CCE167A2D7851DC6795190CB29F09C8E23A7E62DB36059A37ECD
2F27DB25059EC35286E50B30FDC1C4471049843806F11C60AE0644BED88CB0AB
633946C8E1C88FB67E54E366C7B2A34DC2FCE1B5D90EDCD6A6CB1C3D91929C09
E0EA89BE8097C67CBDD5F633C7064934FB530B874C2CB1977D52A1B5FE88A6F9
BC9EC48B4F00D7D87D1018C99888F58A5EB0E9E15556404974A41B0CD1FC51DE
707A9A155BF28ED81D4BD78449FDFB346A2CF0CFDBD54C39CB0057794488A042
CBEBFD76CAF90D6372CAAE16342E8C6236276C77A0825779082F753AA1D95D82
B1930BA82D734FD1A0579D4A3916664AC5B66E227322079117EDFF4933493881
DAD3168FD508E6693CC4DF5B8A0D6FFE3E2CE6396416022F98A6F5204E5C5A35
5C4179CAD15CD2F96F37706E7B6BD3C13EFACCD5A91D74883373821CE5799556
D38F67CA6A37908810D6328977B37BE8EDCDCCE331F723D52BAFA318474FD381
FEBDA832023B184206628F074F40854335445B7D005DF034AC27125BCE226808
6E7A413C8E266F3D8B104F635397796A81E291F48DD681B086D04B554F61332F
DDD2B0237A9285C460E3F9F0758B80CDBD9EA16EEAB57A09040191BDF2156A01
1E910469268CB1879FC3F88E9EF8B2DA3164F30CEDE2FF7D859A3FBECB1507F2
490EAF6000790C1C1D0ADC1A0C6C03A7EA2EEC827426ECF7C0D543393C4DB1DD
A7414B8C51ADA71B0EFD2EF2B92FF417F9011DB0DB3AFD188FFF8BC31383D5F5
7854EFB7520CF97D0ECC0C13D535C2A5C5101D6769068C677863304620F7ED58
A842FD0DE53F37E7AA444831668A803587067B05E3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MathDesign-GM-Regular-Symbol-10
%!PS-AdobeFont-1.0: MathDesign-GM-Regular-Symbol-10 2.0
%%CreationDate: Thu, 29 Aug 2013 17:18:57
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.0) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign GM Regular Symbol 10) readonly def
/FamilyName (MathDesign-GM) readonly def
/Weight (Regular) readonly def
/ItalicAngle 15 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-GM-Regular-Symbol-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 1 /periodcentered put
dup 2 /multiply put
dup 3 /asteriskmath put
dup 14 /openbullet put
dup 15 /bullet put
dup 17 /equivalence put
dup 20 /lessequal put
dup 21 /greaterequal put
dup 26 /propersubset put
dup 33 /arrowright put
dup 48 /prime put
dup 49 /infinity put
dup 50 /element put
dup 54 /negationslash put
dup 79 /Ocal put
dup 84 /Tcal put
dup 104 /angleleft put
dup 105 /angleright put
dup 106 /bar put
dup 107 /bardbl put
dup 110 /backslash put
dup 114 /gradient put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {-23 -1154 1249 947} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B1059A708DA99A5FEF54076E
8D9026757D0F7E793223AE39AF5DF960A53D81AAF2A83425A9F37BF896F83EFA
DF884EB3F5C6015EF02859B405F506AB15FC2282B07F490A4E029DBFCCE2ECB6
59E9B1D1AE61A08595E7004528E24024F1394DD1A7CB56FCB89325B9A85A2A25
10DF5C755A9FDBD98CCD7B3D9083F83D6F5311EF79AB13DBFFF65E2F0109E224
5CE1BD468C52EDA46FD15C6B121A2690406B952F9BD8F8838832AB8CCDFC9805
C556FB6B23273465D43834D2DFC85AF665C0FA0D69E48399C99776628B96CACF
AA27A61AC602F510B1D87352082E6DB56AE412FA9EF1191BE06236C75D96345D
BD6048FDA3BCE4EB632995A925B63D9B98CF9F7E86D7F0D53EB60678BD5A1F7C
FEC9923AF685B85C02D9D64344208444F95AD4E6B84EB6FC21E399D6E979E306
1D095F0DF25CD158E4B1F24A6FAA45E2099983B01F9704BD933C5C28CA8C3406
C28384EBE0A536D4ED4E8350431915FCD274075E816F416C62F185239358644F
D1A18143FCC5DCB965E4E3703D624FDCBCD3EA00A2D712933238F68F8EBB74A3
58AEA77E872E616D6CC55779A1112431C41FF1E95C909D707CF9F1EFCE84C952
60F3FA5F2150C851D053E588E7CF09B3764960F55FB27DE1A7747DB94E59ADD9
3DDFD189E6965D7C5393C70115FAE97A5289F9F0E6D3CA800754DC5685564681
F5AFCD7D0039D862308B7376F7A7C6F6FF275D09F9C7F7A03086298A8FD8096B
16EA3EA6FDD336088D07980BB85F2627FC9DD99EEC8C2E9FE745AEC19E85D58A
546234321980A39EB431AD0AD67421E014C4C319389C656ECFE0972BBCC0EC12
694D352E5AA7E2C577B2693D598D906A1C6ACA13E5B32FFE023E0F7DB735B9C8
95E9AACA3766430573474F04E6D4C8D3B63A58F1E8CBE38333BE3959067AFA7C
A93E4EAFD730980448861C388ADD4BDCA44451CE43444A3778178CD77A587B9E
9CD51F3660C9921C2267587B2AA2F542BD327D9EC4B765BD8CBD44EB852E251C
040CC46914D29D521EB894457AB6FEED1B5E2A499AEC831B2B40BDF5629CAA72
F38F1F42E5DB5AF73EB73A7B35FE72D8366C232E90BB0883A021B9E3E55B3A38
C7949188E888A08C2F15AD9AB1DA7507E341B430669F8630FB55701D9FFAB52D
19882571C73E206F54C89D42176DEA4E100EA4AE0D7A38C053F3483E6A2AC601
FADC24BCB6DE366F6E98D2232E19ED3CF54D7BACD7C9E79BE2F1792453408592
BDC4733A5700013124DBFD97B526A5D87111ABD79D6D4D1D2DD2A1D17635A5AD
9868AEA67CD458DF6ED9F8FA67C384C0889B365F22E9B0E14D998E67E51ABE87
B75E83A547547345C1FC12EBA0A9F08404A75D6427005C1F4EA0E002D8B94CDA
D209F920C24CE9042CD157440F41A604C6106D11AA209079408B890315BF8D74
251ABF854FFBB9D3BFA30692D30FFD39D0B1B9645A3C1FA41C1EDB5E51164EFB
E5AB87E927F4D8321331DA4AE86100FB7C21136AF0BE0684BDD3759472117F80
3624596C05EDD0BFD84351BC518B30DC55439F6514068CDADAE0084EE12BB7FF
D3DA3518749D80049DB67279036B72C900F6116549529544B2C2259B546DCB51
374F4B0DE9109342D3620F0336CB421D3BCD2509F1A431C049C2ABFAD1A9F64E
B332903FD3061824A08DDB9BD184956791C3A6F1368B33694EFBF04C38DCD90E
16A38CE3E0C3185751C5F5BDADE8C123D7FA8283D0CEAE5E48778B3B4AEFA336
265B777FC0F04D5BB33E7A7EBD60903AA3FED41BFE948CF4A5CB84337B398346
03C345B9A5B151B539B093D7FDEBDE48E97D1ACDB34B94BF4C9A73D84622F698
7B64DFAFFD4D032F71B179354C0ACC5256973E703DDBED7F10C7532592F7C15B
D1C45D2C572976C89F3ADAA896FA840421D4BE0C943DB1E07CE1F390BF1C455B
7DDC530F1FF1F032AB456B6C697EB5FC0D58EA82F7E95C0D2888ABCB0E00BD7A
D273C9B9F5AED9C5DEBEFF594F433C9FEFF7C9F4A8C057D1DBFD134FD2F50C58
8C4A541A79AB344653C1308B89DD9A3BDB7DDD6FAF0BAFE650691CBB3EE5038A
6483FDBECE1E15EF71B1A8659BEBB7EB739B9E621F00AF4AE0A71ECFEAFA124F
7F44DDB1BCAB0832EF073E35B8B38D3D5FFA1C45D24AD61C5A723FD0046703DF
5E7299C9B4282D62461BB4E7FB54B4F3CF976E95DBA107750BEF0297104E48FC
E1FB146848E7DC151131132D49CF9A84D58A8CE84941135314135C65AE0751A4
32B85911BC8AAC40671C7E1720B00A3548CB00C1EF4309F8533E92FD56B4248A
05A87774C7F19D9A0A17E6C9DC299800079696950D90073C9C3FABFB255333D9
EC5FF4606C7A7611C1CB836DD73FAB7CD01D3A43890F68FB7BB1B827B05E8122
5DD481D4B03DD1CB1FCEEEB32594BF0B4EA489487ED0E179D8C622788FEB43A7
284D7166F2031F7FF026AA2159F2A2EA4673E577996B8BAEB01F0F5826396D88
E8EC87D0F3180DF84CDDC3035719B6FBCAB35C8862E3A4CAB62A338AC54CA9DD
FA245F7F08D7DB2383C484F3394BF8354E858CE4363029963D2818F47D251CA1
637B635AE952267712EECB212B7B03E00CAD935320F972462CEB5647A0CF0F82
BB21EF932B82563BC11F89377F673C113EC27C0FD73CE3CFE2E469B4217528A9
CAE0C34EDA3D0842F2BAB196F18FC1C4F2BA4160F4326390171203E8207183D3
7E3D54588330C20047ADEF1148A94934AFCD407B00BBB89358ECDD22443468BA
06D6229094FFDC8E0A7C94BBACBEC6590551CF10386E194D33106EB6F571746D
EA1EBC457287C7B27B9DCF5920AC8EC0B7728D5EF9008F17C13FD40B2C78F14B
C4FEA08CEBF37FD55B6D20632B46F8D85A191A507E895BAE7F6336C0B6D85DB4
B37058227268D06BC2E2E1F9F49E63B09D860A9424598CA33368563DDDEF6224
51432CCF260E1CB00E55170AE1B2DF862877ED29A35A66B6862E5E45BBAFF63A
3CD4716C2BBA00F4C4CA6610BC69C6B8239965702BB9716A2AC19344B1FCDDB3
631290A567632EC123D265C0F6BF39F99FF41365031147CE792FCAAECF1B6029
4A1C509A5A29799B06EA546C9C8419481FA1F4696204BCA949714145FFAF40CC
18BD2756598AC29D0B130A969CE16247447ED28D801535BAFB83B361949CCB5F
C65B5DFFF9AEE4FE01705EA49A10927140B601BAC5835CCBD0B791BBB0C03ADE
7E1C7566CFCDCF0F0C5FCDFB6108C42E6D4338EE5895D84E423FE2B13C012FF1
C660E77D12BC6BE47F9A47082C53EB9A961E73AF24D0DF185494728A76D97FB5
D265BB1DE94641F325226AABFF196941119767AC39B07D69A35D870B9397E43D
D8F4A44C5B2EFD7E755B81A81258D0F347513AB20963C4710DC6D17C76F0C771
0A7EDFE9222DAA12ABFECD194153DEEF24B9AED0A64321BE28E9F35A2A13EEF8
79ABB8F0839B5CF29391DE45D5AA898BD9CC1B6B254B14CA9863CC7D1011302C
2985EF5706B5098536D74AB8038B97F5EFF2413D0237B06B9D24E93A52488BE5
113F045E75EF762DD25C103B44FABABE177C35EB6FA94D1780A1B460A4FBFBED
EB980095E207FABC236F9C8EC03E394AB1E01866DEE39BB6EE412F54DE75B34F
D8F15313D0AC7F3303476B36FBEADB0B0DA71274320ED29C6AC3BD453585C395
BEEFCDE5718D4E56AC9B81A2E34C76188CB0C25A3F7B6080FFD9801B486EF78F
F1637A997A70A39D1A345E0E1B6E419560722BC2895B3EB7146C6721AD6FEBE6
901E5110641DFEF2F15763A8C950082BAA95F6CADA653CEFEF2D43D96DC3C1B9
7073D16197BE77D2A126EA5ADDD9C4C79D22E8A997103AD8F399B4ED8728E0BB
38A5CE2A6B6E94650D2956BB6986FC13B0BBFF70DDF1BEB6E3968D20EE3B508F
3CDFE95FB752F3D54DA38EA5002C7FD41A76D1D41C27391399E209AF5272A46B
226E62D706844458D5FF9BB531C0A37994ABE9EEDBD17C203DCBDE3C316BDD47
A827F41FBA2FB66751413703B78A2CA59607B43E31F60610C3A7A0548D564C1E
ADCB680860A2376636FEDDD5655FBFC4E78F06355AAF115022163056B415FF17
626956AC565995F6FDA200C64B2DDA7A828D1EA16596BC7DA121B8C73AFB3797
0EB415B238A7F46315E1B62AB84A39B728FE03DA1B43C9F4A17D15400845E465
E0C3707A4B27753EFA3E251125385AF1647AAB9B64D058A43BB931EF0613B73F
9BD4C81A97F63B5DAB3DCBD9C14B6D4976FD7235B2D977F98F5DDD64F09BB20B
7D268041C6E7E95132BFE1CD76A5FD17393D49B8CEF0CBFE340F973C88C0D0CE
377CAD9D813DD40D042319F3BC6FE7E30A30E57C16F26255BB0F3D8646986D73
31839A5B3372B8F47C464DF121902887641614C5DABD438497E2E2800F4DD179
2F09C726338DCF072D2984D628B58113FE33558D8C2DE1CC84EEA24F77BB33FB
B2A2B42706A6CFDC0418751707DCD45F439E34AFD4ACA24A42D344A0A0DC7FC3
28AB5BCBC74E41E62E25B9FEC2DEB9862FBC2A12B3458D45683E2372D5EEBC48
A3FF5FEAF23BB641A3AC09B0666CC9E14120A291EE15F6CD56ADA42790E71F98
2FD30A6FED711B58E3FCF82F5C07C01A5BCEA444B4180D06D546A2C2152EC602
F66C5A568D050AD656E530DBA99336E587A83290664A7CEE4DFF112BAB6EB795

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MathDesign-GM-Regular-OT1-10
%!PS-AdobeFont-1.0: MathDesign-GM-Regular-OT1-10 2.0
%%CreationDate: Thu, 29 Aug 2013 17:18:58
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.0) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign GM Regular OT1 10) readonly def
/FamilyName (MathDesign-GM) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-GM-Regular-OT1-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 61 /equal put
dup 91 /bracketleft put
dup 93 /bracketright put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {-13 -491 945 789} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B1059A708DA99A5FEF54076E
8D9026757D0F7E793223AE39AF5DF960A53D81AAF2A83425A9F37BF896F83EFA
DF884EB3F5C6015EF02859B405F506AB15FC2282B07F490A4E029DBFCCE2ECB6
59E9B1D1AE61A08595E7004528E24024F1394DD1A7CB56FCB89325B9A85A2A25
10DF5C755A9FDBD98CCD7B3D9083F83D6F5311EF79AB13DBFFF65E2F0109E224
5CE1BD468C52EDA46FD15C6B121A2690406B952F9BD8F8838832AB8CCDFC9805
C556FB6B23273465D43834D2DFC85AF665C0FA0D69E48399C99776628B96CACF
AA27A61AC602F510B1D87352082E6DB56AE412FA9EF1191BE06236C75D96345D
BD6048FDA3BCE4EB632995A925B63D9B98CF9F7E86D7F0D53EB60678BD5A1F7C
FEC9923AF685B85C02D9D64344208444F95AD4E6B84EB6FC21E399D6E979E306
1D095F0DF25CD158E4B1F24A6FAA45E2099983B01F9704BD933C5C28CA8C3406
C28384EBE0A536D4ED4E8350431915FCD274075E816F416C62F185239358644F
D1A18143FCC5DCB965E4E3703D624FDCBCD3EA00A2D712933238F68F8EBB74A3
58AEA77E872E616D6CC55779A1112431C41FF1E95C909D707CF9F1EFCE84C952
60F3FA5F2150C851D053E588E7CF09B3764960F55FB27DE1A7747DB94E59ADD9
3DDFD189E6965D7C5393C70115FAE97A5289F9F0E6D3CA800754DC5685564681
F5AFCD7D0039D862308B7376F7A7C6F6FF275D09F9C7F7A03086298A8FD8096B
16EA3EA6FDD336088D07980BB85F2627FC9DD99EEC8C2E9FE745AEC19E85D58A
546234321980A39EB431AD0AD67421E014C4C319389C656ECFE0972BBCC0EC12
694D352E5AA7E2C577B2693D598D906A1C6ACA13E5B32FFE023E0F7DB735B9C8
95E9AACA3766430573474F04E6D4C8D3B63A58F1E8CBE38333BE3959067AFA7C
A93E4EAFD485D5469A45AA2C5EA9C22812F055B1D6E9C29C2E65C25AF6E8C1FA
3E30A7B443F7FF07021F46ECC0AA30CCC67D2C0C0CBCCB4E8949AA8C79FEE6AC
FF8567327FCE6E1CEF9FBED678FFE181B949B86A2F01EEEBE241E7C7DA1E413E
15122074EEB735CD1C98201F895AB968A18F830A83BDDEC09B80F36C49216B52
C1A6056ADAC115836A708F9701F205B9332C3D7D8838840DE0596977D734297F
0A5C9869B1583768198AF9E885D0B545483F58AB07FA017FDE3024117421D570
3DC870C86D31528D081CE2DBAA495BC50892154E45AD44EF7D94462E18102DA2
3FA6D170C0260185C7ECF3D64FD2472715DD88DACD77FB26B30ECC1CEE38094F
16E98BAAC89772FBFE656E2999F0C342B6EAC45E0B0BD073EF6FDA9008DFD7E8
6152E6D9276137DFBB149AE35A66E8A02A0CD6C31E4A7444E4B4D542E811AF81
AAF703C2D085D9E2AF22C6DC6396E0BF64664A08EB1D5730458138A98F943806
4838B0FCBAA4901C5F3DEB29284220791850EE329F6CA0F1A89D7F372AADADD4
5BB716D16367F25805D33D9555EF5F1A951A8EA0605C9B593B8AE1660E7E41D8
484BA658190A354DAC0D8433519180F09A0BBEE961C4D861A7FA006B1526BDC7
D8DAA2EA71006D67B29E4617C1B1FC9DFE4DCD3D045434BE57D96CE528D8A9C2
FF5D16590E8EDFA7C7C27760894D5594D04E323FE7732E2904F0A032B2178AD4
BB7F3D220442CC557EB04DF467902A2D40359160B9CD8171F04653C19E9885B4
3ADAA0C9ADB64F9CB32EA91176D5C3F070F0187E3CA83A2F4D0F09E0CFDBCE77
0BE83C9A1E979A214D2A714AE28E4257FCDE142E7856FB7004AB6374A300D52A
18B4DB9856464E2069E65809B7A1A5FF39FAB97C5ED01247FA1EC43E79BBAC79
EB8B26AC511E127BC4CD0A860DB9EF9F8AED95AC89EF24D0C0972F653B19976F
3ADBF3E254AECB13B7985AB04FC58BC690C7326D62A20456CC1FFDAE5A506651
F031858E30A07A288C11AF154C16DA8D0350
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: GaramondNo8-Ita
%!PS-AdobeFont-1.0: GaramondNo8-Ita 1.05
%%CreationDate: Mon Sep 6 2004
% Copyright (URW)++,Copyright 2000 by (URW)++ Design & Development
% (URW)++,Copyright 2000 by (URW)++ Design & Development
11 dict begin
/FontInfo 10 dict dup begin
/version (1.05a) readonly def
/Notice ((URW)++,Copyright 2000 by (URW)++ Design & Development) readonly def
/Copyright (Copyright (URW)++,Copyright 2000 by (URW)++ Design & Development) readonly def
/FullName (GaramondNo8 Italic) readonly def
/FamilyName (GaramondNo8) readonly def
/Weight (Regular) readonly def
/ItalicAngle -16.0 def
/isFixedPitch false def
/UnderlinePosition -225 def
/UnderlineThickness 51 def
end readonly def
/FontName /GaramondNo8-Ita def
/PaintType 0 def
/FontBBox {-196 -280 1095 957} readonly def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3EAB2EFE52DD460E8ED5A83492239F0D
D04F89D95390F982C681F5909C75F107B4DED4611EAD1BDA044AC281FF589B8B
D2AE9D863F9CCC7A6516E5F990D1C907CE7CCA910D92ED514B73BA6B0139D673
DDD56DF10AB58725C4CFE710E93D83B4F0EA8F595E2261E4284DF91200B68A7B
E203527549AB85729B08EC944742F7EC8B2B6523A7E7CD2F173F5F77CE3B2BE1
9F481211F6647A7CB2D4E7E1FC61EC80AB862627CB783D35F2E9F125909D4C0E
2E738DAB774077459BC46C34E965F38A9384C1E6213E30BFA2DABDAF214B7F70
94E86C8ED711EFF6B7A7B501EDED211E31FEC1524FF402261297D9D68EE6B3CC
38CD35C7B0206F04872D818F689032C53E3C128B7E49434ED5BEAD197ACF4FDF
FCA58D28B1AFC7A7C4C65FF068E6DD6A0D3543282D06C1DB35D2E79B0D30FBEE
D2D0AC62D083B91959F89864430B8A1F264474139D1F049FB68E54E10E9246D7
CF3ED9FAB306650613ECA4D01CEB48E781E81E1ED3C9792AC45F97DB62DBDE0E
4BC7A63808E9B664149583C0143DDBEA95ADA4896D32CF500D7F8C8D81EFC261
BA22C4AE953C5912E613E29BBC70BC7A3ED82F621C15B1C6FA91B292462445C0
0EA5CF5D910C88D25A5A5DA223D476C82AA62445A0FCC4C60069B3784AB29F35
001B60266E740C9F722BE4E0A3C24E6CE2B73674C5C11558FA3DAF30ECF822F8
075A7B2595AB791F06595E4A0F858260993DE7594183428A3701845C89202DE9
3E76BE9897A75DDC461B264799757A935B384A81AE05316BD91452F192B27922
BEC6F42727C29A6440448BC57244F32EFC7C3FABAC30245F2C47821D70F5A9FE
B7F73B8E00091EE5B002E0C3FF906290653FA8E8B231B8DA41F98BA3D70BB585
DC42A36040A63B7A995DCB3468BE04C187E69048EAAF62BA85A035DE620DF442
18F3E9B726364921C89201640DA4AF2BDF9338377D8295CDBC619ED245708A1B
D5A200D311ACBD8D1ADFD821E84706606D07384EA7D109FC9B0235928BC8EB4F
995A09C8124233288FF3508ABFBCB8B610B56645D94E6642DD04C8A37B94FB0D
F0D9E564C4CE9DF1787747DAA4EAD6D47F01B9D13B930E62909CED0EB1E305EA
C163090F37B4C257932BA4C9DB0F15778A38107C4E1B77F5441CDDF825606711
423149D9F31330EB41C1E8BB064779C78808FB3EFE2FC361E1EA45BFDCF591DB
0CEC691FA2A16D0B7A51C95BD71456BA08F7F03AB9A1FF56FD6EB985938BDEF8
4C44ED4CFFE889249FEA45C544DD086A8EB0B7EC4446210AA7A444428DD0DB06
2BB8A4E401214F1F3964D3ED3CF3824501D210BCBFEE6A59B9B30BECB842F88A
DDB11B86648B45B417DDB568E536EC77A07C4133FC2BA3AA6C50684EA6FB6E9C
3AA27A65AA1D73245306D0011CBC454270BE0140F630A0614C845F9DDF6E6A7F
317950E4CF98C7FD1C825E36AF2DB5A4B6AE61544EBBBF2A1D872A32C1D08ADA
E77DEBAB80846120CA17A47A94301CB4EFCCC7301B1B5518CC376A387D139B51
4B077E49CE6621D64A312F66885926A7632B8B4797AFF081CA64DDE218B924E3
8B51CDB6646CBCBC6AB44B240B0F141800E9ADB8BE5D338615D0F322F71C72FF
2D8C381B46948464D3312AFB918985A6BDEBDC2C7547249332D8E59C68058268
C06D4DC79BE0B9F8BAA949658CEAAC111FAF3B29F82B6EA28042EE34EA61838A
AA3CF0097A26C71C8124AC00EFA867B0A922D390E3042F03A7F6F958B74FCCC1
00BE4D602CC8AE995BE75799D9F103CAB41F0E6C48E1FD96248CFFE8339F51DF
B7A0D75B6570EF74C081AE322D017973B3B0C457345D1FB47A615F271C421692
87D991F83B9CE74AD419B077F15CC5161FB8C9699A2519D59B15C60EF5A3821E
48802F50EAC6B0C37A9417B8EC375C9DECB3581944CCCDAB835870230E9DA69A
BC008D04C83DDE30F01CD01310A369CC734124CA3176AB1479CE46FEFD2EB9C6
A3E0B2CB59E0B5860A6674522C415EC577C8C2F4ABE1BE8433E018A80F345A3C
C04D886FE80B830C711192B2E6431DD24BF9C91E8D758CB5E40FAD2BD064E125
2B0FF1B3FF67F4C95F914485B81EE909C1C6481AECC2106EE5BB6426A755DD95
DF8E950C47BD67CC8C0C17924E0C80EB35F2C0630BB8A5784518676FC316057B
F4E9BD067209850D6173357C4946320837A6F8F04442EF4CA73B1499B3951289
579C548D49AD3004BA89D16D4C23B4B18D8D9B9D2227C7964E513EC7A9654E8B
6B79FB409B633112856A1AA45C4CD8CF597FDD0272A815DCAF1C10B9C920560F
713E39BC155565DA6F8FE49BD41ED979314ADD0E55C4A15FC3CBB1E61418E247
2B75AEE2B04FFEE152B8F789FA9C084B760A2979BBD6460F39C18D328782715D
75668080E413A08E14C48004CEC93F33A4EC9EA1D6F40654460B4ED946963B6E
7F429765255E0FA56BA5DB6F43416FE307C63F7EE74C11C5A9C1CDE2B37C804F
50A50C63DED187A55E15E6BB75DC207B7AEFAF5381161659AC3BA063F62F60B1
9D89D9F437A17DC4BEA074C78B92C85737A2F4A862936FCC1AB6581C2553EA37
6ED56DF637E506D06C986AE02BF6BC9C1EFBBB97B92C6EE4D65187DA096589FE
1CEAA7ACCEE83F97D3A722E1DBFEBA1EE2E43BBB6020F93BFD6823F9CB2863C2
CC008B4ADB50EB9F023CBC26CD5A3A04F82AC871BB62AC5467CBAF92057BC238
2510DCB0F8AB4CB14661759C95DBD622F10450D6599AF701C0CCFC0FADFC71C5
F898C40855EA55C5478FBB721C2095CA9F17A2BE7E42E2314850D210B3A8696B
1CAD77A3AB32CE9C7F81A31033E62D7A8D23C21F91E0AA3A7E257890A6B6D9CD
BB19BB83A508F315733728654F1FA69BA83061616F0975B16DD82BB1CD3A0D84
229C222646D0EFF7343FB24003CF628EC96EA4CF4117D3C15F6B3AA309D9C79B
1293E3D093426D1B91093F9AC81C107EBF3D9A4DEFC8E6F2BD21EFDDC1C8E5A1
260E06EBAAA01087A1504A5BB67C32009C1BA68F23BC5D249C4E710B0E02A964
893A4F7E03F06BCB44892AFD59D0135EE29164A4FCCFC616BA9F1AA22C72F4EE
0D9C66024234107E25C31677E08E5DCD4990520FEBE076B8FA2B431A1EC45AFD
346545AD999E3E6C3FA92BD43CFFF6D023F99C3C052CA1F6A18D7C624DD4E719
95EEF85AB528E8CDA0F336FA419720C4871384F13CDA0B61E006AFAE6B9E1AFF
44AE11CEF59DA57A6D8F10A45FDA84F2E796935DD1741B08DF79088E552B902E
1F966AF6EAA7BECF366536452588BF17DCD7CC092CAA68EC3C5832338A0B815A
D631971EC182E6F85DB3391D2CE4DE2827170B56B07DDF69CA5B2EC0981E526F
1D803C9340D94A99AC33510D419E477E7FC5E69A21EA8FAEEAB5E7451785CF08
52330981646E985FA7F8BAF63844078AEB61E01055BD3CFC63A3903870ABF407
DF8138F91FECC9351B42923ECA2AD91E59A1164CF197CECA72482E959DD0784E
FA1A9BD09A339EB0352B9C0FB8FF430A2282A489825D3032D6B33D84FFAD9364
EA2E5E5DBD3597AA98090A1D330CC17024A7353537E82970FC0EC032236AD72D
D5300E3887F5F1613F5F05DAB3B74D88D4779DF1D884B3EAD113F84EFBF1D0D6
79917CD3F6D6F530A07650344DAF4529C4176DBE3788F4798C984DEC73EF5737
F2DAD8DABAC4BC89F49090AB1A9DFD25FADEAFA8DF7BB61B04624F48444FCA4D
DEA8FD24EDBF20881FC91A4FF6F1A84257AF3E76EF232F76C9D0C0F9E2CF9892
AA866160F4B88FD73A25C8A3DE0EA03677964AD1AE1879F31554735FF9D109EE
28C8BC096A99DF04010EE379908BC288DE745C631D0B097082E73589629430B1
E202ED732C4565BDFA300D82C1640A3A495D71522B0D82148F299D3C95102B3F
0D048D7B532E2A0CD7BD22D2E2B34D1495247B1EC6579E1C59BFE760BBEA2100
77C19249ADE10862BBAD279F93AEEA70B48BA2BDBDB30BCB7CDE51EED97319A0
009DA31174DCF5314ADC3C6AEEA4E81BC5342191F94F94A574D4E7279D81B82B
D57E4EE710CBBA2473F5869274074F2A25BCA2B4E479414E9B47272A3C4437A3
E1FFA8CC1A09D26C8B33D47EB28F3AE398CCFCD323E81D5A69934C97764CAAD1
058E70D1CF6A4A09CBB9419709A6476CBF11C98A8D097086F5D4D77A1E2DA99E
B13C11FC19F845FFFD53ABAF7ED9044EBB1B3CFC4EE8C0C1744E8637736F8CAA
F4AD74B96E9DEF3EAEC6D54B86A7D52EF0E477DEB2DE91E7A5A4C156BFDC639B
9C178D588AAD1A95371E5CC5D5A5C90863C065F34CD3E183EEF39AED664E83E5
E5558B4EBD60E1D3B192743F8B31235D1907954B8F5AC2DC3426F87B3FD9B3A0
E877650FF05A71C8B62F82F71EE2593264A6F8ABAFE34DFACFE8DF1F7B0A6754
973B274E5102564EE5860B3F5A8785BC8F82D8EBA66BAE463B759583ED3F0C03
41FEDDD942C2DC750346DCB604D77A609B5030F29FA01E6D882BDA8C26690AEC
382BF4AE91FA70075A9224F771F4E87542DA5F9F33C15AAAE617351D5EF9F69B
BD6D565F88E5C138DDD73ECA92B7FFD087754781EF70708D8A505C6D28C75ED2
8FA1E9FCB1CE717CFD67A424F70590413C9DD8735057AA3808AEB18F2D522E23
2E3E83989B0FF93EB424BE41EA7397C491F2FC0CDFB18D8ABFA5B8333CE22DE3
D1C72ED100CD584D7A09539BB1E313BACCE411D4B4313FF1C008B69549CEA2ED
C431E18403A6E9FF87675184C79CE8730A33951FBC2E5B031A0B17321583B42D
E5E0F95F39F44DE0895D0C0C9F53EE1DBE646158CB6F4CDC952EECB94EE29B0A
EE901070A024D698D0134F66DB7F06B86095774BF944979D78BE9E806E91506C
06467F1A26E41351E349B616FC13B93FE75AA40C0171FA9BA2214935806C9652
28715A3555F280F163DEDBF476F351650F6E8672FE601E8ED0AD98E968FBBCC0
2DA1704039DAFC5A90A65606F5054FAD9A3878CFF58D72C19CBEC6D1A25273A6
1604934BB5EFE68009FD0EAEB026BEB5B140AB3005CE19E95194C3143340E5E2
23690BC469454D661AF2B1D9CDC6B3714876239501D7FA73682280CC9F5ABFDB
71AC67597C25CC84FB5B7E3DB938C4E965693260C34514D95C71475CED853BBA
6FCEBE5509654A916D15AF31C09695A77009E865489CDDCA682571C8538B03CF
188099CEB582F367CCFEFDEF1C42C612D947DF7BF71424AFA13135023D5E0F56
3059F9959F021413C8DC613D035FC8A44A35ED5CC53EE38F810C494CDE233ED8
AC7E692ED9DF35B5B88C188D46282036EF183AC810D42A2265FF7B0639312188
F9BBFC753A9491E1B70FADDC7800CF6555A1669114BCBC5B20BB6045BFD5AA4B
A26DC69F2A244D5D3D4B12003ED61FBE2EF02182297C5262ACAA578CA4A2E169
65289FE28186AFEEC45CF8F5AB034EDF79DB1A93215DABD50D4814D9DDCCE81E
F902E697A2A69C62AD60C4B72BE2093426677988F8AC9F7FCDE0DAC8BAE5B2F6
83F2A858182EFCF99114F384B2D69C75A42B747F260F141522AEFA4CFC0784FB
2B61772130B9931E01AE26C7563256509346128EBAAF7D11ABA3DC2932E9D0E3
8D4B1A2A25CF4B2769836EDC94CF18BBA0915AD56CDE8B141FD57FBC1E6470FB
E00FFFF6D3664C5D0355F8BDE60E41CE90D7BB6633CB481DC110FC14AAB8E926
4F5EEE83BF7E09FD39B4341967F54537ECCBC61816D57CA02A9F016F858D6608
F304E3C1B9FDF97FB541A598466CB9ECDECD1E30A6E774696C251F318AC1D9EF
5FB1F77E8B722349D4DB9C5DEF381D0456CC203C348DD73C1D3D55EDBBC45186
71B8D6440A282859DB641ED9F940FE498D53AE1C4CEE12254DD6EC68DEE62A7C
503538F9EB6C99F52BFC717F43E4672572B9AF6850E95A9D9EA5D913710C8784
8E6766CC8D703B64341ADC30B47F91282EDFF8750C66785D661A19C6090D596A
F51562994954916341A04F19126C17DD16A3913F27F12C896BDE5C6BFFB921DF
0DCC3C67E65CC5F7A2E252C8FBC051E8D31E948F8975F02DCAE8484C13F7C5DE
DB4EDC72B4042D30D14B7A8BDEDA95AD49D2958D1F43A3CCE7B7B9DB269FBAD0
50E39D5BCD4C4FB87316BC327ABA5D5F5FF14BFAABDF9375B1216D857168A6C9
C736386CE6BF26E2208483B8ECC8A7CFB6D6CBAFB766754C0E8934F9AB738930
EB75A6BA43A82E05AEC0E8F423974E8CE0083904A6D968D5BA96AF6894363B21
14294E66864446DAA5CE259112178878038B6FC5BF776DB24668F0F4594572EA
E33CFF7D5781AC89C85DE712A769E4CB151CCE23D37EBAAEA6EDAA4288BC2EAD
C60BB6225D9CB6CA887922B117EB0E7F855E416EFD2327DD0406D7E014791771
EE369B64E6698AE875773BB43D2C30A95318AE845CCF5EC97CB96B0B94396CF4
65C8E6BC119C8429EE319B1E09E4044F8B28FCCCB6B199BFDB6E6884D083F285
59E60B30C220A2DBBE87E6DE4164A97731F59B6017188D449C867D7B28D51453
46010E2FEF569F0772BED49967AB61994F100F9C6E9ECF265A4ED6A5B90EB70E
2BB7C7C23B7B83DD252E4848EDB2E97541FE068644845F964F7992A0A0FCD1A0
7CD2F4516895203B8B15293B65444080B62ADDDCA6FD48807EF500183246F037
7048C48AB0D05E92A03FCD2BDB9076AAC80573D47C104E1B561FFF5C981D0DFA
681D3175483D668221C3D21B072AA0B8373C97DDBFD7445D1878501ECC18F0A7
8587E1259B1205482DDB69B0316E7CE53E8CBFAAA5FC3B713F6ED26A0E7A657D
E220EC39E860CC99CABED0A49CCB78273C3585F37FC059FDF17CB3B15B87259D
35AA0847B7E9A4E1D5C3FED9F2798B3A1BC2D485D93D8209C94E8875065A8D2F
7D8A673AA442E2CDD734EFC0B94C4A58600D51FB4D89FA797068AB8EEF492FF5
788EE038A491C9139A2E0332D08A47FC445401F8E60AEBC044DCC8CB50A4A164
2F77D8C4203897C85F490B73207821859BB191D53398A26D610D53AE6A18FF47
673D6230D5F2776ABE58CB9B13DB857C0A6824B4BB471EEF1ABD87F62376C476
2157427BC374B0F3967C4991FB31B2901C8C2DA92BEE9F27728FE5F4CF000927
D994AF877E21C32B7039E11C6B7298B9460C2609CB742318498914A5FA4F9D3A
83080A8AAB3C60C966DA3E67C9096ECCF26590A7894CA6F91AC2CF4A14206939
359018DDCE552712BD7DAFDE8ACA844DD34A2EC1F5C5C777F75EDF7602F4AB2D
A5543DEFDC3618004C2526B70DA57C4576BE5E02D7DC4613C87ABA83D059ED06
35D5874A399D36E9C7F8A9A62866F4E857F4EA7D25CC8749B07D74DA1181DD7A
2DF5B3390B2F19EA4B2C4883D21213595AE09981A410289C94B6EC856BF8E913
D36CDCB2ECB447202D522ADC89CF698C61B861F1B4CCA12CF4B2481E4B640329
667BDB2B79A6C97B54B8BFE82A1E6D7F3FEEBBDA98C052BFC0B40FBFCA767F3B
1EEA76B1520772E1658D2CE91B5B27FE97E1D595E787E96359EE9D23C7E674F0
9D511E2F429E8CEC0122CABCCDFE781195A1B1A62332A18DD4178062E8D1B5FF
84783F3F85772FDDF94D4456AD3B0B79A7504BBF5BA6C59C6BE0B2BF3FBC775A
215962B6DCFC453DEFA99DF6B76D0987DC232178A07DC8D739BEE3B790E1D778
EA2294E84A32791E5E96831D43AD712979396A4CA810A650915DCE8EE5BA9CE7
675F9462B114853CA1BF1C54B28F3591C1B05ACF3D46952B423D19D0573BAC96
7DB05685E1E2031A7EA3B7A971E4DC3B9408CD5F11905814E0EEB53E7C0BA010
425AD421D5EA94E86464719934B4342C86ED7BAAA66B457B4C36FF1AA84DA1B7
F2BDD3E8ECCE1499F3925DACEC43096BFC7FAEE7AA684866DE13145E5DCF2DFD
5965B0A9705EC1C69AB3D1B01DEB5CD178D85E3DC41AE8930680CCBF28F703D2
8415BE077393D77C96B6024A57B5AE20CA4B6337686DF2FAA0615532EAE59C82
A4B95D495FEEE1359C691A21F7319AB813E2A1EADC39B8EB7AEC1C33CC61D334
E44F55442C4053B30A15AACBDCC8DB585D05EDE5463D1CB031F09CF2DFF49E3A
9A25496738EA0E3A8127298CF30291FED98B2CF78378088636FC9AD91DF5364B
57D96939A98F9438064838B04146058A2C52D99BBF3AA8291D7FA918D72051DB
6CFBA44520B5B5689C8754112DB12C2E8A1B23B3EF2FB80E29405A632A951499
236ACC32B4C997B3FE3D863BD1FE2D56BD513E5BE907EDBABBBA4C1913F5F6C7
57234D7EDD3618CD33389BB0DEDDE20BD78E04049DF748C1248AD03205458D6A
172A4D04D3C86C50D3367E37DA618E9C3EEAB30486971398C4873894DBA2DD70
79F8F2368FD8D8279CD98C44DB6835A27FE622D3505E555EC90AD1EFE819DD2D
EB414DFD0EC0890089D3DBE624E72E3AD8F47C1D8468D4237442FE1B54FCB0B7
661A99E3BB1BD13565961B1B3760EE57E29A13D0BF682FE837974BA4A855C6A8
CDF351FD697E94A98E7D8E23AAF799C7BA511AFC4F99B3AAE7FDEED53AD92CBE
2DA1745E4F1EACB4D6A50538653A4591C923F2CBE818C415CCBED7AF47448C6F
34C6A8ED4630A58A2C77044A4CB57B5D5B537BD2FF89086BD0C4CAE557ED6633
FB16C81BC1636D6B4D6D280B4B84778FFA7DC977146FD7E6B7BF4C8CBF53A7FD
78362CFB2AD31954A1FF65BB2C5D0BAB9B7921775DE49BC8132788B2E841F025
6A91A59E316DE508679B11650697901D5FCF5FADC38FFCD02F89B68D6CA9C60D
3A774AC7448624EBE6A7D0067E312EA79B482AB45A87B7902B28E5BF820716D1
B70F8A58940B341F8D147A88D61C5990E609001B853B273DB14157CFE997DA7C
363799EB647602502B8190281BA5F0A86A49F0EC948B805403A784DE9193BDED
A3D741907D58A3D5E03D9BA945156C82BF0A3AB246BA724F69FEB1EC25B337A1
215CD4D151B6435DA8D43A7D14F9806D27117CD03BF595BFAA794784EFCE151A
072B9B711F0F1596D1E8D162C2AF67684B23B68282D499C36E95B907FF9D9D77
907EA4205A0BC3435596988D1C67406AD33743D2948D0492A232441928AFE6C0
2A531DB33EE368F0F87EB63D3C75051A6C198C74F39B53FEEC8C2A4AF378B0DF
6382C492E890228316162A20AF3D8CA197EB10B290F5AAF9DF83040BF71A9A9B
369976055E2BD80245F249EFE55BFC35DC8A32BCFEBFDB16A0642E5CC69E5A25
A664579EA4A3259B2FBC52122E7974849DD398C044CB32F94F457F458600B1A8
7AE31E65B7EFE7B1CB025613E5379815426B798433263E6D36537E726577CE14
83052A0A4BB1B744C46EB5162C712A7237C6AB8B7A5B2C785D22BB15DB28335B
BB3DEFDB921C86FBEEB0F238F7A3840E280BACA15B0FA0098083597E359F0903
8051C4BC551BA0E9AC2A39A813FC4891B49E7775375100F55E9F16B9F5B1C62E
64A0059FD24E9E54D410482DA1202736A20C84ECED6C07D533D00EB438687064
3CA83B5ABAE16CA421796F2979EAC946F8F2859FF309B8474CE66638DFA0742A
46280FDDDFC1EE81028E13027F26BABF3AE38AF0FFDA864C97582A155AB9928B
3E0676CC131BBB42EEBA0E20830BB9DC0BB659B2598C8A3062BB4D58D6E0EF26
251D40BD085085D8BEBAC637D3C1CEAF96B4581E1C94B860523B518B1D3E9FFC
5571867AE93A723618BBD0D17158A449EC4E1C006ADFE2CCF08EE40B2837B09E
DB50C154488893EA46C5C9397942013B540DD291372C1B022F7408AD1D765F16
8FD2A18582D3204B245758ACE06B9BDD2CAF9B2935E66E18A7830B7502FF8B51
71D26A88F0C7533C0356C7D6AB6BE4CCF1C2A978C9A8DAA2BC52E346A99B6DEA
A787FA4E224F7FF959945AC0B31D21CAE7397ED241D48F5DB2174A712F0A1E33
ACFDF4F850DA4DEF7BB169CBFADDC4BB1B1552A81FBFBCDB24C77A8125D8037C
E9EB308D4EB08F41F3C2AB7B1D4EE45BF11E6D398ABAAC54D93F05357FA5E3B0
09A41E67FAEC8A10F7A2E13D9A8D6890F4E2E9F09632FDA612B34B33A9AECB7E
F0F04476C42C0BCE3308F1E5DF5343790F3E7E6073FBFB8D48D04F9849297269
9B5667C0D2D206F4785EA9E469550EC066319191D8B1E41B3BE2BD081CFB9BE0
71DDCE27DC637479D3849AF18E820B538AF606A1E5B70BCDB478AF69608C3DFD
F5EC927C6E79972AD10D4E8A4AC39B95474217BDB214742B280AEF95FB492D5F
EF97E9813F28E77309B1D0E6185370CF1261BD2325B000A5F9B17F4F7572F11F
702BC27EA9510BA2D4BAA94F595028F44B182070AA3A421603ECC1623D32353C
D7684A18FB572F541CA963B239C132D1D6FD41345C5F23910DA90C2B822A026D
57E5E0A4FB5A8D08B96311C845ECA7BEE516E324C12AF90CDCD2C0A7D438C61F
0239328466F7BBE939E8366E469CA5691562A9024DA5CF1F78C47035179F0B63
01B1902F233736792B3CCAE73DEF3F7438EADDE4DABBF55B076E157727BB8331
B85E8B3D5C8945A9CBCB7F93531283C6275E3B1E2C1F59B4EB9149B34720BABC
8999EC28EBE10442617829C58627F62C3D658468EF3C0A6C5FBA5E300663BFF1
B10E479071A0FDF99510E12880AC5C8DDC042F639345E935A22DA9640469563D
618B049A74E2FD1A3FB8C8FA194B866969761A5E60214FAB5E9B2F8B39950A37
33EF276D69589587A48B07514C474E344BFC5864733816E150FC7FAFE4B8139D
FE9CD01775CB35E69BE23802902E6899B9A904F0767BE960612189A486E56D3C
7B28B8A4BA8F8152F45E61487ABBBBE2E28968BE9CF0DAD8AC2B500B37969F67
25C7600E5E2FA9F52BF12DF85A6FE53051A962FBA5DFC4AAE701C1AE4BE16874
E092F7CA09DC02F73B0F555E8EF5E36A83B594023E8F4D124494B8464622C510
D6E242E10BB837D54B854A59841C7C7682102FCAF16A730004D39645ADE4131B
4439DB2C983E53C3C6AAE69F73561321EAF4B97A0102B359B105823DDF7D2BA4
73CC98DC7E779A715CEB7DDE297E42A192514A866CEA01FB4A43288B69A9E790
EE170F73C55A44542A083926FBF4BCEFC85437AD3A79305E4A626C78399E063C
0AAFB4E20DA2EC07AD746E09B55135397A77EB828841E5F446F8517795ED6B0B
1798B9DA9D10AD5259AEE4AB2EA2EE5BA19AC90CBA019604991923604C1C63D0
F3344BC7ABF7745EB13946F70B4DFCC2AAE3C9DAB7C4992B8CE431C10BB4D94A
3814712B66FFADF268B85A208F1C0EB9A654D83B2247144F40839F038C35898C
6B419D838C881C778C74EE9AF3153E5D7155B85EDE07CFAC6B1E246823D56CA5
BA7D8A6123F3B3A1CD4F304AE25A7ACF908662B4FFFBDF33174CACF0AC6EDA43
E4144180D453724DDBD54A5923D43279785B68230F4D4B7549ED6EFCBB8879B1
8E7D341AFF6451FCFDED1ADDCDFD25D3701FFE8C4EF6EBC6EE533EEDC47A40EA
032F223FE3D8378201E4559A9C3DD8F600F21B31F01F6C9891449D11B2E9B35F
81DFD2B70EAE021CD43F4CCD3B9A1D56DABD05376EEF7554B67B8CD01196E389
27596CCDE378DFFFE0C38C8926602B90CB6AC6F89AA9AB1F8C02D0ADA8D74B44
752BB0D6F3A0CF4E59778EE7A5DD5D4EEFDD6ABE81D34B1B08B8F7DF9FEDB974
5D3CF4274AA0A0D106D74BA9945D11D038EB39804368D579BDB7C7064D39ED45
72F1122FF0E894652422B11A32EB80B36C1F26A1F13EB90BE5FDDBED73BAF7E7
7774141030BAE0D3B1DF3A661518E24225317A8D8DDE34503FE31AD50A2FACAF
CF1BDA4B512C890ED4B91090C42718F3A21915FFA3BC94CE9376D17FC6E1CB89
0C9280E71B81670CBF591F78199133921AD5823B2964A1A9472235FADE8A0589
1CEFE9861E6F6513DCA43A32F59F361C30D1F6DD7D0D921A32A98807EB3C44EC
877FCB205AE867ACA63C6A4A24A808A9C1227063889D33AB2A5479156710EE37
421FAC947E53443B41ACD0640FF572B466AA299FC67178BBB42DCA64BC0753C1
04C8B2B7A6A708F8862EC5D8837D5C61442D7AE3A7ACDD288426B62642CF23F4
0327AA675E8A439D4D1FC4034B7B00924FBC7A16441722426DEEDE7B8CE4A187
7F8905B6510B6F6E1D1301EDEA578D25F8CAF3D67B0C1CEE2B4815FADC64B543
BFCC1788FEADD4D4FADEA06F18A44A7E7BF02FCD2F52D4A3F818DE965CD18FAB
ECF6253EFE1E6EDCE9C0A6577A87AFB12B4B7116517ED596F3F7BD651D9AC4C4
AF100F18764E282595A07CBF1BD05B68870AA4FE5CEAEFF2DCF0052C978650D6
92E1B65D16FCEF1BD9B368EEBC33A8E87915C0E2C1B198297842D605121128BC
D3F6C1BFD50326EB006C009CB91F86744EB5856FA5B4334C1ADAAFC52501E02D
0C06EB1742715EF4DA89846694065991A42A3A141954C22DC35EA1641325BE2A
82433A844D66DFAAFF47012DBB9866E2F7B39791BC79FAD66439AAC93C7EC86E
4A3307C4146504C533D589EE393627D782B8BB567133924DD566916678BC330D
79C906F600208C5E72D381CB5D232C830C06A5D9FA14B13D45E464895AB6B394
159084FA721F30284AFBB83605A344A70369A9427294192AF0C136E0368EB89D
FCF02281A7B80BC7E8F642E0F57CBB231D7AE1491F5853B76B7D97884710F6AD
0DAA3DB01E0337C3CB29D584029D62C01465238009B937620F447BF4CA9D5A43
98CD984E0ACD847B516B0B45E793EC6015C39EE3173C1EC4741D24FF05CEC0C5
75F592BDEC46FE798A3D569C594E59990CBFE6F5E0463145D14595258D7DFC8E
F59E48466FF52A97C545E9482F3B8996EDA2F36DF8E5FCB4E35EBC14EF687D19
35836C4393CF49DDF6B27B3876892C70D5FED475F6BC1F48CCB869BB21CC18F9
97D426E6C6B1CE5B2F28AD52B7C002B74D9AC71AA700E5931CD0CCBAD48C3587
0B8EEE7E84C755B2CF12F468D855BD37D0777D5390908B765888A82CDD40B6F6
3BB9C080507C7C7CB7823886DAD6948513F04239BCBCB5CE4CBCFFD06C93FDFA
CC8DCC427552CED6D21F29352B2A8EBEF270770A16E16AB1DC90EFF26E323743
557895DFC232D08B56710CC88C3814FAE52A54C5901A8DF43227C377D159BB14
A03DA2A48C9BC6DAA27A7DC628165941CB9ABC36A1DDCBA1CA34259432E28A67
394055FFDF9B83FB086A047D27D83D47B1D5D071A82918F2875D07D615E87701
977C3B10CA30FA09DCAC28C8B7C5B2B0A4D4083997B3408577BEC90E44F4980D
D48B5B9B7C13D3A6EA6CE2DE77A7618AC6E774A9CFA2EC28FEC134F3A43D25DD
745D1E33DD9600549EC6FDE8550E83512CBBB6F3114363BA23AAF7188F932DA9
D8263A1DAFE3C54CDDEF4BEF242FDE97A51D0AC1C6CC0D0EF5D2870010EBC581
C21B56310E42725C4CB5525D5AC34B4B0339AA4BA24F6DDF14E6FFC5AD2C8CA0
8FB3A536B62051F70336472AEDC6F3C549C2B006B2D0AE5B555855EBE1DECF5E
340D91B8916EFC9026B4F9F6FA146049193A1246DD75B3279E968C83C34998BC
6BB442C81D7D42518CC20D00785BA1F671005F15136C2ECB62B5677A4D9A5B96
7EFAE49CA6410BBAD730D5EAEA8C0218EF88115D1D5A308E83DCE7EB0D8F8094
83829FD618D5B6B8CBAC493B83A01AEE0921F5CB98494DE5BFE7F8DF2C360CF3
BAE38AD6FAF5E6F1859951DC74F4AA6932673B29E73D71A6F6438C3FA9F4DD31
93401793223ADF992C4862C180CE398FCD69A6F903228869FEB8D88D557757EE
03C434508C78E5EB5999DBB6F1D57B0B201B2B627BB9F1A14D4FF2C9DFFC2C0F
654CA0A18C784654DBA4D827E1C848E41EFDCB5AA1932BB61AC0D5A1603088BB
B0FF3BFE8B0B1BCB54E5E630849116D669108D5D841751B6208EF7D8454637F5
48ED9B8EA033C474A4A23D2FC1E7C447581D52EBBE13A5D183E1B4D90DBDC4B1
A66BC46301F8F1264172C73B6F845B6E556096762DBF3F5A37781AA05FB0DB8C
45AD0A33CA3163A233E474226E6FD25C2281A715CA5D88E9BDFE159E4FB6C392
22E11EFB057C10EF5177E1A685DEEB35464334680703A027745458C11A17826E
5BC9F9170E2B2DCC25C9738DAC30D8B40F8FFE4104A7851954E15917212DFC4D
C1C03A282CF0938CF946EA0D05F97B62F219D6453D5BEDC0304601C32E8FF209
4CC9A0EF23FA0874926B9FDEDB030697EC6ECC5BC8CB86592F171CD2E8DE4961
F81B4D1BFEBD42A912EDA4E2367727F5F238A97D80409BE7CA8F5CE4AEB4885C
FC296CBD783A7F81C3A5FC41DB1033F7E93C3CF95F888629F520931639528C78
811DA03E3678D478E45E08E8713ECDBB1673A0F17581ADEEEE1EBD065BDBDFB3
0B624C22418FC15A1854C297304CA4679BF7E6D93FD6F9B56C3617FEA2E70DCA
4649860DDE74B0E48EE9B2B4FB5D5A2650756F078A83BE649182F5C4C277667B
31B9122AADCE03E25CB04518F50C804230A25DEAD0AE6AF852D2631AD251F30F
97DFEC9FA2FD2526A51487840F1EC1BFAD7EBC01BFC6B2FB7FD6F8844A834E66
9CA7564F6B418ACC0BB36CECC6C8F98D19B2EC7DB4DAE6779443C814B2BCFADF
CC890AA487DA521C0735231CA153783D60B8BC235ADF72929F32F6C37DA7F85F
9DD8CB4665CF0763B5E755832414CD9D32431125B530589172EE479672382054
330AE1F20F72BF4DE0A4F14ED1F2F4238C5060AE40F08EDCE2EB81DF3681EB6D
B6CF7B861027E2FD9AD13B1FA94881CBF0A6F55549B8BA58721228694FA3B9B1
19777B6A81459203EDAB16F29A00140001C20E66E6F674097A9121D3FCCC4942
3C976B98532B0CE0185BF36E0AE023475DB3960A73B16D14654616A8E80ED76D
E3E57ED77CE833665AF91D8BF0B1DA36261E27F7BDC05E30E454A72C32847EF7
A37CBCC7A0DE20F6405433D37B7078F61023EEB507DB6CCA9A9AB3B4CBB24DCE
E0A728D11B0BCA2F69628263280C5E6266242C0D75E075B596A7DE86A2A3D2AB
BAF3E1D78D7ED63AB832F3AD07DB0CBAC91C4FA9E954571105D0A1CC4711A12C
6E7A25B2A46DCBC368174B36965DB9A2057F4FA1E9A50FAFFEFF5CDE57DC3B8A
36B1C4357CBC267E5850E8B26AB372293AE8C1AB197BECE912CB4818D91DE398
C6506300C6FFB4708C4E61D81CD5BBF1443873351BE39479B97A85B1FB09C6DE
A9AED85692764F92EDAD715DAB52FEF2E3FC6ADDA60D4C5FC1E3924CCC7E4AAC
C17CD5E63D209031A73248BB0850C67EA291EEE609E483D00129CB9BC6A3942E
5E19C80F63269E1D3FF9CA69368E180403FAA63322CB01791E52C0258DC81514
B680F0574503182BE2B5A6C77E99530CAD87DF14C540B19CDABA3B3E6D5E6424
278E4F09E5F0CE63879596A2C7769807F11BF7BD38DA027FF743A42DAC7CFEA5
E3FD6B50A2EA51AE2D208595A3C1A8045B3BE36636A59AE337CB751A2E83304A
C516B5871BF7633B019C5C088D0E94F5CD6264644659E5F8BF3E55A6B8B6D755
FFF57D21D2356777589DA9F51341A050F86378F696367F3A1E26182EDD441ABB
B5242E9830A2C67987144F7EFBEBD2AD498CC8357C374D487A58D44A99702528
A1B5A6A01C9158A17A3101E080133F6984217C5549532B761A7199E14CCD4164
F6FE7D72A2AAB76A5D23D731160702CD62CC44DF3BE0FB2DA85ABFCB14F529DA
2AD1BA2D5444030DC730D75857528DFBACF77BB1E8E098A9A085BFB4BB4EA0FF
D38781C365AC1EB36DEB71C2ADC556EFE0C798077CAF9B99F82FD6C5CF179F4C
6844A06B3FE605A204A2A12880831268DC08CC42FCE93A29ED57EC6EFEC602A1
0348B2C151A8F34E9E3F366890E4815584146E1E3B65DCC9118297E3E1A60594
E91B995BBB955DF6FC2B254E86A4B7BA0E18131C417A72111167791220D0FF62
390B11D9DE319E8991F5B96B15160F0686C928BC7CB0D76F8DF29ED40E967949
6A2FD014838B1BB0F6A76A36416FC70AACB4CA00D8870D4B320DA61A027F0F60
33ABE12743E86803E4B890E7E327A0976697A283A9CA196FD41657D02371497B
A21ED79040754F565CEB51F81AEE0A6450D26E55AAFA9BB655AF8BC51ABEA796
48556C0E6D14ADF50FCE2708909DD847D5B728E1EF444ACF309CC3129FE48ADF
11C2DBAD78F88C27611949584E38AF2F1C92C2FC3BF3C44689824B3D98C9E7B5
C88ED4A952CAD1D74971F51FFE5A4314377693F325477317F2F849F5B8DE616F
50DD10DCC8A2051C088AF4E45E09234E3D6EBC15C8AFE2DF6849D7CC79199A16
BF7175F7DCB58E1B26095E94A9E77936F0603283EDDEB3C1685ECB950442DA78
0DD43FB7CF72D88A612C4F4C1E118915C593987319E48CEAAD33A6BB5E7010CF
C942CF4BAA6EA2E870CFDE0BDE585CB6A729DA39DC08AED66CC0A7F70C8609A5
F11AFB5F6906F738C94947BB3EDA4671C683D160C6EA55984565CCA8254BB542
CABBBE7AB4607326869737787D9BE9E222400B814EDF7A155C8AF902BD2B0F14
2BE0B9BA94195979B8E28107E10405B14299C851F084F641144AD1957D55DD27
B7CB1447E8373735DD079B0C218CDC3529457FFE1F14DE683AB7BC24A1A358FB
82B03E4E1040170C5D82F4A9EEDEBFC7C53B1229DCF7037C015F877B6C8B90CC
F2EA721384A1972ACA5CC5C7DD44E0FACF0154EEF837F6ECF36949EA0686B23A
AAA82235F0FF2DA334DC8441EA7B8E6A354D470B11313FD1FFDC279453C159BE
ADE296804B6117D0455A72E3FEEEED90B064202103B322852A4C1E4A0D600D15
2AEB1E006CF572D77F61C2B56D50C22624828BBC077D1FD1CB8A476F96593528
43C2F7B4FCD9C6A835B4F3810545912360D43685551083B225B1726B101B589D
83BA716BBA1628F39D3C25FF87511092BF396C5284F16C7A691776A448E65B3D
2ADD7606004C47DB1327BC36CC00BC012E75F81BCB55A057C279C419B0E95BDB
25715ABD86474FBC86DFD7151B64274F62D1CD29662977DB2423745E29C4A7DB
6D1E8A19ACFA25D1DC2C02956FF0AB6E3B1855059EB1AFC50C3B4D1E2CEA68AA
30AFA6B875411D4CBEB08DBE2B7102C54F2A794768E43A152C837FF8132F618F
59CB468E4592ECBBA4EA1FC1E185C2427447B29F77804AE165ACD55D648425C1
D918B5473095AAB75B6E44AABE568F5B389257668B6D588064CBA4A21131FCC9
ACE963F048D4D193EB91A0E022B2D2D8474367544BB1536C2A81CAA2F3015674
0FD824E935CF4963D985F8EBFBB016AC57711C3ECEC2B06D8239B2492200611F
0B62F618B437E3C449ED7E41628F8EC151D98ADC24E58A2611BA9258CE3CC5DD
BEDFA75CA217376242B2A0F0EB1867928482639DD5F463C871CB09810BC9DDD3
31BEF65D9E4758EE32B3D5315A5756D5349FC2112B81519789FD362EBA5DF2CE
499C93E68DD0C79626B8AFECF0B994B23B0262CE0FCACB726BE7444DBE2A23D2
77ACCDCCCD78417B9FC5B4E78E3C4BFD193456A05D19CAC92DB6F79CFD2EC74D
E49BB8852FB8E31804F145383D6D828725F9ED5316BD2A5AF6263F71ADC624CE
285C8A10586635D68600E063B605F72D2BBFC3F9B0EBAED84F58EC0705A035CD
59C42A6765940F979046602F432A0B7EBF1993F8F0E0C6A9A9CAC26C9919F45A
CF3AF0B105BB575C4BEE0B0136097337BB7B201493CCA63D6163CA59D30F6032
F629DDFA234FD47E4931E4477E28E916B5D0C1F89E52C477583C83297C0FBC56
A076F0F3451B408A0CD6E65662C2ABFFEE12CF1DC1A8D3C27DA8430EF45B2670
BB7F6580215A98AFBBC9C10CDE076C47297AC739E828AB0CD68DA12F241B5CA8
B55BF2E6C1A072388B91DEE2A4D8DB1A42AE086540E93B0DF241548E972465C0
BA90359FCBAC11DC2068F353EBC0F57E3801DD68C0440D6C28C926AE8B3BA353
3275A8134B9368FC8C192190F6FDBFB313CAAD716CEFD4569CA8F29B791BD708
F1B97A0DABFB0614027D47A3FD0E150D7464FBEE611B0521696A53146C42F813
F6DDAB197FB878275864C58B1A353CB429A7931B5C1E506E945D4C8E9CFC9C78
736D8046998B679ACBE0388C08C4C40C73A6FF7E930FF994033605A1B6D845FE
5459330F0247BA831901A2AC4926E9C560FA8963EA1919009BA6ADC1D863E745
B89F2DF96E89F5EF949CF5F05B6A98F6CDFEF47FE30D1E352A3338C61187B44F
D31DA2E01C6D4642EA2E574971A9F126B6E83F4880811C9B48197C0BB61A7EFD
4A9895ABF00A029A4DF2FD1D00D089E70A0FA5F78D5F5E4629BCDBF096844E2E
554856610F7C1FC501D10AA4879A60D191AA445A6E162FDA347D113C017E1542
3DDA27CE874413B3813848C65D1D78D3B76E19CB62523AF82058408EEB4734FE
4CF6C815741F048CA96DC0408C0A5F18BBE08EA2412FA42E4844320F42F4F80B
A7669AD7D9A5AA6D4CC56EE1CECD38BE03720FE34A0250EE98265FAA0CBE300C
BD6DA09756520DEDB86A3F9C8B9DCE675A7FE05F890258ABD1DEFF1DB2C872FE
7C3A4DD16AAE3F46BB182189E6DA3D72C2C215B6D4824E572510BA8BA9F0946D
49B6851CAF0A381A4C2D7464C80E13A0B39A2D52D61AECB217BE36BB709EA2FB
B1A8F05968CFD9EF5F686ADC8FA488990D704E2A560CB55E4A423D27746DBD15
E709BA02351839AC69EE8E8D0935D43BA124710CF17C3FF24E9E5CEA5145C830
CF6AC3AC52F38FEF13F00D4C850CF63457E542AC1076831BC76785B2B3D5B59B
B66674498E25DAA4D476F25050A7F3023C9AD72B07D7BE0DF090805070763B7F
9F1AF7335444818D5DBEEFDECC4E6CBBBF2D4BF899EDDA3B6A07AFA1C3524A56
93A21734C3BA9CAD4A01C3D6656AE9C6220F24F02D9E17D82206E5F606688DAA
16E8D0B28B42CE347326BA0432E48C4CB748596F9009919A75130C0796D19EA5
75A22ACE8981B1B589C18079155EA58141EEF414A641C3ACC41046FA8D5A1FE8
0C92AC9B727F732A1C8C3B769B9D7323C08F6FC750C1E40236053B62DFFB6FA9
E1AF4E1F84F157F68A17C3A301050B2C3C438B860B44BE0FA0C42C9B2291DCA7
82AE976037B0F8865C29E9C6131B4F0D752C4CB20C7CC4E0150E93CB624C413C
39D3A1ECFA1BD982BF4DF2BA3ABCEAFCE98FE946DE7A2B910AD93B9F128E102B
94782384BFA4ABD0E6A6DDB2760862D1DA9B8ADA3F2772E5C32E1C47F312E938
EE7EF5EB77589976DC534EFA5E804F16CB69D2C97C90C849E93DEFA35FA3D640
2DF17B3612834E4EFE3C43900232407BD79E3DF342374D323F4C99421BF080FF
03FCC22D29C33F1D6769CDA082A39B9F1A4DB4394588069DDDDDFBF53A660D37
0C5BD6211C7321EF6D1FFA95A633C68358F3AB1D0E5EA7688F86DB52D93CB735
B395795FBE16C7FAF1FC948DDA1BCF0F226600C7259C3BCEDE9325263F5121A5
2EAF0E0814AB5B1351CC7E8BB244B5CF06FAA7673EEFC00FC230AFC18819CC7D
487A3B197D51D9F16D036A665201297CC8A7313533E9B095E922E8D152D1522E
82A8523CA288EF59FAFF64C8B55C27DCC5508AA85235ED4919C19E8CBBF484B3
43582797AA72883D0F2DA5CF8347671110BA2B694DAAEB2E40ECF970C64A753D
27719343B37A2E7C5AB480B2F85FD6B57C84630C8BBB5D7A2AB9F45C621D445D
B14E0B58A3B676C8F58B546A4FDE4483B369AB7D0D9766AF81DC31BEFC9EBBE1
60E9DEABF6DA8BBC3E59AE039116747F5FE36C1F0A4158D6941D19D36B78C30C
F76B290C9B6E31B4B5BBC76652CF29599092620402D4804084C90D8FDFED2F06
A79BDA9D096C26D0B33C7FB6D11F8F91CC2254C3C03007CFF6BEC951B9FEF6FD
00E4AAD2FBD2DBF302207E76CB4256BFDAB63DFCE3BCDAC0971147C214542613
ABFC065A599C8B61790857547C1401E34A74B85C8E9F3C4ABE97932A39A2FC0B
75A045E58C4F4C251EE56ADA4FEF5FEA465951648C7D015808901DA15A564F8A
3E72A4F386805D4C583E8D24E8F88D24DB7C522F136E7B99DA394A4939F50C75
C121B5721333950BC9D32F23172CC89DF3FF417B6BBECD6EFBEA422501C4F861
F351F8D2BF6DB6F4B2E17C60F1F590132CCD094AA91A11CC074D86BDBEABE0B3
5D9182E330ABD43FB697D166F641A2DB1A432296C9947D968CB8553604D79E20
A4271F92F60AEC127373493EE4EFBF6EB20D479F4DFF5EA04BB22892C0192720
C357023549C51B36F2A97113491AAE5AAF24D6ADB75BBE5FE5095A32BAE80C11
149387DCAC49DE88CC1BABC88F4E02B04289C7792DD50231A4C32A37D3E1C32B
C4054006767BF6C3C2B7118ABFEDABC70AF87D6617EB011C604C59181BCE2D78
0F5624CF534AB6559B06784A00B3F63CB556E21F3CE6B1C5C48D27ADBF840662
7439E92FFA58158E5AF635A6A5BEC739E66475E914583FB88B12806B119E6FF0
12DBB578F91E9C3F04C95E0AEB4F190895772E4A5599BF193934E0B2ACB60362
8D96E6ECF1588BB9C1FF30B484A0607E452F4CEAAD216E4B4C473B49EE7D162E
C2E707C6739EF0CC2A8E586A59FC4003E2875F3B72043B492B99DB81E6DC459F
2440EE16FFC15187CE015B82AB96EEA4F736DC178AC749DB3A73C692172A70C9
837528F717EE2E59FD9EAE18B4DBFEFEED9E9B42B16C9D396F1A0B3318C09229
D0B1D204A58E59817441A7CEC4989AEC3D2B362841E7047F88C62520E54F18F6
5ACE571E9394BC40F806A557FC685206C1D54471884742E001B172D0287B4EA8
5A4B236A737DAC6F4EDCF3B46383EC2E5F0AE517C475BFF8BE89364EFCA4DCB9
C7AB80CCFDAE6BDCC8E8E56B1AF69C606559FFEFBFBE26AA48C5F03DBB92B843
EA1757A9CB7B91278662D92028353B9E287905010E66F93597AB66B948D50685
D5D17B12DA4ECBF27210D90FCFF7FB572D29FB0F5E79E253AB3F53C05E7F1CF9
B530FAA370A7261621816ADC0C0360D4A4AE6A51C5BF3B02E450283D8AB1F7C6
BCB0EBEA05F604D53F017CF38BD3BBD5D5E4D3798B0DB1A3C91CCD52520AB68B
4ABE5C18636E2B2F53E85D671CF56C1853135B713DC7F1CF9F7A108AB83171DC
A53D0FB7A4EA0734403F9540FBE8AE64204802124DE9FD47066BFC5DFEEDCA97
4F1B36512CE989567C3B24ABC030F4B902420921E1B07E8F84FAEC16B6DB7094
FE7C170BB756929F91D67D2FC8F88CFB0565CA47A6DD8DA5F60B893276462815
962481234280196FCCCC5EBCA658720928AD5C05623943CF01D6708777A51D34
94DC4CBDD940F915EC3C78754307BC252371BB8C5F5AD67152AA7703E19C37A6
A82F13E1A7CE4D1ED945A44CE01FF74205924EB3DA76357612EBFE6A26049A0F
2A200BAA388961D83D7795CDC19CD071903970370EB2BAF421BC4CEC456F2F4C
EE66929E3033054A60B12B938F456ACDFEAA2501B997213FE878070200EA0EAC
1AC7802914F8101CD43D6377DF3602D34FD278F98AE058285A40FCFD1C5361D6
4394B73F6E3C8C0AC169A878E3786C695C67164F1E509ED887BBDA2CB3902925
4D3BF709CB1A4E86EF0AE57A3969715EC49103C741BF0E48324B8F4034ACFC9F
87F31BA67CF749298C968A26A80CB291EB591C629106CF48FC62B8B1AB7F2D92
34DD0FA901E041CAC007E9B803F5383711309940816DF4D99821AEB4E55B46BF
F80E8CE3BB1F4647A04924FB4433BE1EFE16AB5C011858D30B5CBC8224012957
B999B4706BA4D2651C09FCDD3E3F0A2717EF938DFEF27F2CF9E4905912C284E7
C634E10EAB973C3BA3E849649235865A098BCC21C379EB280FB6EAE6B0834E11
AA6537CA907C52C05EF6AEF6852005A1F19E8F47E51D6348CE909C8A6AFAEE38
2F26CE2497A6BA00879AF61D13270D89808ADF7AD3BE226CB4B1DCD313660144
4D6E0498B49C83CCD523769041153D5F2FF865A55CA2CE35711BF0E4A2C10C8E
9DC90049430FAB07E9C963B5F847575FA4EBA9E1075879ADC33AF28A6D832DD3
4EC6DD19EBA517C9E8BBDCD720728872A185BF2BAB5EFEC1855940B3CCB73754
5B691D95C74AB8DE76C02D7DACD48ED1B827B2119307818C670447E29ED18ED9
2F0AEE7057429EBF84245C640EC278C072DFBD3E9BEC4DE2141513EFD19597EB
C077A3043A6256E8836C9567F0D061856D88D9EE854F5B9631DCFFE588AA645B
0ECF9A781B99DC386D8CE7AFD53395AACC8DBB4A6578664FE7E733F4AE86CE47
E6D74D74F37B3CAB5F50F3F19780345AA6091307A3E2A52E5480862789CA8C1F
AB151FB3D026BBDF1DC3D565C7993E037E840BBE8D057885D473188776D48557
B84634C47CA0A0A0192FCE9561EE00272388085FE79A183F9B2F30EC433BF0C2
6DC686FD2708D5615861975A8355DBBD13563071E8563E93E0246F4620E7A1C2
2764357E01199D769C595A2F9BED9BEF91879511C2AC14B295FA978079B8E8AE
E40A924ADEA8DB7BA09BD00B7C02A091D8D0F8C43C7F76CDAD368D2C5E160909
B5C1A1C7D2AEAB1553825383F0C406030B83737C0EE4487E1EC072650B89CE47
28A058302787B09BA60881E1AB00A4F195D6A7134665E8C5262023A41BA3A69E
9E0D7A904C029D64816A25A593BAEFB89887FCFBB9A6FB565580C3119307100C
3B87C11510B626629AD88D3CD15004B25B3433DB6921AAF680A2467F115D7929
BF219D2071035B4B25D8B5316D0732FA1D10128A08118F6A2E3B8C5F0B9A0229
8E8ABBCEAF574E52DA7BE6308C2F83B60935936E9EE9ECF3B508557085601F66
28EFB724AB6B13B35B44BDF5739A233D7AF3F65349848D7557F0DFA53140EA97
2F94797F1E6F64ED257CE153E4CB67B0BB004936676C181570789D462F0D939E
13F372B7B95C9AFED96A66281EA515B3A6D32F3B50CBAEA95C0ACFAD4156B5FB
23ADF3FAAAE3B74EB36BF691681BF2B830EA2CAD8B88C05C4DB6D83ECEF9A1C0
C3B1961B91ACE7F0391AF0FE9B07CF4083E8D6C472C54286449EB094A5AAB846
AB489E28A995B78EE41E183AD3DDEE526A607BE94425010DDE6B2895A464F19B
E65267FA4888708F6CE0147982D549EE267DB3F9CB31BA66F39268F0A7B52A27
AFB6805FC015D3B0E2C15D0882EAA957B9E25401C36ABC94DC6DB2BD2C1E8A5A
9D6EF0B931CD4E3DDFF0A553A55716ECA82E797FBC97B010ECCB762F7CBC3408
138A75719CCBF635FC6D14201A7C7950BA9A1A4B866E7EA9612AE1A3CCB9CD9A
00AB7269F42237F25B9390AD9A52FD834979017F0821E6DFAE64A9BCCD3C94C9
F21FCBA2477112C98221350EA07C059A6C872D55718454B55139692A9F84D057
FF80FB63D30F836489A24128BC3206CC55D3280441E6F55D55509A8DCF0F6C5B
03848203649D52422ECE35142F05FE83765CAAF1D5601A4D96A7EB28F4881852
5BEA63320AFCBF1FD78B25FC66B0FFE6F6CADB87393A8F22F91E5334BCC41CFB
D6A1FFB71FDA51E719FBD91654FB4C6BC40A048EB79382CC3AB52B0D2921B84C
563DC345F10E5184BC004BFE16075DBCBEB78C12C9D61925D035A651372CCEE8
DB684986D162C003243602E0D06F9F0C54998A09210D16CEF447014B6F5E5505
836149A34D4B686031235B211D6873C5E2CF414280DEB813DDA909C3530D1FEA
5C53F34D4E96D8ED5DACAFDFFF2E451869071EC0873DE9CB54C233A35CF70941
6BCCF0647EAC19ED1172C0F110B5A8068E167B6EAED2361DC33567029C741A79
7CE7E8DC7FF74CDFF6405BE08D98C503FA1DC5C7B6B640B20DCD31C0F17CB5FC
9086A854F0FD9A6E531CB56386C4B09D80F212B53068BF9E02E264AB2A9B1C1A
61CA5C49D0A65377D5CF7F1B722A61734AD6D27E999E7FE1F3946FE8AD724F7C
7A5F2E2D1517796405E4555B9CB033A6CACC48DB821F08A31692C9A328683171
F3A45C42165FD224E9E4CFB5B2D7C08DCB878FE00C7CA6AD99A3A6FF430D5DBB
8B76426FDA28CCCD38BF933DA489B060BB90508A7E55D5603D808862762FF0E6
0F20CA1636029E26D28C58BDBCB4BF5CA0F258AAA17917D3F819617B61A5D1C7
33E5A36AF08BEF3811221590760742B4D7599D21636DB2CECC2EEE109046B46D
D6C6DD66CD6D62C5791A3980D8167DE547C6883C42C78B364AF7837CCAB29482
2549E9DA4168CBD5E20B47DE36B8F961C6402AD389465862711740CEB88417AE
58DCD067F6331E30846CF6ECA1217B4E7AF5531E6F46D3ABE3F8BD63C6D8D3AF
28CD3515A78143F6D0B34BC7FB014C9CD0D253B5723ADAF518BB15BBEE9DDDAB
93EBF6F2EC27459439264E4C8E3A51FCF061B2BD6E5AC054C1D95512FC8190B1
6B2E23E385068446F24652737F8BE9EF14F0A8505E51762FC68BB82483FC9533
E61C68C59B68BF53D8FD1B3B7F93783E254B96FFB80732263F9333B972974DE6
FC31A866D67CF707329FB0CAF7208A989125D9A0491D461271CFCDCB3FBB8D8E
862816387359DB8258A59EA89FC15E3F210A5EEC79FE5C0BF32F64127D557AEA
2331A4FEFA9301C3A82BA3DBE6612E2BFD6E9D98C5786DACD289877994844458
CB9CBA944067315C435DAAC7CB35288A6CA71EBD37823D0F77A9998FABE689E1
6AD11F5F276FE9EDC98BA5B2CD312CC6831A9D418CE254AE10364D2EEF9D7E81
776E16E1BC6E6D9DE91E4259423598F374358421982DD856DE22D41F634A2012
566586C8552127572A7AF0A0D2662EECBBED6B7679B5397AB2E2682D47868EED
F8AEAC8FB1CCE0D2D11A8BAC8B49959BC08B7CD962B2DE1B412461DE84F048A7
384FA2D9DD67813560A21AF721CFEB15EF0D93A0B3352444EA61184CDE034AA6
4CDF720C63F62AEBD1183DFEAF4656AFCE7E6FEF0F9B4837DB5056AD3530FF3D
7B6FB8480EE7DBB11C0E5111B76AAE6DABBF7D27C472B346C93C3F7D76EE1742
34508FAAE2F2FA7C6B6DF0DA8F83B11CE1B0A559B477D59D0465444C0CFC7E3F
6349641993FE130638EC9B8EE01852B83D7B7AF441825ABD849980EBC5E1C4E1
D97616BB51FAB193A404B08FF16850A8ABCAB55EF82162CA6A29AE694364A3EC
0E770E7D663456D3C694CEC95F148C7B3CAC161BE3B913B0B138BFEA2DA18A7E
D25B9B98CE62B95B19F581EC55608E467D17A395B8C0F294D9521CAD2C9F0240
D2322D9010D9346373639C64A6880E48280AB39C62FB8259A69B2C1934BEF6DB
8F89F9DB3B5AEA3C7D269A5BBEF1F57156D6C35BDD25308AC28D0596312661C3
04CF8AF8E8DE902F0F12D8AFDC4FDAAB74FAB8CD0C3D1D7807CFAFBC2E339578
B148113E904E86EF138D723F3C7E7E288B2BFE38C9F1AAF0700EB44F2D7A0438
91C12CAEC2158D4941D4F5044B17F6E4B9C491D4D162B473773463AC285C1B95
6ADEC3579910F591635391B81544B0E7A0E7DF0B6434B1E632B5B746051175EE
719B24C0410F273782FAAC876E6F7DE35640B59D6207DF62D8FEA4FE9FFE51DC
E89AA55AA6142C97D3DD61D5FC35FC1EB2732DE39802BB85DFC732DFD247F477
D94D4E1EBE1A8C1DE1F13D4B5571F17064B8F5F42F0B19B80A9634E150D77C0A
808DB5A978A73AF3AD77F51DCBEA1423E551AF318068911C9E28D4595D3CC057
4B3ECAE8F25334DF7E7331D8CB625B388DD1E56BAFCDAA320BEB54D932B1AEAC
39EE62E8E6564CBC60BF502F76FEAD40B05ACC2C80D97552E206D25143A7E5F2
0352AB74C37F07A8D7F42457FB3E6EC62233581F400B19CFA88B9599532DCF61
C0647D2E22A7F48CC03F753665400D92ADE66F21788FD747393443FF985237CE
CF6C0091A6EE7D0072F8E6E85327D46209AD35270BC12AA9DA687A3190DD9B3B
7B78AA22CC19F53826E16D0E2643D86E73909F0891F574FCEABD643C52137017
B8E12A27A3440BAEF260D6B19F352FB0DD5BECED188942EBAA1F11B2579661CF
5F3B9076F5C79D0578205410994DE797DB26CA64FFFEB5A7A0EE0CD684470469
798A3175C42ACFC11B55EC1EF702A458D0EBCCB94A725EB5D4F4080880D0E61C
4219E62AC79C6357F67E1CB6FB53823B98B8E1B1C60A5BC7E31A5E29589025E1
2F100B93B1276D6BC51F1221813928229281C9A97594DD5CD509BB40C840FDAC
C28E3D21BCE379DDF0E81E64A2CA4F6EE507A1E8338C90BF6CA4BED64AD66E7C
59AA34F3BB3FBFA1E1E49470A6C83950CDA06C50F3EBE640D7AA9940A92EFF22
12E2D840CE335C78311D14E941A6271BF1AEC7822B9BC9F7F1CEC61876FA832C
A9DF555E051B9ACFBF44F2E2057457A2BAF7D3C72D04A83384BFC11441AD4D8D
59B9DC601AB660179945E93FC5A374E75591043D82BF9C142CE0D276AA263855
CAD89BD928C7BD00E251AE04F510247858AE711607D2A817215816BB89893DA3
8ACF2EF5F4904E740C384C66B7530B591D376BB1BF1891D06D8465CA0013D0CD
3B415C991AA0295093E06E391475C246563ACFA1DAFB5955E73E3E60EE0278C8
530D707A32DD8BD265731F84F1E584C7142594EC560DA518F180B8CA50CB66BF
D72B2FBD8AFFE38829DD6D3A37B34EF8D6FEF769833BAEBD200C7B444912012D
E276161A0343C1B4E0BD97F2DAEBF488EEFAF3ED18200C0B26FC6896E2F408B8
407B17BC268535669EBBC2379A137DCF779D72820615AE3A99FD0EF47D68D1FD
9FFAFFAD29091A744A406BB7D2A5EB324A78AEDF4DA91F61A4F2C74256114BC0
47BFFC82DAD0A8CA8984B8E965E4E5A57B2504C1BF96BCD1FA765B4F7E6EF721
E0D46B3930E1080E5ABBB27830E47A576688FED012563D4ACF97DD71F9796BF2
AEE5C62BA2C3E8C5CBCB5DF0F7E290C5E49A3787140A4A4A3521BF399E3A693B
15936E567D1D024394119FDF8E038160D8DBC17A92E2E14949399739DB9A421E
9E2D540D3BE6AC40B34F57AE5028D732AD372603DC39FFEE65267FA38CCE2F35
50A022D8F2758B7A57D762C8C82F4222D2D334DEF9FF5714B2E260B5A0FE3A57
DA54454B5031876F0C7712C9CA52C471D4A444D419208E87F15617C30AAF04CC
3D15545F264CCF71247D338038D5F45A7C980C0365F54AA236CAC15B37B31365
DBF5247C0E8828797613C5716615C4A465CDCA2A08B03C43F01DD7C320ED96AD
2D6CC28620CAC5BE46FEA9A40D65C902E92E00C52CB932807A2C2C99966DF6FE
481D7D965D3940A8E5EAE3B99A3891146F5527775A1A7F849D330EDB6ED5DF5B
58BF6B97C209F4D994998DDE671FCC469EA4EF1A3D2E61B16A095ABFAAA5EC4A
F2327EAC2EF94413B9FFE55746F1D6D83DF4F528394C230EB182FB108F520207
478DC6D93A9A091CB8A96BBB3D4B9B990BF72FB57571A1140B7DDB99E3AF5C45
BE5E270F7CE5F1ACB112BFC046F23AA64AD1DD9A5D23019ED0E196BF5D4B37A2
8338682D376CC53318D0262BFB38DA494C9B71A261354CC7C8D1BBCFDF76A82C
DB033467A4331CEBF916E614FC86CD57B4362FB9B23913DBA55594E24966F596
F8CE1EDE3D2EEA61F85890A9B2CE6F191D25AEBF2CABE4269D41CB14F946C669
7AEB4CCB5357AFE7318BCADFF213F89D205F7601BC75B07935F1C9EB2B57A2D3
82F89116CC4F20556F01BB45B4E2CBB4121F4B7DB8AD5AD2D5F046F28BD489A7
0C23D5E396E3AE0D13A211D8F4364A32915E4DB46CC1A15DC14530341A1C4592
E83895DB5EBA5ADF24B556C0DB6EB186A492C6F9E855C0CD8CA9AB218BCDB49B
23579764211B005B6571A4E38F927C92D34A1F6819FC5EB6937F5E6BA1CE94F8
8DE2D472F357D220FA3596B5F2C49381586B0423E752C184CF3E4997CC57F5D4
483A15463543C5B2A5350B27B8EEF2A8BF1DD1367F000216BF8FA76C32072DCA
2388F410A710638A7904AE1D3FF0DF03217BECF5DAE266AAB07AAB991340234B
9D7E69D0B85E427A254E16286D1DB9261BBC5BC42335FD4CE85DDC4EB7925AA2
3390A1C9F9D13DA6BECEB772ABA2C80B03C59CF6437E17B6B004C1B855AE5C20
09BF6CAA681CD659A739EB5946D245F9DBA35CE41FD838DA5B5ADE407E731D72
654F474544A56EE7939FB209B6BE741633C9B35715DB2EE9BEF922CA0918A31A
E09C69B920E4F1315161485E6AEA060D29EEF6D7AB22A741F42FA5B1196AA7A9
271457DC6C716C34EEE91A2F4455465BD67057E2FEFD1E2DBACB7774C62E0C07
AB71B510B080DDE50E07C4B51E232738F3F027222A1949E0C6CA3E918518AB2F
C7D862ED99D67200DFF251DB7C0BCD39FF5B0356B296B5C25B90D1600403F416
A1423FC3E76DF9DA4A31619E24C73A0724857448CF54B5B2A0B0A363CCC285C0
4D85F82DFC632A3E765AE03C98FED349401BF6FEB02E1CD44ACFF993DA161ADE
C9B187DDDF5569C101F95B164C51C51C2F08A1E3F86C18D9696EFA77FD754E9B
997709EF2231CEF983EC714480D57316F93E061661F6046C82E30000D46F502C
C22F1280EAB7CB17F9050CC471D7F95DB7644B80B4639FA6AD7F9B1C2775A5E2
D3808B276D387BBA6DAFFCE0B047C68C3301F1453B35435ACDF9BDB32513103D
7237399EE3158E7E8497E6FE51A55503C0468136D6CA394BCC98E6AE2121CBA4
24583290A52AF30D02B23DC346AED527C83DE9DFF55BEC2FD6081075844B7BE0
22DB41401055AF47727DA21FE7ED1F9E39965E509A446C9D2D9F1FF8CE4D2DAB
AE5865352CE683524DFFE06A624907D56754B7C576B4BD5D18DB47C1212435B4
D744BC18B7B6A12EA8739D814145796EBE860A0ADF3A29A3E9025B9B13E7AA86
EB473137898042E6FFB05BCB0115C16C2517472D23FE667FFD34B056FFF2E40A
E8088D5C0AB1266C6E442B94B635EF9E15488864120F5EAC9AA01209D6F20A15
02E8DC4130459D6F286BAF319F11D2E07AC0879624DA575BD99FD280492C25EB
FCC3316AEF744A1D0E7A2C014CB3E8FEAAFBF5E6E276E9BD189E562E3D34B5D1
122EE9D61A77F396D66FCE6D7A89AD3F0A224F34E33F1A4503E3417212CCF450
90C63377EE84DC7159C4A92267620125B5CE58E91DF9F56B8268641293248352
35C00E21135DD57AE570912FFB2FA1DBA5FBA7F44760AD88045BF63D3E914F05
C66F0A56B562896F7B639BE43C9031A6FA5E0D277DD5A69524BC8E352C6733FB
014D7F6576F95FF50A7080BEB2116C6E3C3E36E36219B22CEC9798C28AB5C746
2185068E17355BA6B11B69576DDA0EAB6BF65640200B1FD81AD10C9A22BB5062
6F5820C57877522595632E2F43C52973DEA470EF9D03DF15005BFD9B130E4019
F7395EE632575D485206B87F15C4C7D0E21BECA5D2EB673948796B1094BDF7B3
8AD08F385CDDA42BC4773F34BEC55E6445437AED7BA247E8FFE88A87305EB5B9
F11A59875CB78D6096D1D4BA67F0E609F177118145D84672BAFFEA13E8F96473
E7D3230D4A2346BCE82812C99B26436A0273D530F750E69E111F9F776E2FFBB9
7A44B3E3170AAF4D15AA5B47288839D7AA1FA66B6E1A40F7EDD8D9123E474E09
E2653403890B2ABE7EEB5858D388CC52FDFFC663D2E18CEC29852E795B5D259C
D90ABC285CCBAE0A74C88A5519D768BA7F007879C1F211B4538301752A233627
E0245FB4A9E640CFFA1764420EDC8993D8B10D46024AFFDBC67629C4D507B425
C126CD623A967CC7B14EFA6BF743698E486FEA5255C74F6E5EAF5860BD195C1A
2632E9DDD7EDEA6479114885059D43BF21250BC13CCC8DB45207A8EA31A07A64
8F9D00B72A2DA927AF0E05F4C8B4DE4748181A48D03579D2857CA8934E0EDCFC
E26A339C38F58A3221AEF2258CB330F0B1C53FC930C6C8AA7AE7B7A5AC68C97C
9A131E872EE314531202E7A9086011D8F6F957B604EB4B480081887A6F26BDB2
0AF43EB3564DAD1F551D4CAE641F7DC91A7D68DDA6E508C024650970CF6E1BBA
40C33881BB47222EA2DA570EA8DBF2842811457923EA528D384F3CA5DF0384CB
9DAE9AB795D3C3BDA2E3B659BA3E05A662E1389E976461AE8C393FC28D067097
D1A86285F052C3B4F2F6197FD4B0D064B7AE000B986618279CF60652755402DD
A022C2DC420024B2528D9879D68E9A8F79BF8B0A5442E07D56C26B417066AF68
EE3EEDF1D97BD36A3D95F286348E7F835AD480E32AB00EE8DEFDB2863C023839
19E7B46F1B5C9D3A02B543BF2C2E061826824A34BE2B239DA923075947372E6B
81D754482B4B2FE52ECB62DF1328FC143331CDABC379483B9C6A9B2339A8E01D
76320948C8DFFBAAB6146E1BACFF5C850EF2AB4F9654EF7D934568785DF4A0A4
B269BFB25D24E803C54C70C6D6E07834C93FBEEF8EEC5F04C3F70E0E2E70EE15
29D00BF1A23792F76E959A783F9EDFC2558A30FEBC6BA32EE6CF15EB9184A470
0E02FD300DF3B9004C2A0495832137468AB9DEDCBF23D910F74A6160ECE7AE36
4FBAC0B05B2DB3BE35C39D548FDF28845192FD6F0E8128AF7AC4A28C5D3CBB6C
51FC4456DF85F523FB59050A8C99034B3D1A66AFD7CBDA87DB36709C348982BD
64F630D32F71A64F6C3A4D02DF7DDB060BC4F01A8DA7AFFA42839CC7B9D6AA0C
572048FA2E3871A39FFDC19CE76F121ACA2B12CCCAC0085950FB7CA60F7D38FF
4577A1B3C3159621B086CF22ACE8E730E0714FB3DBD1BE0E9A9911DE244874CA
7072A067AB40A8077CD6E3FD7FDE7E7F77012224AB1E0E0813A4B3ABCB00DEE2
7497E57E6F1E01140A296A0DAAAEBFA94F836C46E1369D059ED045EF63992345
EEBE50690D825A1664698A12BBD1C82CCCC41B727552D8AD97708384DD8765EE
11A880C1739E4D3DC25B484429F3DE5614B4FBA5A8A52D3388793571AE964C9D
8EB14B84A46BA1FC1CE67756BD7541AC06681F40C3296334EFE41034DD2B8285
EC293CDD02F5B2847BDA6CEED4A514626C26F052CC279824545F2B5B8A1A5E8E
627F4D979B54A1AF721F3A8C6F939485532D64749346565C2B02CD19767E29DC
21F95459FFD8F1972C4584B552533DFFED1F122A83102152D21308B418C18A8E
7DE49A0FDD19C353FBD1E257488BF51D3E267AFE19F7C94A2D2CDDD9E3270C7D
C040340A74169C3576B745639A6109E169DE24303F513375A39A3F70A6129DD7
828FDE6DD71EA0F3BE9A306FFE40A89606859F8B88CEBFAE96952BB30FEF8811
71C47996BF0638895E4A4EBF2A026CBECBFAFAA034A4090DEF52285593766050
5B3585A2592DFDFD805FF203790A071202F5488334D266F81A26292D2C320A26
E35CF8A1C6CCE46F95E47FEBE53CC9C599A4AA2905A53F9A987E4055FF81E69E
682B090C595BF18B5B63B1812C94A90F95AA9098C2B810213EE9DA4FB60FA432
78927A114B0236DA4136B05A6C08935A02D3D85B0C2376997B69473DBF3E9D88
9143683EF473CDA5D394AE2728EE4A0A9E9E88F2CAC6BEECC76932CEF7115C1A
CCB7CEE27C83D242F4F7B480E89322242EC9F52323DABB8E969A46EBF97500A0
A9F7A7DBC74261042BC903AEEFBBB383756DEE57B24EC40ADA23B790B44E2C2F
F2B686A5A97F893F130B66B45D96DC02FA4FC2E3D6E53CC4B5B0E127E877B797
40F6408F42867170EB37E56F83465C63B09C2EA8FF0E11AF951B2D049D1EDC72
BD4D66AC1068C0A267B8487057BF274F102A159C59E3B9AA171F9B3695BECC50
10036EB75A82D20C274E26B1834AA7120EDD4AF2D61B3DAEA576BC1F4E404FCC
350C4808466F7CDA84AA896D5C98D3D6B15E84F17492C73BDA04E84585BAB2A3
1B477B8EC416C55C850D706857266E4C57DF4152EAC582F934975808B0682F79
E9E395F5CAB8B4F4E278E6208009ACCA6D01C327B0654118B69AB011F6E32085
55ED9109BB3BE7B8B315071C516974579D5819F003CB484A6F210812DA749F3F
562C514BA0DFC9D6DB9BEA184BD9181C5B0604434519EA1BA8054A8F4D6DF48D
7F3A03B1EAF5AA62CAB6D866A43C481F8D7B307579C861ED03CF3C9A4BF62078
8C0705C3F5197C3534BF816D19A0AF19C95ABF833E123E0EF0B5CC9D6318141B
FFEAB7AC77FAA13D033B69EE3EA8DB691930D3BEEF2EDF62BF1FF5532E159C89
327A2F889524983FE2F342C637FC2953D6ED5BC145EC6C9793FD46A564338A19
94A0CB5C31DC26FC76DF727FDACF5FC14D851BC04459442BA45E792163767FFF
EEA41086826C6D27B80B453B67ABF4ECB7A7B92FD37B3D4F6DD76A9B6936482B
5D71EC8F8A87B969DC64DE4A65A3EA649291931F81E884812F67634C4C96367C
F367A3A82638D0B295BE256197362B1C7FFC2AAAAB84E8704B4F387DA4E32FE6
829A855BC719392D1FBAB7BC90643809222985B828939D3F45FB0DD06E874F1D
FE554D1ACE99962D1E77AED1F152B138A6578632BBA4918075715B97A4636B18
66EBDC41AA2963B64A5BA96C90C063E6B50E5DBF6F4D64F4200215F226D1AC1B
AF116937D80454040C6678BEF4E978D75B83068AA15DF328B2D6AFA5F65867C5
3C3F2EB3E57B59A0D6440478134FACBC440EFF964185E227BAF73C7AE4AAD376
33948C97971CB29904B30D3EA1353DA9382E44F112F59D1F6D6D56A91DB84361
D808DB8D90130D3AF01E55645C56323880AB0092CF03E74863EE2FFCED337160
4BA8EEACFE2B69FA9CA69E42C80F2D9DDED111950CD8F2194A5CE7940EC530A6
04421CC97E7B9744BF3243F976A298882376E2736A86F6F495F163CA187EA195
A3EC1E873CB27DDA2BA22946C0ADFF1584BD1D9C478A78EC49
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MathDesign-GM-Regular-Italic-MathItalic-10
%!PS-AdobeFont-1.0: MathDesign-GM-Regular-Italic-MathItalic-10 2.0
%%CreationDate: Thu, 29 Aug 2013 17:18:44
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.0) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign GM Regular Italic MathItalic 10) readonly def
/FamilyName (MathDesign-GM) readonly def
/Weight (Regular) readonly def
/ItalicAngle 16 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-GM-Regular-Italic-MathItalic-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /epsilon put
dup 28 /tau put
dup 32 /psi put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 64 /partialdiff put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {0 -324 946 805} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B1059A708DA99A5BB63426BA
866D138C5AC0DB6A79FDFFD834D5494AEF122660A10E60D0DA75DDC10AE6D23F
263494F22B461015F8BA2A881B70FFADD4514CABB337F801882A6C2D2350B697
4D6989755BF0E59AF550891A091100F00F11A10169F1C504C6CB878E5EB28D7E
820008002B55B2A1A8CCF3DBD526ABA08355473D551648F4587DD2E0C069DC5C
A3BBC31DF3DC2AC84AC5CC7CAABF1366D2B7BD39C2D3BED014EBCD8F052D8C17
1E2C9B56AB803A46E18F22C68D9AEABB382620E27D8E7291DC5B3FA8C96FCA41
E93752E5F0A05F600FB6395ECEF756DE96322E23FE927D548EEA66C3DEFFF2B7
506244B848547C93D17490FDC04BEBBCD3D57FD183CE60E0DF546640D3866022
F2584F1749B614F6A277CEBC396D7CBCF40E807C7C66E6029F10A48B48DEDEB0
0EDBADECABB0B04D5450BF7554A352C36D36F27F09A25495DC84E371E9238C96
6616C53E67905D541D9EBF9A6C3A93D87FB8CBDC663BAA45999A32E525D8C043
6B30C988A087FC1C8A255E3C3CC85173EDE792D429F0D141E1CC49767E3FFD43
AC8EDD4E6DF20600EB7B400F95AC5855B475446B2718358877515AF766275884
CE190796A627FADA1632E1866E6FD0FC23780EF85D3F70AA8803BD56C408B342
88C4509153BE4792FF0034B17696CE425E1ACAB4B1B7A2F19A6B653B11E036F0
871C766A01FD1E3A0ECB21A2B78E7B65092979082552653E885FB17194771049
AD9B99FCA0994D1E896544D955BB507FD6888C7F1ED92C0440D6E5ABC7D1C6E4
26305BA3675F0964A06C24138BE1564272ED738D03F8EBDC9ADCB134DE771B44
C8EE87B4DF6923E2B37E421BC95709CA6B3B79A704292B28328BACA1891C6975
7B39B98D2BE8FB871D91D8A6781F20E17997E03F1F9F5896D8558FC14581CAB7
1B49734C6C9735D40D67EAE2C775A9E06BB5E90AF8B32B1A30C9F792BBF99FA2
1BE259FA007EBA2FC5598792E6234F8F817D83CC8BEE76B614D0B085790DFE42
CE88A5A5C7792D8FC556B61EEA65500D048E919CD6B6BC61A7C773AAB8FFB631
AE325E28DD7294867052D0E38D1B00E5D9A175318E186548E07A8080AC84C167
43F932FE81A07A557CB62D1C8A5A756D4E3A780006A73441F1D380250FEF36EC
639F81570A540DBEAC2A6EEDAFA1F5176DA899F28F7D7D60D5C98EF0D7C1E896
76986E01A32B0D43E777B7005722BB6A148C17399CE6CA9DA03154CA7140F3DD
1B1389A4D05D57707BE3597AF31E22361FC206FC38B76259953C70F12F0AF1FE
0A4CDEE0784B5C3342F5804346C12641F88BFF6C1F1D18D197EECAF91CC51E8A
10F3AED653BD21492783CA84E8B216A2C679EA3B4E5779E919392DA99D6A68E3
C8F825D38FE5116CE8A8CF8152E3CD00C47D96FBFCC378D5D8698B1464612CEF
17770BB2EBAD04D9CCC717708E26BE4B82FC096F83350333E74A25EA69BA76D2
F1AC28FD807B759300059F4F0CECE2D624A0A5EEF76F9CB56059C923D25076A9
86C3DE44AA136390C82E68200B4392F4A251CAA280920CA1C7B5AC13314825E5
E46061D6F03A958E22B052BD6F431A780F4FEC674A1CBC01309EEA9A3447ABB2
DE4679C7678D500AA4BBD958714038C83A4840793BE6CC46C9ED4AA1C7E2F98A
CD8CF5657D631F137DEC2A180E4B0BC1E4848F0BBA839D5F5B9BBEB9A4E7645F
74C0979CFE845B57BC3500A76FE17F27542861BE28CC4FE2BB943ECFEBF98F45
35F971096808A314E56FC0038865D2125E19A38EBD64BEA3B3EA55AD99382FB3
116D1D1790E642129311ACD2F9FFBDF883CE0511D6CABBE9D84F9DBD550B9633
31762519E0DCF2D4046EDF695B62584955B49DB9D49943302EEAA589E27BA454
B3F3DDCEA69B12C5A3668BB7CA0531134AE2D36BDC34BB6679F577C15941AD72
F6893EEA9E268271043F83C6A627889090ED629A87C033A5478D36823DFACC1B
706BC9439B0AC1D291ECFCD39394802ADAC938D89CC3C3EE7B1E337F12B955E6
2A9DF57A4C0EE6FC7FC6B4AFD951D3E550BA6D364F54C44F298E2158CB353EE9
EB122BAD14EB01F045D4B4AE88783207C96C49566B9DA21CEDE85CF5F4605A66
D92A945B10011C18B309542D178D0754F6141962C77DB8C804F245AB159F904B
DE03476E7D9C606753EDE783EE795E8D44E076D577533F9C48FCFF2C62954561
27FF11EDDF8F492A7787257C6036EFF5BA7330C468FBE614D993840CCEB5CC4B
DC48A416EAE757E515DFC11C80C2196A37BE5983D1629A8167EA4BB63C9E9685
8CE69AF7CF30EAF20FE36AD51BCA0AE6D57162A4DFF5B27E68352C47A7F4CCAB
7BCF0D5966106626727522594892350AD7E993A5164A3BEAAAAB67F4F5B6F79C
23709B55CF6D427F02BBEDB4DEFD8B3B39D0E45AEE87E30C98F1FE1F4167D6D6
A3EEC8A62657C4FAA82C5120B36F66B105455221AB5B3C8A312FF6B27CBFD9D6
E11CD404B5162675A639A42BE2F1CC85999384DFAFC01905BF73BF799D2B65F3
EE60CB88A683CB0C8DD54F57D71BD449C468F6EBD1C83B06E0BCF3DE885A8F0A
1669296EF1DA351745F1A4D433F808DD92AE3CE7F26B49DF7F5B9370B0E3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MathDesign-GM-Medium-OT1-10
%!PS-AdobeFont-1.0: MathDesign-GM-Medium-OT1-10 2.0
%%CreationDate: Thu, 29 Aug 2013 17:19:21
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.0) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign GM Medium OT1 10) readonly def
/FamilyName (MathDesign-GM) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-GM-Medium-OT1-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 8 /Phi put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {-10 -491 948 799} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B232BE98F00D49FA957E011D
0CAD577504BD636ABCA85FF3625615F3DF11DD8ACFC86E074523B2BFF6E7B1CA
3A38D0CFECCBC4AE871855DE3E86BF98F1A646808D1E8C88A407340CD09AFA84
43B83DAA0E857F0A0284F227535F5D6E398F85F6FF7CC14B85598F91BEADA9F5
32642CDE2FA61277F244C4FB2F5ECA8F75EABE5DA8820AE2A7B30F0E53062B73
086DCC285F253C366B1E416BFF40C617E505D9F8B3F549EC5FD13A16A1B4C633
EB75B332C341BA3F52CF5E37D7803F122F689D0926598996E04591E5E34797F6
47DB9D600D451B0040BEC05A57740EBD25AC3D51ACB2A3CA5FA0F2A4A3580935
45CEB4B288C3BE47D4DEA3114029FB96704BCA25FFE2CAD0236BA2E7AEE8FF11
8D9FA343F11E7B77FEBBBA0163CA2EE5EF6EB88FC6C4507678E04E8C7A9631A2
FBA83644021EBF5F8147637CDD08442BEE419C978615E8E2FCF7D95BCFC85DC6
E591F8F14ECD7076467ABBB410652233CF394D64249C200686661E7C1FBD2B41
ECF2B44A126A6DC2303B9E46DB9DEC54FA0B6102FC1C2CC7BDE65497895BFBED
0114EAF03D26E9B21904FC76A6461E61ACA4316DB08A11E6CC7C42D5BA219E82
EE5BF75BD64E7D0A409085291D8474A308D34C530726AD6AE5ADBBC9BCEA9F78
AD60B772A59B125113763FFF1439BF600EED2CBBB88A5CD3E36EE51528EF044C
F9EE4DF9CFF3A63F44A0DC2A9FC1CD254E2E92CBD93454442715ED8C9A1C5EA1
A3D73A8D200CAF56DC73259351AB173CF367299881CCC27A699D80818ACF0161
A06745AB58B0CE112C03467A7C34F002AF799988DDB99EE8E60EC08366701BC3
9433FF93B6A5A34EBA0B88A7AA9EDB51E57BC4213062186F1ADD67FDC2312137
0C45EF34FFA961109A8D3A09F38B84518A2B68B2AF04811E29517D6224ACBF00
0A369E36A529C52DD5779F88ABE31D493DA7F41774EADD6E0378A1F7D1A2D1B5
4DD3063FB3F07F6BC82C6C0F0067967A1A30931BB98745EF824044474894D545
294EED7C1E74E5D54E5B286F3A7155A83360304F54BD7F27A96CE75BC0580F75
B3BC000D62218A713A914262E1E871889B742CCC15BE344F13344FD1E297359F
C6C232C77D5E8494190248CA1714E6FFD17037A69B3E6D5E804D1463EDFD8E4C
D043E998CBD88DC5D8A8D1856D3B8C58B350859C258750E63EA60AFF8BC468F8
3CEACFD7D95B37CCA827ADDDF898333BC635D3992D65F9BC542695FA94560D63
B1C1ABDFC7586EBDC84C927DCC67F147E952DAF3B42D02350CAD5DE91E82C650
DC17343F24C02FCE0D80942FD6C8CFAE55A94A5E36BC33E37C81E6C702ED9C26
132AF81EC03498A3A188CCF3B23DA95BE5433C5BFD82025401D6EC3D49EC2285
68F386810B61C55F4DFB7C698A25316994232441A862042503D0A795524F6E79
DD5ED6FC7D776EE2FCA7825AF486DC2C4298916A2A4783EE2CCAC1565015809F
DAF159B897848FBBDB78668A9DB67EB63D933A5002B4366FF0EC7BC99FBA277F
C818D71281851D8CB13DE0917DAAAC2BF263D5371B415504ED207DE5A578314E
51588B443F815DC954D5A29F9C9B4CC778
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: GaramondNo8-MedIta
%!PS-AdobeFont-1.0: GaramondNo8-MedIta 1.05
%%CreationDate: Mon Sep 6 2004
% Copyright (URW)++,Copyright 2000 by (URW)++ Design & Development
% (URW)++,Copyright 2000 by (URW)++ Design & Development
11 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 2000 by (URW)++ Design & Development) readonly def
/Copyright (Copyright (URW)++,Copyright 2000 by (URW)++ Design & Development) readonly def
/FullName (GaramondNo8 Medium Italic) readonly def
/FamilyName (GaramondNo8) readonly def
/Weight (Medium) readonly def
/ItalicAngle -16.0 def
/isFixedPitch false def
/UnderlinePosition -225 def
/UnderlineThickness 51 def
end readonly def
/FontName /GaramondNo8-MedIta def
/PaintType 0 def
/FontBBox {-214 -270 1101 956} readonly def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3EAB2EFE52DD47DCC4DD4BE3C22A330F
DFA9B00D3596BD6A95E0B06D7ECB6647107D95176A598A691B1B38EA85409036
829137ACCCE25F36C6925EEB27F123D14AF9406E7AB14E4CCE46595EEA4F5024
F98B237F1C514FCE9CA91D18F7BE739509E268CFAC903DBD11D6B2C66054B6B7
C170AC1A0857EFBB5F59916D30BFEE72B98DB8ADF20576170269B59E7450D93E
F6FE63A8580A4AF1197A8A863267262247ACB8F2526B6FFE0DBE875FA4043B91
CBF3F7B3FB55EE7CF95DC8EAF45EBF972B2F7642C9C1300242A3D05FAD9635F4
E28519B58D663D6546BAE1FC76DB5088DE8DC6DC9D7FCD722DEC737167CCB66C
3DCEB3813FE76147E22898EBC211325A4D86A131810E39D3DD00941C9DD324E5
C49F74667FDBA11DB9D9ADD91AA4A72F5570ED1BA346ADDD1425A1AAED636DA3
39E219B1134A340C7113369F035567388952435C81DB15BFF497712DEFD9B2F2
1CF0F827F62AEB5BCE858F9234A03B0AD9E657FFE38CB42FA288B2E7C43AC8FA
6620A56FF1C8BF47052B0080466AEDB06E3042D1B21042D0C63C4211A659A927
3862A1347A7D09410F9FE2E273506881DA5E4B2C99A95697A257316520536722
EF635439C2AB87F2BF92C677DF52FBE5089F14870FF0F4FE9B9EBD07397C3672
1FFB2A1CB178047364F05FF2C5835D95868EDB85B3F46A43170B5DFD426ECED4
80E897228B0DCBC4962D7DFA76D1ADBAFBDE0DE998A6CD94FCC3B8F402E498D9
0137760AA375EA09DE30249A0AAFDC2F891D01B6667999A51BC0744C2D13743A
278393F87467F45B015EAB860FDBDB9E2226AEC3AEF868035D0050C7F9835E61
BEF6ECE9B8E82FB9A7F88FB50D1FFA8A013D67A730CC2517F8F2615D1A2A34F8
3159A014379FCD04BE4AD5FA0269F56D37A1054E951DB1EE018015FE513F8FBE
92ABC935B462B0FF04584EC6C7319FDE9459A88A510764A8F74E81FC646BA908
295033801105A77651F11807519B6040E1AFDB3F8B4323A000E06E0195E9D55D
8B2CF2EDE51F8138A41D53A32B5238B61A4A3DA50DEBAB31ADC5E20D30F30C70
B65E26875CE8DCF4C788F032A0AB5F2ADFF816D65619DB1D9DAA06ADBE7FA06C
A06033F543ED44CA2702A5374368C306ABE140AFAA87D26A57933BB6EC058698
FE32291CF611A0F4AE5AA2409548C3FA691051689741CF3E4A01E9C07887EB84
556F43AEDEA439FBF139A16A55342714538354E3EEA58F730A0094DEDDDC4A18
67AE2BE50B6D68148DE8830830C374D6FD6BC149DE1D1FA21EA53D617553D5C5
7CB1722553E997ABE85A338248089393FCA362BC59A995FE5430B39CB5EC916B
7233EBEE9A9CAB9E821B14F1A928C7C6A510E07D9A75E9F4A9B9B4F7CBEE39D1
269CF59563CB403336D5ED3EB0D1224008C783B8EA42146154259263EE074B5A
824C989F813C3BD94230C074F4F75545A46784BE9BDFD1AA0B275D626CBB9146
855D0C7A42454071E18BF921FC713FCFE6C7205A2941F1E48A71BAA2B7FC65BA
E0898218920EA78FC391A8530FFA92026C79AC276D5AF95C5B7928025D403D95
18B481FEDCBD97BA05958478516510F607A4139FF20EAA6FAD50724816D76FE6
8560F1D5B1A01C9D57853580E6F180343DA29EB6D4908698A66A0CF1DBB35482
658BB9D32B03BE83E191E0A87842D60CB4A26A706440E79F43310E4B9C2EDEB2
10D9D9951D3AAD05E9141A2A2B369D0F7DBDE3F537335996917E4A016C5B0D77
A277EE5A0BA86B250C9DF0DC2C3746BDDC39F1AE04D2E173B080DD050FC4AA83
98D72E2651B7E4C955607CE1B1F5B1800A27F3F730819EAC5FA15D4CC6CE9D64
9FA991943BDBF66C0AD21182935B9F6428D10FB47BD327A0077445CDB87E2F35
EABD74CCA2B9BFB123EFB6C425B64C93491337EF6BA465DAC7EC07F731E0BB8C
7C8ED352E0A1E6DE79234986AFF04FF03C1DB4D1F2D9F60CF2E4DC5DAD2C55C5
ADC3F4798C3EF4A56D79AA6C5EBEB45D3AF32A9EC04E63E90381E3A52638877B
18EC6582059C02BFC7D6BF5C653FFC1EFEF8C0967AD886D051CE75B91F07408F
C790D933E2773A6A3C584457B1565FE02C414A7BC5A29688E833A340237E6A73
50C050921856893E9ADD2BD5FC05D3BD77DA90A733DF8E98FBB11D8217D0E58F
C9ED82BF46CAA6DB62C207FBA7E7D0E7AAAA4A5EF425A6A412DBD0F20CDB4D1D
A9E54AAA3F4F7FF9FF20D50D96B41727A72FF76E7DE651DE14AEAFE0ABCC95E0
E08A723F6E80F10D4754D067FC40C330C361A3E43BE637B70B9966664E12EF47
07F6B105A67DAB38EA66E305A8046E2428CAFCE7E6EB689A0EB8CF6FB4226A49
08FC091FFAAB28E9BD7E6F53C0838F1928EF19539813DF686F54832003E5688E
208068F779C2A6B60DFAD490E35D8D07C0A1D1E80A91B190493C3E113F7F0D00
B0C41F617D1E75F9FFBAC6391EE3EFEAA24DE1BE94BB27F85B0C8BE3ED8F1783
C4207CCC673FAFA4504EEC448C29A8F93B36FA63BA313EB5283B8226D02B1BEF
02282E4D5FE171B762272289249587E2295BD4748871D5A349370AA3F656B45B
5A330D30F871E16F52290B1D877C6381D1B21393E032BC6E28F91A54F29EB0FE
77777DBFFEF862CC94CE867934B6BC18A86723F8B65DA55510015611FCEA5600
3D16A6529971CBCB06166030EEF983EF33249751128AB7070E2DEDD1593FB0DC
DB5087484584C2F735693DA2B7BCCB72D6E2DD788C45B1719B1A803034812C9C
927274A732813A49A473EDB7E9886B6C45605685E8E1FC171337AC5E8807FDC9
766DC49DB36DF165E91EBF1370D637D76C3E3EF6962EB9294FA639F84248D2B6
4EB4749884F96854C277C63649A9845BBFD1CAC5EC700489CAC908D6F1E24766
4ADABB2B6DDD4DCD0C0A15769A52588647510A48CC6E0EFA905AD6481E3D0691
10D2452AACF63BFC4A5D0243083FF2EAE5F2606A96BFF33DCF1124A4E0DF0612
6E587E8F5ED4F6292C9981B84E4D303952C301D4FC85676D82530CA8ABBC66F5
CB056A88A3E2D04DFBE0E746C1915B6A771A21EAB25C87FAFE044CE17F726259
60EF2FA838F2F7DDD758D466939A23D7A779E813657B78B7EED0F8498FA73EC9
1D432A15993A4D37BAEF27F403EBA7BAC17DF0C8EE88C508D30C7DB7017BEF93
A6640D1BD1A3779B1D7CD4882F55258C57D4A8367D82EF814BD6E89D2B7E139C
4371DBF46D0F06053DF9D12BF3C5868D736224120CC5E432226FBD4681AFB83A
9E85CE39C88D04EC033C9F923DBBAA571FFCBE6538892DCEE8AA19541356EF2F
1D0008DABB6CB0711A66D62EC5174794ACD823CA8A11685EC1805573C3D6A9EF
2F6701C1BBB902FB248B8FFE8BA4312F68701051FD2842262F0331241D8749A0
DAFDFFA1D9DAC1E81C2E068DB170A8D4D179CE6F52E760E6AF86E00005AD39D1
A6FDBE5B3D84B6961C17E25DC8FED3354B4BCE41967075B7CEDE355712CD7A95
A1677E03E89E38C8C3F927754B3E4F26AF1DF850CFD7F0DE7F09D3B2C3E8B8E7
4D12CC832F75C13B4FE866CA39EFB698F0241A6F5B5547BFB3BB1112A482D252
4259EAD82E2494B65668EA38BC28A5D941ADBBC507F613C8E9D2E4E992958950
30FE5378B1771E083E0AB7588C7D1ECEA4ABFBF35556AF4A7F3410A17743CDE1
6BE0E72654C5F5C33C7206F311394436E7398FB35C5169A51A1CB2E2A0FB6EBA
1497F7237AADD3087A6D947BB81D9C8E4373B7D07BABFB9AFBB1F70E504D4BB8
B551822C339CDDCFD3DCDD6E7EA3FF0C577F6C3BE67587BDD5899A72C6CCFC5B
2183BDD1A732C99CE6AA0B16F9D76D5DDC8E6A83DB1A5C2653F604FD44208DC9
9A4B8CEA5E40E0EEE168A7BD767F329BE26D30FE0A991405FFB5E1A9B4879DBC
AEAF9386E9C533874BF86EEFE76049C1564A76AB4A028EFAF9CF215739ABA8AA
EBEA17E552D0D3600626D4DE919A9EA1FF7EE962A55AD8F59B12BE990E9FAC17
44A6877BC1B9FDCD6C4F782E8820FBEE6AE3A8EE2E009E788D5245E86BB79981
F6A6A6141838A89D3BD276339CD5A247B5A678BE4A44C8332DD83E6F9B96A873
D910B1ADA12C764E0B6B984498E71AE7CE8B393C770BF3878329BD58A3EC021E
DFB03B3BDCC906C103B344FC1B9F616D9A607DD5E24213FFEAA9F896D60A8C68
D1106907D7151758E6B56D75D830AD2863A9847A5320183E37BD3507B09AE16F
B1867F50EBFD49F5A095DB2D1B4161470CED9961BB7DEC7816C6C259F796FA31
D28651334FAA993E7B59D0A9EAAE5EF67925E38933E42F883D43C7597733DFED
8D138894B6CF43AB225601AAFDB0E55897BAD5C7E424B4B11D26F447F14E5DE9
6B848AA3A275D301B65F4A51C046C686398BCABF9FE916C8DC0E9F7F6893C4CF
4EC6B3DC1C56D98D87F154963C7DA70967B0E32C0E76D2BD2CBB73C3B75711F6
8C4E12D8DEF76844154FE670626CBCDD71E43D1D64553064DFE3E784E118B5FA
09571782CEA1E6D3099446FAC003A9AAD42C4DB3F25392BB9458693C4499E339
4324F8CCCFD72118C09451895364B3B48EEC023228026F149C6D47A31E4020A1
8B7E71D756EF15A515CAFE3DEEFC067EDA5D4BD5DEBCAE482A2EA258FDB72A14
E3F8D5C69B2A77AF94BC5BA603B8DF64EA7937560A952E3B779305A098653B21
3717BA4036C263CECFE2B0B82CD71A99CD9C2631E42E8A7452545D0AAB834489
BC72D947CF7D4E3C1BEF6446975C97B8E593880DD111FE8FA8C042CF14D2FB78
48FF57A59DA5328033D50202B7D8B1F0FDC9EEC56F0A3EDC1B864989659FF7DD
9ADDBE08E467BA04E62F34944D27A709AEDEC5BA7AE2BAFB1F1EE275965CC7DC
4433FEFCCA8B69D353D59B84CC99CD6E4AA3FC9FBA4D715BDA7D07053300F9C8
46D6303E71757A8D90336F0CDF73FA7430BE8C74CEF7752622937BA257702CB4
278C9583BD172B24394D6002BD67891347CA825BCD7FEEBA7E44C660488E3B50
1543BD1F8F76A0824F95E58F3859E9CA1C95C68EC41FC936E3BE3743DC9E1F34
16EE103CCCECBC7B7D28E79EB6C2B8FE0B769097D3E49BCDE2321BAAEF898DEF
E0134C29C1E25039E8E815E30122FB25B5EC014B7623061B18A9C5488026B974
6D5E3305A453F6053C62F39EAA17356532964B0F405FE55B5A01FB92E9733C7F
C2D9AD5C5B3E1B2F361598EF607BE11D60847A286F6D9BCD248B57B789837489
A25DC334980B180F6535CBD77C84126B2680B84E100BF660048A6F86F3648DCD
EA91AC34844298C80897A0D0F462010CF35D3BFA662911D6DF52DF9F97D8944B
F53C75B1F6774CAF40E839385136B478F3CA004620D7496A7EA0241D730F8E46
484A3869FCBBD7D8DB1940075799346FD5AAB61951C3DA2A69584C68EAF1544E
B2E6E5EE22A57B94F22A6A2EBD34253D33A1C8C55E229AFD96D46A609DDD9F0A
BF21592B364186BD6590D6F03A4C0DF5BA42EFCB874A42DCA99A4A5726474367
25423DA491D5CA30F7C589DFC5F2D44BBEBF3EAA07D211FBD71A28DAF52C3A3B
8856CD73CFF9AF1A780E2EF00208787EA2CA291683FFDBAE549A9D225505BF1B
FE7BB5A3D9E0CED28E6D50959F71CB74F31E0CC918CCC3A15EE86EB22AE665A0
3E282533F54DE1238D67B3E6AC9C996A67D046491A6B498E7554BDF20142875F
567FA40C228C4C720AAFC64EB72CC61C52AD25ACDDC9946B982379A0DD8B5D41
19330F307680FB2E42F936E0B4A2117097257F6755F191EC4E4BD43ED468A435
06B28E2FD77499B8915EE34AED8F954B2249274D1706516D0F87B65B99122B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MathDesign-GM-Regular-MathItalic-10
%!PS-AdobeFont-1.0: MathDesign-GM-Regular-MathItalic-10 2.0
%%CreationDate: Thu, 29 Aug 2013 17:18:42
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.0) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign GM Regular MathItalic 10) readonly def
/FamilyName (MathDesign-GM) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-GM-Regular-MathItalic-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /Delta put
dup 6 /Sigma put
dup 10 /Omega put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {0 -317 939 797} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B1059A708DA99A5FEF54076E
8D9026757D0F7E793223AE39AF5DF960A53D81AAF2A83425A9F37BF896F83EFA
DF884EB3F5C6015EF02859B405F506AB15FC2282B07F490A4E029DBFCCE2ECB6
59E9B1D1AE61A08595E7004528E24024F1394DD1A7CB56FCB89325B9A85A2A25
10DF5C755A9FDBD98CCD7B3D9083F83D6F5311EF79AB13DBFFF65E2F0109E224
5CE1BD468C52EDA46FD15C6B121A2690406B952F9BD8F8838832AB8CCDFC9805
C556FB6B23273465D43834D2DFC85AF665C0FA0D69E48399C99776628B96CACF
AA27A61AC602F510B1D87352082E6DB56AE412FA9EF1191BE06236C75D96345D
BD6048FDA3BCE4EB632995A925B63D9B98CF9F7E86D7F0D53EB60678BD5A1F7C
FEC9923AF685B85C02D9D64344208444F95AD4E6B84EB6FC21E399D6E979E306
1D095F0DF25CD158E4B1F24A6FAA45E2099983B01F9704BD933C5C28CA8C3406
C28384EBE0A536D4ED4E8350431915FCD274075E816F416C62F185239358644F
D1A18143FCC5DCB965E4E3703D624FDCBCD3EA00A2D712933238F68F8EBB74A3
58AEA77E872E616D6CC55779A1112431C41FF1E95C909D707CF9F1EFCE84C952
60F3FA5F2150C851D053E588E7CF09B3764960F55FB27DE1A7747DB94E59ADD9
3DDFD189E6965D7C5393C70115FAE97A5289F9F0E6D3CA800754DC5685564681
F5AFCD7D0039D862308B7376F7A7C6F6FF275D09F9C7F7A03086298A8FD8096B
16EA3EA6FDD336088D07980BB85F2627FC9DD99EEC8C2E9FE745AEC19E85D58A
546234321980A39EB431AD0AD67421E014C4C319389C656ECFE0972BBCC0EC12
694D352E5AA7E2C577B2693D598D906A1C6ACA13E5B32FFE023E0F7DB735B9C8
95E9AACA3766430573474F04E6D4C8D3B63A58F1E8CBE38333BE3959067AFA7C
A93E4EAFD485D5469A45AA2C5EA9C22812F055B1D6E9C29C2E65C25AF6E8C1FA
3E30A7B443F7FF07021F46ECC0AA30CCC67D2C0C0CBCCB4E8949AA8C79FEE6AC
FF8567327FCE6E1CEF9FBED678FFE181B949B86A2F01EEEBE241E7C7DA1E413E
15122074EEB735CD1C98201F895AB968A18F830A83BDDEC09B80F36C49216B52
C1A6056ADAC11580FF0E60A98B8E9BA985B3567C3FC119A57EAB2DD6D96EBB87
601DEBE79B3715AD94B31A863B302B7B3CDD1A81DE04E95F88CEF4EE006E15C4
0D79B1B47657AF8EEA2841C5D1C5F832D4007CD376CF76EC984731A292EA29A1
A6938F1BBF331D5412A9164D516BC5B20D0D9FDEEC1999FD743CE88420BE5D94
6A176FEA870518295EFFE5EFB252F5F1E1A58C3EF5075E065D41C13AC62536D0
B2AADA18E80AA60942D84152BF26EFDEE137FF8259B56772CD1132A9D0210543
C385351B893BF13D02A5ECB1A483ED40E46D10BDA7760CEC8370DB44CA3F02AB
172AF0DBE66BD933BFA9BC3E9AB970CD83318271C392B89097D8E00C8D375B21
F539EE502108D2112CFFCE58625ECFD0872E0949BF616A02ADE79A78352000FF
E64CFE877621EA6DEED35349931487CBE64FD59B84CF98B7B5A429CEBBE98FF3
3403DA92B44AEA793673DB8A7257C9894029C3E8EE68810EE35D361BA3B33EC3
9C5E4503E86E0CFF75BDFD5B8B63E516308480D5F5C55D39AF2E05B51904372E
BE68DFA01894B84BBFD83F0C52CC9E11F6D5EE1BB436922B3029DBD79D4DA14F
EC280DCFB4821F461B4B1045DB196544503DC3E0ADF7EF5A135FDE7D9C76E0BC
FCCAFD4D10D625AC50D94AC71CC9F7F39A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: GaramondNo8-Med
%!PS-AdobeFont-1.0: GaramondNo8-Med 1.05
%%CreationDate: Mon Sep 6 2004
% Copyright (URW)++,Copyright 2000 by (URW)++ Design & Development
% (URW)++,Copyright 2000 by (URW)++ Design & Development
11 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 2000 by (URW)++ Design & Development) readonly def
/Copyright (Copyright (URW)++,Copyright 2000 by (URW)++ Design & Development) readonly def
/FullName (GaramondNo8 Medium) readonly def
/FamilyName (GaramondNo8) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -225 def
/UnderlineThickness 51 def
end readonly def
/FontName /GaramondNo8-Med def
/PaintType 0 def
/FontBBox {-140 -269 1105 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3EAB2EFE52DD4540C590D29BFB01053B
FD27E0680DA7AEFC7664296DAD6F6188324347C8E0D0D0DFCFBAF0B16F726182
113F7E035345C2DCD1DB6321A7EB6CE665C47B70CE0B45F9894F0C38128EE649
C0AB9BFDDC8B900835A72A3AA150FA5CB69F9CAFB593A3F01133B447C57C08C7
56513C254D9D52E29F5036CEF80D8A588B8369EEAFA3B05BBB9723D25C0AFF94
082B86B63CFCB7085CC4EA3C55602905CA1714E6FF9AC5CB63761209C7636A5F
7C00EB38733F233C9AECBCD98B6AB42ADF9FC4539996A004A599D39DDE40191A
40F703D28FDB52C1D61420D1D4A609A4B277158FD8D4A991AC982DD61B48F6BE
E92E384B0F9F6F6476B593E7D9A7E29290B12A49595FFB02C93E88E738196B68
9F1A42BCC17E147B7399BA91681A2144368BAA940B41B233BE13228990AD40E5
6805453A777F08B54831B1153A5C1CCCC683F27FE26A94A422379E6F1544CF36
AC8916A110F3BC6DDF5E5F91F5937A65BCEB6BC6BB77310A590DE2994D49D060
83C1693A873D1225D1BB2BC634612A33538005464D7021F521F8D694A7EBB7E5
EEBC3B70E1687F4BC646B393BEE51F2B974828F59BED5B8E373FBB5BA8827594
BD0A34E6F0E6C56A5C9ED514D915733F2CE29928EF571A68EDBCCAF0E64FECF9
2A59D3DBC754596399C04A18E569A4007DE932260EAB6EAE6D435BA637C2CA00
EBAC96F25F05131677D73D52A9BAEC420FBF9E57BF381FB92038AFEB9F50401F
8EB0EDDDBC5101166E6804A02972D1466D79C031D7210C35B3C20DF33E5F7A4C
82A3E411FEEAFEB9671C95F8B44C2279495F646A4D282E5AB36AA1385F218BBE
3E8BDD256347D3D1EFC31AACB8378A8A17DC0BF1CAC330150C6C0A6512ADF240
19726F091D076E26F165DBCD39EDA7F1CB94F4CF33B9BF6ADA94C92B05D07B7C
98C4D86A4B76475A590AA0AC0F11A0651A6E0A1E73C0EBCD0285DB25AA9C7325
87341A1E3133CB2281C541602D10670C8E5AEEC95900389022903F85D515DA82
4EAC256CB29F2E26C90A2C0FFB9E1B4CB7D5CF3679AE6F65A569D90F4957FE23
B9B708548BE83E28CC18D951015A5F64283DB8A08F6C1B0B323E6E9FC22D2161
A4D954ECC526C6062E5660ECDACFB717E19EC24C85B2DB6C2BD4FA8253503494
BD005F5525713697DCACC58AB10F70FFFFAC8C78EFF0F908FA1FD0A20C8209FD
C6383DE7D15172A57155C6ED51068DFA0EE4CE4A3741CFC613848926E42652FE
D4D72B937843685E7102C9F78CD0476E53171DF0417F99C38DC9632B2EAE1D30
0BCFE15146FCC22AEA6EAE2B216126F0D4F291E0BB1A9D79686EEB6F99CCABD5
C3EE7287DC61071DE254CF21F2FF3373B809AC213909D6D65D9F18F0BBA92158
C3CD36EE89D88A0439E0E8AE43B43F0B42EB500B32ED3ED63F3F692F85B85603
C8A0F37E55A68C81C586646D0C4195D3F00981B8294CC06FD8B594A015BF26D1
5411CD48CCECFBE51272044D3EF2EBC1C948D37E631618F48D633EDB9D1964A9
47E0A1C2BE7CCC8D0FE81603260D450292EC16DAA856F51BFE1969E6319C551E
AE386456AD8C5D6DF6453A75C5C7C8BAD8F4DA1AEDEC773D5D26B30B411EE46E
679F57A1103E30286D799059E9B95E8434F2B7FB959617AFD58A54622A003350
31B8575DDAB8AF9358FC41BCAFCFA452C111CE564CEE3D4831836B5D7284B8EC
38360CA8B5AEC381186F39ABF5F9FC108CD9C515849187F2910A3515E5BE0425
33CD81A308BE84BB134FD6F15A5A9ACDCA7884F670C92B3E83873AA9E5FF2F93
0AF1B361E2AE96364C63454217CB82BA0F84EE19688EE93E584848C6CDF9EF62
889F5A5BD53F55D086CFED5A031164D5DFD66F262A21B9300EE0CA72D518733F
FB69E2A04896583DD9F3B9309B62AF4FDE7FA974DFB390317A8F1B09FF4C9FCB
A4F4DB91DC6CCAE5E55486FFBDA6B764F66CE61D14558FB93090D2634811AB51
4316D65B6FCF601E64CC996591ECBE650E486A7B9EC00A07E25B7ABFF7C55B5B
153B7E1D0646F695C95E9A39346F11BB9503CFA4F97038266A4F2197B6D41F7F
B536176944B7965905A58D195FFA8FE5147D1554675CD0EA94A6385BC9C3668E
767965F0517858C28A24FC430237287AD77F1645EFCF7B2B6CC8B0F61D4E3D5B
459AEE9906540BE0E00619F9A30157B2B7870AE7F5774E26ACA75CEFF80B278D
6726BCF115DA15343F631CE56D4E754A225FEA2AEE3D0A2843629E2B8B0FC5B2
B1E296511A4986CCFF7FB7F79FE1377F547C9C10E5C0FF4D0C82722A993F7FAF
3F61590411611D882F6C3BC2D58E281A67ACAFD19B7D4DFFD81DEF5B751D3B44
CB6DD0548F0592C934FF2AC5B6D7F12BCE4652134C91CC1C70E3D326612EBF72
7766E59A3EB7194FD9F3E4EAF4235BB91E9ABAD4E9F4546FF9A0ED2085096C79
C90821098733DA128331F2715D093DFEDF6F2FA71065F4FA0F29DD26AE170F9D
8D5C30D8A0AEA2125924DC504985AA22FC24BB9221C5BA9BCB238CCA171CA1F4
B1041AC9E55516479334601F72DC10DC0AF2EE31FB9C671D925779AEFA1F1843
DCA9D3849D559B5DBAD91EF8473486F7C1421ED978AD4C9E1AECF3A68DAE69AE
FD6AB0749642DFE50D5357E57CD8F5588D80411396E267DA4FEF837B47462724
6FA350B1D86ADF16CABD4244A400CF8B83ECE850B2B0577769D9A3FBAE9FFF93
9BD527B7FC9C83C552EF158D8E3C62DA698BA0D13DBDEE13D2A7444016A19113
3F19A88B657199E45F83A7B7BFDD81FF2247E4413F7BE2B6BD070EDBEA1D0E01
10E429744B45DF03A1D4267E807AFCE274D8829CFB026CD35ACBD9E0084A4B11
7A591C13055A2091DFCF9C51F2ECEEAA27DB30878A978AB486B402F14CB8BF3D
5F6B39FC0A6E9E8A442DE49C2EE114A8BDC93D400FF67A8CA38776AEF1D0799F
330C89573E2412F53D846BB7D73551EE33D214D39412100AB11746A2053EFEED
A97451BFAE0EAE52B2968A4727E0288E02FA8A0A6DDD17E49F3FD8A4D70DCB2D
7463CDCC11C2E2B6A046B30486971398C4810258AE75843EEC7B5DA65FC51130
28F5CA15C2FF5F9528F185FCCF89BC0778B174A9FB4F5872BE9544EEE26C6577
104F6CD1E56B59747A1FDFE7AE75FBCB65B62AA0F5E525C03402B8AF7F49C00D
5E266D3F7777536C0086C730D91093F42EB0554BE826A2F95A9869D3B64C7C2F
FA658BB21E8FAC70D8E3823E3587184411815707D016DF2EFB584ADF8F82E270
D23A90373C889D89D948BE347FB9399A53FFF0065CBB51A3A16DE4B7D23F29D5
FACE40BDF7F9B0714AB9E6E655AFE2AE40360422F59F50625FAE9DD08A8BB3C3
9D282B7BF3E2E3C1E93F0E88DC65E5264BC96396BA0413FC36CDD21837ED59A4
3AB87815C6A776949DDDDBFA9290659DD7AF69B2F9DCD463E9ABE035F2A19ADA
E81BAAE84AABD942BC651529AD98660F8D9620B751B8BFA6F7DDD1138FCD3D81
330D08A5581F9F2922046860D0BAABB431696F41332EC58DCAC78480D3D9FA13
E2CDCE60BE449A1D964E14685ACD81A55ECF5F7E0A4C9634B1B39789E9287B23
7DF4EAE0286E801FDD83FFDA174C5B6714F0317449079864D5CB937BE05EDD62
392AD151961FF07D3DDDDE40C2AD197C8A38CB2A2DBDBCE57EFFCBDCAAC69904
9BBDC1F39724098ACB22E9B6353B4BACFF17E976B3DE3BBE23AB769AAAA59F98
D0ACFB566EE2BB229D402F66133B0631885DB8D0B72A026948D42C6AE45E3F84
5D32C5B35103B8B797412B5A555B6473652776F6FA05026395CEE40831199ABA
373DB1AEADA203E9F1D8FF65DC9DB6BBDF1955F14B8411F11843ED215CFC2475
0FB03247B0975ACFCE13DBBF0464570BAFA0D6F7A522F6CA9C4DE27B68197721
F36B63BAE67A549B42F8CA51044C2580420C4D2289E4794BCCF24A6425D4C7AB
653E1E938FF7D401437FAA4555C4007468A1491288778A1107BC1AA774411C90
D41EEC0452DB032189B0FA27BBA06F26D5525C1F8F414FC06E57BCEEC232B912
FDE34C570D7BE76ABB7D00407184934F76E34C70EAB6D46B9163FEB5AC1BFFD8
CFF053585739C7410412009BD3CAD782662C9ED53299B93BA389CCAC6565A80D
B40CE78AF0299948B512BB9E4EAD84B351C48EC6B037773D914B48A10DAE7D72
55DD4EAD24607F3B9B8FA1023CCE86E76F191E0EAE3B9ADD3A9A93A44EE745F7
60337EEBDFF6AD7D84D027324E195C3080890824DE45B67689F0A08E14F6EB84
AD56FF970FB63AC2D645E7B4F682116D96D813901A5A0A028F28E27E654A26ED
2EAF152F6F7F6BF3F249570A87C7C3696AD83C53C1C2C850AD2166B31167414A
3EA47D0DA522E23CE612F8FEA1A863B355EC5C22D84531FF890C30F0DA304A9E
2E9ACC4C6FBF1E3B70E1A00E844127073B22A80BE24048CCBBD5CCA6EAED45DE
EE57222A70DA3680D2143B36A5A696F2F3D145102C54FE220813A93F6F6F5D9D
33C057915517C91675AA41B9F67138AAC6E6280C6DFBD2AC4CCF96F8F6B2932E
B190691F43DA28F6115EA52AF0348428B104B112B2546485CF4C4E5CE4CFE090
30952BE8268E0A62020D09B0734D79CE949CEDB65B17837CDBBD107833EB41C8
64CADD18CF54BA29147860061C9E09A236AE0926B3864CF2A8581FD661753AD6
13433DBD22FDA58DA4C0C0EBCEBF16B4FF9B0F20F3F19E7FF4DE86F897EF2D90
EC9D21C4CE14300E8BA351E57EBA549B540A1610F4D7B41F0B334CF98A4F749D
BAF76043DEA3B723539698E5C66F2FF560233CC53C138C7332AC97BE9EE50BCD
208AFA12D3CAF0134F9E9795CE323BE4B86B1913D97B7CFB4F5872BE9544E210
9AD0BCEB50B7E52DEBB660712732996F9572E442CC13A29DE6B7B84AF75B80C7
685B16F3F33A59C2A54B9E23C5636217774935F6E81155806CCF271460682F8E
32152AC676F9B1F252F8D0ED029E610CFDBA87E43B26FB4D5E3D1751ACBDC181
2004520E40365C8801E96AD65A9A041BE6C4F8150C91B30C60AE2F9DCC2C71C6
FDF28FA577B39003387F79289C663EDF22084FE58A7CB4A08F719102D33FC44E
4F60F1E032C337874D69A043327A588B8C5B1CD693757C3A5B86E2AEDF4AFD63
91E81ACC544000E97C2E4598BC30968AB1A7277AB0078199492AF5DFD516B4ED
5D7DFB581393A11342B18710F6776C75FD20EA19F0AD47C282AD7AE90FE10B3F
C813D976E6E54C8EA8AEAA179727D33E7C8B431ED8640CB015F6CD3E4A2D87D6
BEE02E18B6B1FA04C041A0E29BAC5703A83039CA96985A76B61666FC3030FF6E
AF97F7FA79ECE49D69AD360A543C7BAA5E84293E7380AF786BF3954F5B5C6CBE
BDBD569AA64EF93499BBC0AAC68B23C5040989825428B9A87CE29322EED24C20
6F504F14DD921DE3B690B647463DD46DBFC77CBE35BC576B94BD126B9CEEF1F1
E8960040CB913E39C859BC016A5A0C4675A117EBDDC79D89F72902BD02A38006
E7ED0F0564ED126DF64058A403CC63CADB53BFA70D16DBDCDF2DE8630CFC5F2F
1A67AD8D3DB5D7FFA4D0D4CE918D83AF1FE7D5BEC1C0E35C4BE499E9B526D41C
CF5BB96480ECC9ED1F7B8CCF35A29367992E563BFB4E5B0A4947CE3C4A3E1BC7
962DD54BB848D07EDE0C12E1A1394BDC066E3BCDEFE3927943D2A8AB8D0B219B
706394A9B6C5496F9F2F9B289307D7E0C33BCB7023200FC3221F13619B570FFE
82B8EAD68AC55C6313424B8CF1189E3AB40886A751E25B22ED67B8950124818E
B258558D55DCD4ABA2313DAE81643E32E096D75A6DAAAAA6CA373D56AE1B35AF
4899CD0B44378CD3B235D1BF759930EA2C13AA624B355E9E71CAAF5A17D5598D
8E8BB772EF73E448B3359DB78795CC31B01C879BB44632D8F9D8196B6AD43ADD
8F3A8C7100DDBAFA847E6CC4A1E70CC7CD343C7CACC87DF0C8EE88C508D30C7D
B7017BEF93A6640D1BD759731E4350DCA843AA863071A7B86715E2BF7BADF843
FD6AF5722801C44B73F726014E5F80CEC413FF211D381A9DC0086F205415C83F
3223178394A917C85BCF3DA3805B53B1727EAE5E646178566A4853DD5017B2AB
A6EFE4857D600CFD6AF6115FFBCADCEF0815E4F076F03E71D85304A4B42F39A4
935E10F10BAABF5FAAAA47A65D31ADA51F985CD3709694E5DAD604F15731A523
D7CE100BA9A47B2925CD49A174049A2B5B3951927354864FA39D6141FEA1D48D
AE476797C6DED917F9F48F217D5C46F7E65A820F71AA5CA1D3EDF9707A0F2F4D
02FECAE58D22E7ACE00B71FB9FF3F957634501ED2FAB2017C34B78624C3E1ACB
E86A393BB350CADCB55BB88D44319FBA90445D41E83755B8EC83AEDE8A77CC28
080159EB390801A8E01924EA6348577FEED9DEB049F694EB601193219157365E
06F189E5448E5B26813C6054B0EFD355444F1EFA6DF2F16C034A24BA4FA16E84
B73917E43FF456B5C4318E8C0F5AC9308B32343F2A9CC22EA7D87E512F124916
7B68C6527835848FBD6FD2D909977882A9A1E80EFBDF88D9C2D5CC2D796BA6CA
1B93FA2783C18A7081BB584C148E9410822C4DA3FB1A29ECC9DFC6179A8F984C
A1472752CD15B985BB2D00197AEE3C0F83A50E05A8E6A0FEB0C6F48B1949C720
88EED64E45DD9874A61523D231965664425B5ADDF0821009F568E615CE94158D
9E0A162192BDDA175BC6EE3758754FD6C8FD4018889D8E86926BDF9D2B2794CA
348FF578A21D0BA0BBFB4504ACEB87FE0280FE7AFF1961031A81A012D0104698
BA30854D6D0AE51D2A143E8245F2237340C9B13CB0AD872F693579FF953A3A3F
46401469C834216DF6E346AA93E4203538759EFA337558AA398E37BF984F934C
66986C2EE9A510A1B2F8CF2ED1417AB863C2615F2D26EE13D7A04A1883353983
7083CB5367D9FC51A77E2745DB8BA22B1E79D2E4412B7D1243257B02B8CAFF2A
C2FB7868A7FC61E6AD2CF8C25F080D93E0314883988B3A4A2B72A1B4A3D2189A
B6FE6EBEF1CEA0B66A6581C8638D5F4D4A1CE333DEF600FC3DD815224F7E256A
4EA0AD525F30EC6D1B1ACC34907289BAAD70364C33665F90E24D35581DA77D77
6D1C00DA56999D5E9FD505CB2D368D0F4BCC5D71D81727DF2B58850DEBC593B8
44B77C34B7C17AB9B7DB8AF11CCF3586E0C284F01CD52E27B685371C875A6FE3
5B2A7ECF5DB511A7D7613AA7C519BCE1182B6C30F93DD0D7DEA8593B1CE2F890
851EB3E99946DCD9A40E25DD883D396B8BF2E064724F0DB92AD6442393E4D67B
4758249035E05B9AB1D14DE9BB73AF0AE80410C4FBC3A45FBE3BA44361DF6BDB
20E619935816E2533C25674275D5EE119A656F54517BC04AB08EB03EF22105AE
17B1F03D21129B5E9E7C25358DB0794BE8A1719A90CEC4BA5A6E2F7097EE53EB
C6B8E4AD2D5278A472D241413AAB892ED473527B27E37D3EBD682120F16D0C5C
D183D626883D5D0AD262569F27925C802BFEF566834D19E8CF42FEF3EA9F9175
BD6F1FDA02B22AF2A316937A37662E5A9F62E131E8C07D1B5CC80D07137085C7
0F00B4AA2A3F38FE549D727B6D5BB8B31CFC2AE1E6AF5D192BADC37E4B8A714A
268E6712A43BEB612E6FC3DCF522EE4380B6F4759A563EFC1BC02746C788F104
490DC1B3A97937AFE44F3CAC5970B8E1209B5AAE73A04E1194CDEBD673BD2C25
E906446D3ACB940A5254D2E380A2957A352FC808C54FE793012BCA9D69785768
F7A33721F57FA319E3AA2F6E8D3E18053FE2B4D24E86C0ACB8FBDA3F0FA3DC29
79E7E5A36EB76A947BF14A36F7C6CD3036C8A458B0206B8ECADB543A5AA3EB82
C1565370384853C2691778FCDD2A17B7A942B257878800CB1EECA4A9775F8C77
E6CB71AD1D4058AC6BEDFD7C40DE0224F61857D6D1EDF135A35A8E10E17D651A
78CDDF9BFF0F7D37498A6E2F8AC2E4CE7FF33F6AD386BC9C78819CB60CE0D32F
928130137C720A17D44F30E7BC6AB5DADCB2E3143D95295E23EE37E497C4CE64
DF04D0367815A62E64AC6F0CCE9A7043AFC60C1CEF50AD262638CB2582F75CA7
F1BA6327B0A39B251E1060624E910DA4619E834957CB1CE9106A9B0A113ACEAE
5A6A66942DDEE91AF18427CA61F1FD7081F840EF22585405FD388B9E18F72045
7A4AB35C68C07865063A2AFC57C5F9EE7BB0E85FE638A6DA676859093A6CDDE7
16237E7E7911535FACF364159079C5A72480AE5E7D1459BC80B427543A4A93AF
550285DA91183C4F754C307CCE056DCB6878CFDA2CC8A0B7F38655D294B0431F
D4355629B7207FC07A4589A0257051C54716D2440C2CF4262663EA24FDC867BB
BFC4E36F50E0788FF62C1E0E08172728FB0D344737BCAD21A297C69FE7FC09DE
4E7768D68B27DA27E5565C5F190746E586B04C7AE2F0FBD79C74C36ADA9660F0
F2414ACE57162F9F96CED4305F6E30A982C30AAA3C6AB2BE1B1041C5C68C45B7
1A717B81834A23F54E82D4E6203E0B2890D204E55C3D6EF69FC60D33727DAE57
60677B9996E2CD033AA4E4A7DFAE20ABDE997CE19D37CF71C657B199A800BBA9
D7715DFC217D2B3A1FE9844CB8E57BB0E85FE638A6DA676859093A6CDDE71623
7E7D416CF015B3B6E2DD6E0BDF7A1C606780C8580ABDA2F4125063C55D551959
09B820B4965C880D6A11F2D202FBE9AFD87C47C937209B3DDB4F2FC6DDE67D9E
CDCAEB8938804679DE74EF934E027649AC2EBE9AD41E8CE89D33C5D68E727628
710490D4EAAFB5AA2AEC52E3A4F818C3B258848AD4A1D16EDBB8CB4667B1C9C8
795E869B9B70A4F4122FB0C75888011D844407E0410E9CCAE5F3D4B603D85113
1DF5557EF42876F76EB35EAA4DFC8050FA536E2360BF89FE798B0A5928F7CE46
6BBDDA8186563C7A004162D6403E3B41787E1449587E28093E66A9837BBE4AC8
B30566D330813BE00F185D8EC22BF69C7F3C7B33E5666767FF1A48838221A3FA
B6E8027A10873C04482BFB4C4B5D7AB94E4C153F264048F377A11D08F846F08F
19F05427A4E670588B703A9000F3EE635D22642493A98CCB24F94C1BE830FB63
49CFCF86DA7C61388B92A6E89EF59B08C9033A1E95F5F8A1717DBBA7AAA1EA72
855B24D6A52EF5DF98E3BC006AB80F8ED18036DA7E2AD746EB4349010D461536
A8548C62C88BF21AF882B124BC0BFCB1639CC4A9200AC342D2CD79E14C39DA6B
E2D421853F48CAEE609B63A22ADF574D314348DD5A81B96A24B798505DB1DE60
54E882EE083ACF0B95B9F10B01117606E966D5BA8483B5461933DC9EA69E5F28
389E3A3A607B818CA3E3543FE2A4894925D73396FBD0305CC58E312807BEB4E5
22B5C87DE1D975B08CF8EFAE3CEF3EF3ABBFC735CCD2C4E4103FEB184076F816
ABF37783C71E32867C21DF4AD90CAAF7A0B94495594710F7BB631D9C72CF8FB0
4CEBC2831BD005C7294B822EED59E9975FE2FC27BA0F38A05F99A4407F6F47AD
0F9924453442B3E3F6137309510971A53273FC0F14AF9F539D2289A0BEA1A7A8
BEB19FD5A5ED804CF9A763367BEC85D9D26CDF0AEAD44D3CCA6FC4604D4C1572
EC48939DEFA7221CFBE92AAC1300D73AE60ED0238395CB9AB4941B1C526E7233
E939262E7701F2107138F9ECC8E5E4F9095D27C310BB63F324C9E4491930A1D4
B662BC21C5C6FC7B5E1BFF8F5A239F43754711D99A68E296DD3E74E0DF56E079
235A8B3CCD3B9DB78795CC31B01C879BB44632D8F9D8196B6AD745A186838F1C
F017F9E87057F94EC125B3ECF744CD52A8F3060E87FF1EF88A9CD5AADBF02DA6
5BB417EEEE67AF5ED1B984860123DB51D12DCC5FE6AE3B89F87E1159ACEB0798
53BC21C88A8E8AD88833808160A84F3F9F2D72E7772C1D183F91D837DAC94609
659451F83DAA632F14E9B34C7EE68BF805D039CA6AC7DECCD1A395E7BA2CF17C
77A14DF4431DB3E8171F50DD33D78020E95754079BE03DA907A0788B783320EB
9EA8A9E4B2BDB0B3CE83CE1D756C8DF7D51C4905B01ABC6B2D707F1BF8FE2E9C
C68C4EF062A55E990D90A532C82ACE33BDC0E2A514CD37BBDCC9F4E8F100FB3A
E710F79091EAF4D42CF6A8D9DFA5061DF0417F99C38DC963AEC0363B88C91C86
124C3E624856C8C9DCCC07407A115D6D45B7DF6929B1C79140E521F35B725E4A
CB5ED51FC702B8385C5CC30EC3F92E0D422D4B14971C6890397008D96737F48E
EB999FCDB2ED4966334402F76388AD6AB9DB661A04037C11199B5CA1E778BF8F
6C497935F4F34F2DB92A6BF35501449E5EFF0C1C6B0F97B27345AA8316DE4F13
0A0B512508C11027F5D7E61A400BDCD15EADBEDE3875523CDFFF0F3EBFDF1E32
97DF93CBA6EEDDC1BEBC9536C17D7F7254FC08CCD60DFF13F4B2BFF0C2D48D73
A369A4A30AEF829A5DCD0848F81D7791BE55A3D2349D8CD1B9C42470787B8A7D
8E246827C0F914E665E9D8A04E3280EC33D07EF7B1C9F5EB847BBCF6F32B061E
78C54C72B4F4024FFEA7CE880FD80F40C3DC350D4969E5DF2570348CE4915FC6
09AF29369F62CB781E06C49F9B0FA127BD4B9E4F5EC5533167C2AE32597BB973
6E13C9A25FD21206F753FC3BD99FA0E253EC2066CBC0F205D27CD5C7F469C78F
AF9ED4E5EEC5D09AA10EC8903AF8B8C4C3B926A3A57EA5427671E2524C1A6D18
B712BCDBE5CE16CDE9E5F075FD940B6C2CC84E8D26405777B063D407B3AAF6D7
A73DCEC34AF23C0CAD75E85BB132DDF1926F1693F48F3309101C02EF689C8D2D
F23A902513197CF8F595F155AA4DB6ECC615D32D7E47EDA449D05CE91138B4B2
04F8808694D5CFCB7E8EA54543DA2FBED176580FE5BFE1A7FC4139E6487451C2
52D01CDC969DFC593587DB2DF74F83C616D78F903ACE520E5C7CE10CED87852C
7FC331E6793AD871CCACF0C9E1BC5037DF854A3B9695B73342C6E3CCC04875B7
6916272D8F144A313789B7F1D37179E72AACF9ACC438364953D103D58A8335D9
7B202AD0AE637068101F117E53FA4466C180EB8EED1A6E851343BA8BCD9CE8E8
FAF564CCA8DF484A81FB922DA8E0474FC587D1F24F412C71012D5F1EF8B65624
BFF39434E3F75883FB7AE394AFA21844A6A89B68F79FA29543F526B871E09294
881A6B52D6FF2F1F285E536F79385C8B5A61FD9B41053DB6786ED906AF7241F8
215E8ED4A289449612DBE85E6AB250913B6EC1A75B8E9F4441F449714EC4DB57
87419C70AA921934EA8A70CA76CCE6DEE000CB11F8354F4D28DC5CD5186777A3
9EF4A1D52625DF58319E34C4CC2669A6E59819CA688D9B4DBF6976AA4D80E4FB
A425E694449656A27522AB33411ECA4CC630BDB81AA58803170DB43BA18C23D1
3D8DC2DFEE3B60A98EA819BCA21A27ADC6FC340911E7F04748350F17BABF563B
5A5AE9874CAC4A694560CA4DA5AE029B0E714C76571C122F5C6B9A42D7FCBADE
915AD019004F3B4CB98AB0914072E25343674EA5327A63F0ED433FED7A957B82
FF0E84DEFC0D831B525ED0D0DD74FFBF159291B59A5237D3EBE4C538A6D35117
3C53512779E121066B478266AD82C38B1D5BC0A9F9A1E00FE7F55555544909EC
0B7F59A41F129B83482AD76582DCB872B6BE7EBD0173AED5A2661A37C4C87B58
70BFAECA6C8FEA91BA094C8C2D415C6D44F09CEE5C4FA2BA7B7606C5484FB0E9
D447B238CCA18B8F974BCC4320167A8E3AD30791D514D24B8734863351A96AFB
A1CC83757CDC3F750A55BB3A1DB2052911C7B74412677F68489720CBD733C52D
8C08A075D63E6C43B88E4F8CBC00199B1E26D3C2D500D97145F9AEA8F72C19E4
5AC2ABBDD327E22F72DBD30BCB727C3127BDAC3A735D9DD932D6CCB6FE26CCD0
130614BD62D0036D1CF7A7244C42318768D507DB46F4198E83A8CDFED5EE6DEF
E6056EA428222BEBFAFC0F867E3D9E57555FDB2F2407CB0C1D5DFE083B062CCD
DB63CA25FD66E928D7319ABCDFA4A29B1BD710E91BEACDFB6DA16C9DEB3E6F7C
50E13E249C6F1EC310F45B0C35FA96E4063FB23B0C13BC8F88A1475DD4AE49A6
255A17CA6BAB28B1D342F0D3361D0AB2BCEEF3D87B5231FB79555D037DDA17FC
2911A3FA6383726B26F9B6037E1003933BF0AC52B148F1CDC5C944756DF65192
AA556EF29D08697C794E250C24DC4AB4966F43BD326DEF79B9E9BD17BD7289E4
F09BCF30B0211ADE504D33B3233C15E44F03937E03744732E3F98B64B037DC5E
21CFCCAAB385F3D8933D85B91700A0C3518F1ADF9E444B82AC000DE3D8AF516D
DD2E7209B2CCDFC5C761A1CA7DDEA075C94C16E2309DC8F5F464FAFE895787CE
65A904C0EA380E995D1CF13034430EDC64C56AE6B807FEA0E9BD4F4D9C52D700
3FB0F27D5F5A72E3CB57436ECFA5AAEA55AA7900820C184C8D2860667E25B40C
E5F847CD011CB8812091951E8B7B3EAB8F6D8AEAD1DE9A2FD1F73DCCC15BDCCC
901932ED5AA07F9B14560291121E14A538FB311D5693EC4FEEA9CDAC585234B7
83E4728E1CF8E44981D98D7D27CFDAD036FA15EAEF68CFF123E046C615B231FD
5B8415F2ADC75919400C21CE4726BECF6405971C26FFB4F1F8F1768497C4BC85
3DC6784398A6BB0DD7B7DD36B87307C25B8218DBB2346273A10CAD629B8CDB3F
79629DAF50169601AF4CCD12FD80D12105FCBE6538892DCEECE63DB0046D6928
2E57BEEF7084B2ABD744BD9F6C9D816102A6317BAFA93DD38776B3E05B8AE70A
C22F2FAED9257EE677F1F589141FD9B94F20FFB2A908AAEDD6591ABDA12877E2
69C4D95FCDBC288931FD635A654243F2DB2D8BFFF3D0D13EE0E54EFD245EACF2
40CD5E1806A89D6122B7F23C4C6B1B456CD62116889221A826EC20AC4384A8CF
F8CECF07A59136F75CBEC411EEBD07899B755DAC1126CE5CF71C5BC925910304
DAE34AD74C4F6EE4D88F814913C32C56CEE11522BCF96ED9D3947EC669D9E7CA
FBDFCAE03ABFD559BFBACC5EA35F7C4AF039C7D12B6BA9169218D70EF87D7F5E
A936A7F9A2098050930339C0DB023D08E568308A68AD39402546DB208EFC3CE2
DA145B6B40DA1DF5E91A0D6918E638232A732EB571E1C08234E6824A5788E952
60E9C89BCB312592925546D047F2BB6D8E559D260179A5ECA3F81562D186CF48
B3F9D4EF0419CAE2C3BDA36D0DC53D18DADCD8377AB00A66D8331ECE4C3BEFD8
056AE73638C17988E9866A5B274C767D6E8D43FC961DF131B7BA8515409D00F1
B6A8D13F6A0D3E14DEF186EDBD06FD79BAEAB0AF4470D199C8E85B067A402340
217FF991C8E52A4EBA7CEA25CB70926F768F710B467AB3742D19E7EFB0F3A5E9
4C0430A0400EB6E213E0EC499593D81E427E3BF24E87BD9B3005636CE9ED580E
263197D0D3930F25FA2E54560FDC5633F2D8DC734AE3AC5EEE66D09888329DFD
DBF03E92CB27D6D71E3F13A61C9C3BD9336A6B4A7A1BD339F763F5A741185F3C
D6B7CB1DC80EE2D091648CD9D95DA688C48C7DCAB3F77E4596C9C6C83A858307
703A9C20AF40BDA8E5DFD480060642F962416CF7D0CE0CAD7375E1CD3DFD4DC9
C9B6E95BA14850E0FB412B6DB49331578ECF6BF09EE6ED9D1374056EE741F16B
1312BE9E4B1B6800267C03E9D467DDF7E9CC48BBE8B79D1D976C0AA7779B1D7C
D4882F55258C57D4A8367D82EF814BD2911BFE4F5C2067E4206F8D4F3AF4B2C7
D95E63DA3C2CD9F6B3E522663B82E2544A6FECEFD3D8A2B222301FD679D6B494
1370B9CE7E88DDDA40AD9C0ED36BE45455AC08A51AE73286559F73B1DFBC1D26
B5445FF5374BFD88728561B4583654F891D0E725E80010DDCCE8009580E9B142
806AB267581833A721D174A65B51E3E8A909519A6E6EEAD51158A2BA24C9E0FF
6D1D3DE3DEF2F52928C823DA51E04215CA250B7C6831F55435E628A295E895BA
FA9F4E2D36FEFA77D26C34EDB9F2D1D494941B64CD9AFBFF6C603FA96532FA00
F88FCC7A95AB5E44EB877C6B7424849C266CB622F9F7DD740A0E8A1AAAEF6F9D
84C588D1BEDBE6F43F03DE472E51A17BE5E15126B33BF5ADD438928CF1FDFE2C
C8A3BCCEDCED8FAA3B94D4315313E73B7F64C21C8767DFAB7E5677415F55FF32
E4308FE712EC8D1B0480BED9988C9AA3F1CB8914A1E25B2A8B2C59EA8AEB703B
C7366ABEDC1825750DBF07753E280C9F4F5FF56106EE7EFA0BDED029D2273032
E1C8A5CD079BF78A31559C8B61790857547C6FCBB35A79610367CE4570555DE2
F5155D293660ED7E9106B00397EB8540270A7EF0231B38CF7EEFCCCAEB5DD28A
0A7ABBBE292FF30EBAF205DC307C924FD4AF134F742E1947A3551FC220FD3ABB
131379A0572664831111AA834371E466E55C00DA096348CFE520F53F47AA020D
2749D3AFABBF86B72A82068CFB9CD3082423D46EB801F8D88C1346634B035C29
CF191393D438D1872507A6E6908560B72CA7549BD550F5600AA8036BC6094AD5
D0C723C2131C235324AB76A214B401F6E1DF2E0F680C6DFCDE0AE9F922EBBE70
E4B79739F2FB995A4687CA6C3859C1866A4C98079911F2B53E072D324ADD7648
51888781FDE97B241B9520787DD65949AE1B082E3F5B20BF645BD2A7E6AE8EFD
79909FC7385149C47AF9325DEC3C47CC8270B6B31783FA712230610C8D83F4C9
F5CDE041E156D38BE5D42A6156FF059F996B83FBD1511275A29FB284F38140FA
4E8C8DF395CE9A836EFFBC02B41CBE8D589CF50BA27E3D4BCC8437A4D888FA4F
A4772845A518108C5548A8E677CD06AC2ACCAA6366E6F24A603AC3E2B599C47D
E9CE2D026B3FE511B0E3121D9767B56994D57D8EBC8F15F9D5FB9932C19E128D
B67D6F73FE591BDF942BCABB96879E79ED414D6FA40AEC9E8A3D579CEC7737F9
D9CC853228997F1B2D22E3BD0A364F4AC9FE64C0836B09C674472D6BACC07E8F
F81098FF084D9E44B1D059C53F7E34FBD5F99686AEA33CBBC14A90191909AFAE
A9BDCE7871DBA4895E268F936A1015AF245D194DF08AA86E554A2C81871D1D62
DA31D6CD94A54CC5CE59292C6E526F59005484E45098AC5930545B63AA9E1FD2
6F26026BD1B23D77C1598115A2DEBF8CDAAF3BBEDB05DE5BCB73C7BDB04EF4BF
DC6FD1D3EB4E0520072E3139CA5686B8E4654F629832296683A898B0C9B0D6A2
51BF1E8DC9D091F67A919CB7A65215C9F425C048AEC1C929FDAB375F3B47EC33
3CE49627D0ACEBB7C4599E08BB84F53C5F6383D5AEA6BA55A634242E698BAEE3
C5CAC2DDB333270F9AEB92A948FAD0A6298620E5154BD4372980CCC046978FB9
CFFB44D6C9EA1C718232391934FA35C825C0FCD9F2CCD28DE337C72468503347
EA1A45344A43E0DC78100DFE9727EF9A2F16251FD20BEE1A1572D7A182F0DEEE
B596F450E77092E62A0EBAE828FADD77BFC2ECDC1E562DAF5662A5CCEFD6B629
FA661440C361DDE7817154052436A369D6DE66FDAF3771EC118B6420ED41D724
F6F33903DC928D1AC7F70A162DAFE55AD7817AA62773CE160F630FD0097B2BC6
5420878D644F5986795F8FB41731AFD8088BDAF2D4DBAAA13CBB93874433B04E
B8D0AC3511A660FE47D6EFEECCD0A65DBB37026729AEB90253B022FE6E2E89A0
DBD994B41EB70093103C9C1B931168DE5DECF9121AAE8960B17260850FB1E307
7451FD4A24570EA79341F5C72D6BB43FEDB7C81DC72B42DD991040DF4E03CF61
7F2B8B30DF26FC381D8D871D0D96566F0E4910D17122A78F72DF46095F63990A
29877ED1DB307A71C06148C3CD9D5E8CE27B8C4B6E8B4F056867F1C0B014E2B6
5B59A8AC76C5A984CC9A15294FE781EB4D6148E58E0D1103C23194081B7ED0D1
2F094EBC9F3A303E146D5B42D129B2F61C5FEC5DD89072F6A6708A2EE6646438
88AC42C2D6059F5D3F069B788350621242D8B1E236626AAEBB9629DD796F4407
20BE08EE3F855A597B65071E7946D81D39DB8DE275C09772522BDEA38B0EA5D9
84D5835E64CA95985A958D9250B329ED72DFFF1413E660A1ABCBB982B3352D8E
5C8C129AE6DDC88039288277AA477D07BBE57BB19A3F632EDE4C96C7D317ED97
A741A31CC1C39F0AE160534E0C331CAAD340B7375427190D9ED5D06C044CA317
B21E74A216ECAAB6DAE2D8907671248569054F401FAC01C9A84A76F6A2812AF0
DEB6AAA7984479B2CDD7582C6A0087E30C8F91B3991BEB10B121C31DF3A38283
7DCB0115898F910F38FD25CE03F740C969FCD8FC6080BA5F6842BB8300164094
3EB215CAE8D21CE0B3C7A89BAAECAE60AA436618C281E0A0E3B3A9303CC92766
3E4692F181DA63277A28B6891DDC5350D347DB0724353AFD4A50F4B257A56C51
8348D27E0C312082BB785A7A71D28536A18369FB3E983597014EDA4FE2BB6704
E49C953500976CDA5F6DC2B28A050B50BD46CC83DDD732C8EA609E22813E9A8F
6B24CC94A37ED7FE37D7D03026506C2D9C63FDF47B1CA1F45B06D9C95279AFA4
C62D22D146BB0826B6BEAA35BDCCA83E9EA8CC73EDF7798A4397FCEB90B5E213
305802F110471D7AA69FE08692342CC5C13578F9434A856C0681789050486BF3
CA7233906CF97A9DD83BA63BF9DD0BB66DCB054E84BD34CD52DE6DB4EE65BD87
042A7F90731D9C0269442F20411E8868944268B357C361247A6E8A29A787F471
0CA42F96220ADC4AEB6580B63BDB575DAE9F7E916A141BD0182D047C2F2F5F04
FDB35F1F24B8BD8532DC86436FA1244E63529131AF91CC5D79C00A29C074E0C8
E16ECDAC52A5DAE81C6AEAB2EF6A77F16BBB9D7DC9E34891511576BEDBC93226
677F51BF67D2A0A9F2AF3420D94859E53A13D272EE62FEEF72FC77BD1B11D1B6
8E3E2848A1A620D3C873473E09F9302DE11781832B88AD3A819DF40B428BF9D4
AD0E3F3F3A41E1CA2B1B2A51DB44BC63C5E50CE9F4393387527741F30572828F
ECDBAF14B8AC793C2C387EA533B6DA4FF32CC5BA82DFAEB02BF16663CD98CFA9
66CAA86EED6A67FB83ECC8B024B3717A360E505502B3A5EEF984A7C3DCA0920C
B365AFF3890CACDC0F57FE48BF6D0C0BC40300CDDE8B584C4D632695BDC4004A
3E716F2D14549DAC677862D68D8DFD9C60B7A160A372691FD704B1F7DB5F4848
E0F0FB4BF5AA22A239E049DA46B3C79FE14CF0A49C8430C76ED821D7CA122E77
863835EDE40773BEA7A357B0191D3DCF19C2DE89EF61C5C14D0A06C63849426F
4C287C1AA48BFDCD952F2E0EED4859B871F40F22D922598AF54E2CA44B7C08A5
AAAA2D2F20E8B91C239F529DA26B17B2F856B7A07331B9C4AFB4170FCAC7D797
357C9B9D932A9DDE2E424C193C83C9A23AFA33FBEAAC8F5886A7E835ADCD7D6F
A835DBD32322404511B6B9C44C1B26266E7B758D6A59CEDFB7258687A78316B0
BA12F3AF41E8225AA158295228DC9E62F17A05ED9E33CB9244090E816906E80F
4AD4C59724384CA5D30F6B1AEBD473D1BEDB72BEBEAC704D0FA424FBFF28C5A1
86877BB03A18A48BD529C90A05B4082DC102A150AA608ABB3D254AC20DD57376
68706C9B8F511C9AC9915EB1FC6C35D39D5A5A7A8BCA55CDB8FE3F6E96CD462F
97B984FC960E3166CBDA087DD8B6E662DFB122C85E8BE151D06459C65191663E
6E3EC8CDE6082C68B7DB5AD3376DD171EDA907E9BD995C0CF5DF705B64A01C1A
233BBAFC908DD483FB9F4EEFE375827279C8368DD1C556EB7D35D6DB8F1DAB15
EC4B3CF70889D794C4550BD102EE5C0167F7F4B5DFCB388EB7E390D53E3F2A63
F04C9F9B78B02BE8313675CE0F31476DA3785D43D889CF9E8840771DEDC1859A
051AA72E7DE119BC50FAA9C65A0BC4826A3B9CE3E2C30EB1988C72CFD3B0840B
5EBFFDA7C325DEB46F1E8046915296D783FFBDA9FB8B16F8BEC5C8ADA52365A8
0B1118F7CCA31379FDA9F7BFA87A0C5DAC6D5C260423BC5AB17A8F41BF81F4C9
90206A303F3196059B4CFD1E1FA96DC75B4C29C9C13A945F6B5E40A15157F517
1F0C5C0F46FD2B4CE84D209127E1C1AC2A7AC52833D42D6ACDB73C9526E8E11C
BBFCF4EE4369CAE32E2A3FC027F80DC8BF3666CC81F1DACAE33F491CFCB68D5C
CFCD9EE798C9F2A463E752BD7C7C634BA2F0852F5CAECCB38C5AA4A10B880A1D
3E15BF7E71F3503915EB1F756362B304D8EE7D0BE86A12C2C1C139EC62ADD591
C2D666E5D5327B5F92E5A22CC64A20D9619F67A1E15A2992EB1018B48E267537
014C83EDC2863C474CCEA2A897B58BF2E53BEB01DF7F1E5D2A0267AA83F2047E
39477E37B4BC46FDC9226FB39EEB0F5EC360A56A4006CD0ECE7A6D0648B06FD0
C97FC3100FCFBAAD195BF1325CCCEE9C6FE11ABFA269D31199422237FF5D9082
BA5EB4E9D8F65496E794EE3449C8F8DC2D824390BF8E6A1B67AC346F95822B0A
06D2D8F64D4A6AC2A94E42F1962BE904A46EC6F3C194F086E05B51BC1B71F0EB
8B6E6F9AEBA2F8C2B5267945FBC509A44154A0B1DE132F1BF1D988C347D266AB
0E7B17E1F223A2AA98E585262A5643E89B730116D2E5CD731E22FCA8726FD11B
21981F4A6DBA4BE690796A306CC339C16CE02B443E5C9D2BB406A8C34F01F805
102EE3349653A03061252359002E02F31B5373A9D4B0CDA3E30AFF35439AE4F3
69ADD77E11F7C64174BC21CF554A4AC430D455B34B6E0F3CBC0B0D8FDCA6D3F2
BDA328DBAA08A88B3D3C968A35BB3F488D6BAA09536992976270FA2905113321
8323E58F520B0C079925C0CB8673FDDF078D2486E54EAD2BB2DDB409BFBD75B3
BEDEE64875691E6FE7FBD97F137E33D4B334C7C1E8118D1A08514481A914F763
0388D228841FE0227E0A81F23D4F6C3201BD822455294B2C3CCCF17E0814E032
0A49D9F1A038A739EDA34D6C9A000B726BBA6685AA8494EC371C0BF805A465B9
F571C342C84CD1FA8FA6ABEC2E76771C14AD6FBBC23B0BF619C2B4F8ADEC5D7E
43C2DF0F69C5CA6132E2362AD2A4288ADF81CA06712B1586DB067D45ADE54593
09BE49659385695E6F308FE3AF7317F6A32D7AA9D92D9D437C89AD49AD597269
EC62A9FA3A22300877CE57FF635477DF34BDBFA4E09F80B90D7EC328F966BBF0
21DB78FE9E8C8D283F9B4CE54FEDCB1BC44D3CBE925F65190F55F0BFFD0CF2C4
3FBFABA16C0F5CFFFB6323712E31C9920B6A4D8EDB0D3C3A0A0362A41BAA6B1D
1AB8F7C61D3CB586B5FF228961C99CF6E53D28160925893B4A83C7419B9CFE52
F84F5537ADC2D6C5F914E80482C176CB9BC7A2F9DB328629FDF1A876E34DBB2E
35B70CFA62B73ECAA2C53B4E4E0FB2ACB9E2FA11BC33A820BCEC5E4A0B493C71
6B62FC4FED4B75470468E700F174C1B06BB03042C8D6ACCCB78FC25573B7D2CF
84040482B4BA3DA22243E3626CBA700F16BE4206DEB6A1FF7F54FEDBAA6B6331
DCC3553D3F6E4E82C1CD3E4804B317CEAADD1AB26D1E560C73E1F1384038FBD3
7F0DBE51EB8E6D3394936197A956DBB06F4FE55B59D5D45B2C4B098C1EA62F4B
D91CCF44C56533EE9323C29A71920E8D54F03B81A0D7E42CC17EC429C45E3595
E75D106AA7EACF85A6F9C7AB3D448C0E2EBBC7D144774BB5D5721842D33DC1EA
713113E43442653C790F05230B8D9CD76C4E6F6E412B51257AB2F5D9806C5FB7
771F8B20BA53E7A6E840B19C8C16871EFAF5717C50B7263C23C7D69FAFDE32B8
AAF4D99F078270560C75BF59E76CC2A4DD3B6105EF6AD840988F1A20B9F77E66
D716E3ACADF61AF7116E7D32B0C35F5BC48F1125BB7B54062969C8A735C950F0
22775B3EF228CF6F963EDB18791F248A876EFC88BD748FF7EAA5CAAA3D82A523
A7B3C21325F7E718D1E63192A23D979BDDE0BB2668AD900AA6FA8C83E4AD433C
08EE3769A6CE673FFF06F20583CB2C2D1E2CADA5F05CE13601FBB59038540553
F646B2F507197A583040E88C223610FE6046DFA943255AF94305A98867C130BA
CCF596C4EED8C542AEE028A178D78849C7325C444F529950E931E72AB7F73B03
DA227F14214A2010E9C01C628FE85D828CE5A8082B27248DCF945AE6EEC7EBF6
9FACC8A90B21D817137286C35D716D75A2E219F0B6E7CD6C71DED89A97DFCBC2
8A78A47E86157593A6629E2FCC86B6596A4982E6C5C353E3476964F8EBB7FDB2
D0BF6A5220D3407A1A7C4F86454C29C3CC0E484A39EE098AC8CCBC245627A9F7
45A0E1DDC319245029C1073E7BD3FC824B1026EC959BCD24E353A0EC975BA128
B25EFBAB2CBCF300C49C94737B2D0A67F143E50B395C9E929196CBE8EBC70A9A
59496C5F9D736860036B1382322CA0AD53398BF7EFE6ADF3EBBE4B7FA49874E2
427B0B756483B388E4FC1094B591022E3C1842BE6D9A31380F72DF84D940EB7D
D3B327E300FAFA01E9982EEA2739BAEF2AF446BFB2943C4BF5515CCE1A4B729D
76373EE412E07BC8DA817FC395931BE4BEF40C58C8F54FF2056529AD90B72388
BADF089E8340AA1FE09AF7BF3C9CC37EFC1FEE490689E2F24A23DA9D67DFF75F
91A4306034047FA424036C40ACA022FCE5DD391FC2B4F9ED515F98A5860EA899
DA706C2DB36298C1666012C8366521250807B2249DB5A0EE0522D7346B13DE5C
08CDE98C6C741A4E30F7289419246D6323573F5AAF40630341277ABC923AAAFE
755AE944B9F09D63B4347D555E2B2ACBABE094563E07AC9DE342DC5A78041C6A
D0BB4C74D3B10E533923394D05000C76E2D4D1A3E5BB81BC3657993B4B46807E
3ED269C5BF821C6D609D03E27B458B0E5F163D2C731D4AD30798BD8075401C32
6023D90913ACCC6EE3CB215DAE8FE4AE5C122DA2386248E485CA303648AB6A37
256CE5A80CFAECCC03BF506659D0CBD7CB1A6B16DA4D939E2AF80F5BC4ED380D
E98D39BB19AC9AF3AC82E9AA17E1564858BE2D93DAFA9901AEFA17788AD9920E
8E80614DFD98D6A16150E28F8245BA745A38845458D7B9D615040753D7107466
FCA3C548A236E27B63399A0855F0C178FE0DF85730E478369E2FC83082CAB5B8
3BDE18872EB0CAA848C200FE42274E33EEC9BF48255FC7B5D753A8089EB057A2
8ACD6354F1EA0385B0FB9270B2C98FCFDD9291A5C7A5330E5CB8C7303BCA2350
79F1B972AC4A6403DB9A4CCF0988D52520A33469391A1F2A23B950A89ED5A64D
8A8A97444C1941933651E3834E197F22BA22DE67D119F4315E4CE18734DBA74B
7C7A6052444797C367269D61FEB9760880909AFA8A44FD95AC6C3C4A3ED8B4F3
0EAAF216E081770D1BA9351D6EA53468E8808EDEF8B68398E2D4CDCBCF159F80
92F2AB01547643FF3102534F4A045630742E2EB9515051DADF7EF0FC9D6F444B
F550C4A13EFAC2D1D044AC57045EAD7A4E8AEF68DB0DF2F2FF8C118A672A8597
44DBE09D7EA0916939590E4F7889D096EF398A5D5F5210F2D7F510DB4F4CE81A
3B608C93942EA60E7CF608FAFCA1448FF5C9CF7C85B4BA7FBC58E46C55A32FD1
9D806A7FF4A6EE056B8F3371BEAD87FAA361D19C52BB6169A440433C5A0EBCB1
E42A222FA80377E570953950BFFFA6A0C8E19AE78A8C624D82C0E802CF76B548
316AF31C4E11A71570A636D5F7E3C2773EF5A8731530DF0F82D82863041C86C0
A977B12074CA03AB5CD6A83BBDFF731C8D739BA44A5C5A17EBD0E9294422ACEA
F35FC2F63D3808E582B6EE0AD27AA08F98CB0C3D19094D3A02746CAB000293D9
7A0228F754FEDCEC16700C0FE019F64593227FCCDCCE92E23A812BA4D49C5C4D
EC8D6AE0BFF4D809EF694E3911F586BD27A544567BADCBE0B3724488E3203765
187AB10319226F29390E4CC262A367D5F8FC9C201A88BD68C0B7EA44F6A21637
A6B17152775E9D742BADBA57AD2529576275A5EE020D0C9D78A3F9993F254065
6C14E4931DA52F681A06D597B8E601A4AEF7BF9EF843C1BF7EFD048C711F3220
B3C9A7DE9F146BFDF286CD9B3E2A4AE7AFEDDB051F6579EDD81BF2EDE6D3CAD5
32E3D957659911EF580787D05692BDA3ADCBD11F49C4EA0A1258EAF53FDAE6F4
3F03DE472E51323B3D383360F874C19EE041FD48BC13823957C4B7CC92AD7C9B
7CF4A735D21CCC5E4320B357FA62DD78E23055AB88A46EB066AC937DAA8F6995
358C49F3396A3DCB6D811C4BEB254B39152F16E78BB564D13907605B4850CF17
C96E7741A6208AEDFF7EE2D9BC826261FA6A6526F96975ED369F2C9E69239403
3B64E5D2080779B128DC480B238C130C3EB173A33BC0C885769C14A15D591CE6
9206C00F47FFE48505EE5F5AB4A788A13FF90877366BBBE21F6031B8720FE251
7E9529F41898039B2996BAF72CB342F1BEB286FD5A1925C81FE3FD01BB010929
8AA27C7039F6DEF6D8940C7C5996908939E881A32266CC0044A69AFB4C0E99A7
DF149E0389F117C02652D57CCA1093EA90F3245C524B3BEB4A64C59B2E9BFC3E
F43471DFC5482F931B31AF6CA9CE497440DBBC6A09D9389CA63CCF1E42708307
7D4C91C5E85FA5B0F63D85842154AB97F4CAFA09A9C9FD2049FE8A2621675191
620C74EBD2486DFFAA220E44C42CCAA23DE753C7B0E860E03A8C96D84BAFBDC6
25298DD3587AB904721275CA3EEF78446E2554B0CC6FDBF1A4E891AEFE281FEC
28AF3CD251502A335B84D0EFCF98DE96B0E8A7EA7BACD20FEA3D79B86D0CC42F
8D1BA7631F9C10D79052166E7BA368D63BFEFD53BA7F2D7C7839DC4540670543
205F577FDA44F072B0604B26B0093D9CE3EB8C164AE374E22153A519D5D2D6CA
DA1BC7060373BD191FB44B06570A288F4917C5987E20F66181E27BA9C7D2BAFB
CA3E1B11EA61FE5A79073CE58B43E2033A0E359933160D88D669F60EFA6FF7B8
1621230748943DE475976878F36E6FD2F3461F63EF14382014AEEB790B4E1443
AEFBF2BCFD0ADAA0F9086ED6438331B6781EC2CD92EA5F92121E7184EF717B1F
EFEE772D89B4B21C39093640F3C60962B63E521BA50B934751A4B6EA686E22B9
B7A13B4B5272823CBAE6185D5945403C81851D152359BA6FCCE5E67C29A56751
F80F60EC3F29E7A2BFB1738AF0F1261558B2DB9CC40AB469D5C1CA752FEA22BA
4C0BC00CD90504054A2063A50D8FE589949568ACF4E0C1108ACE7717A4DF245B
A9D3BC9F8D9C170A39367D7D0345A8E61BFA7341212B52731B8C7A1F8B5C1C30
709E11044A64674CA32CCB3B37DFB91967F53399B2C66263F3B49217A109D8E7
473ABF134A4E5833B84082F951D6463E36F84BC605F5C3D6B59FFABCA9AEFB68
FB26204422DC2B467DC32DBDE2C8EC0D333BE2DBA8A79FCF8227FABFF6F41FBE
F21CA30279744726440A060DFF150FBE7A586B5D59C82A8D2647111A1E707F84
9BF1E1E0448F3D4C02A6BEE02FDD73B806C543A91FAEA4955911D7322F35C123
F6785036FD54BE74853B9F73AB6AB981993D7EAD93BC0FD0526F1B0B1D4C9066
262FC0C2C99ED41DE073D4F98F9EA9EDF5D9C50A3512810606E824CC3DC60E2C
F74B0CFC07F5CB646979A7926B018B1183CF772FCDA718B02E2A288560E2445A
4E82998777B82299F3DF4D06CED7386D7E398674C9E0DCBBA6998986DA383F08
D102205772163E61330A982B17686B6200034ED378D9D550245C57D9D3F4F8AF
883EACD14722D67347D27296C29E193DACA283AF099897F7BD1D1CE03629FB59
25F506E9BF9F7A953183B4E9633C1F406D049FD2C46C4F744986A6CFA8504BFF
001FF8D61D53435E16DE366CF7FDE496B7C1C76E6331D8F5AE60234CB7A25461
83ECEA1312D5F5AAEE2CD68C5C8F24ACF262A3F4BC71DFA2B281DAF477D8AA76
10FAFCF4A53AABBFF41498420CB3820C807B8F62B9B127FF846318A3709B8C24
51749A1C3E1B8D215B0A591E96A870EA2F3560B9ED9B720AF3E3ECCD59626FEC
4B6AE417C7EB7407231AF4B88F8164A2E7FF2B9BF8F96BDF37E33CD8EDCC34A9
7A4CDEC9F516BB2CC1F3B0AE4B835D62C11FB08FD02E0F6A6CA0E714736633CF
A63FDBD17FCB708D6041B0561991C47207171A92B5C6255A14C324C48006D1B6
456EBB575862A62EEAB91C5220D3CA62F659F28F5FC7CAA4C3BECE0B2BF18D5B
466772C303B959DA0AF1B09286BD260AB3C74D4369F2700959E851FD964ABF5A
252D14C869450EB3BD71BD2D4E8AC1E1BF603F3347805A61AE65EB9B7B739CC8
FDEFF01EB736435F446BD827C55FA73B24BE484A76C68894DBCE53A5DC2EFDFC
44C8A600D2A683D3A1872B93868F1A467DE01A292ACD42C94FABCD650C3BDB49
FF154735F30BCADF3C064909841668736E5513EB365B49B964CB2B8E75ACA32D
AD3F32A55E82EA69E740397DF7F97B3CB2F374C78E0536A6660BDC5ADCED04F0
21252B4D02D111552D787F5462FB32753308A90AB88AC3C351A861ADF9755676
8369DA91812756552CB5CCB0F6CC492A24AAC26810872281BE4A440911EF8EDE
E655479F912EF12CF764514DFD86346D0D84F95B2B38CF79EB076C1C46D9A91C
684C132AAF67F125B3CAA4DA0C64D7083814E3A37FDBA58757091A233EAC0EF1
A86D87116C8E7823AE81BF3A07011CF39F346645C81A5A70995B9B4949D2AADF
B22F8F86FAFFAD75C36978BAC0C1C6269E2A3296C3CBAB326391660E2FB14C99
E20732EF182C126B7E0EDC26B0AA31C7AE867DA742E8786AC1D8BAC50691C2BD
FD2827B12E70EAF0D2D8CA640BCFCDAB8AF4C20C87D0564A7948C06992B8B986
00970A349F9DCABB0532B101D220CFD2FA737444AAFFB3CCB7C68378425D4C59
2608512F06E9597CD6627027317B46B97A775C21366CEE9FFF733F9128010341
BA60226E33FB2E2B4494FC84B3E9D56188377B2E2E5DF0F888BBC8CD7B659643
B1CBD1CE42065F4C54597FB95D49BAA50DAA1EEDCF7AED8BADC46E96F51BFB93
5BF2D3197F32736252D85756E223BE3194A27568F14295DD9DDCDA44709152D8
949A76B828852D5521DB80B57EBCC1A6DEC8E3BA777F9F651C2C054C334C4C2B
22B0B7EB183BB02E3B7A6567558CADBB8D20E76B9DC065B3B2A21D80759BBFA8
D8CCE6AC9971C7465B80F38210033B33D3E1BA64F752967CBC30FCF5E34B4887
4A6EC2A82AEBFAA89199755D0EE6DB6966D26A78A9BF40B4E48336FCB8745704
0EC221D06AC57D21E11DF0EF9F41D60B2D4F952FA8F728DD260F4DE1680BC4E2
A92023171FBA9B12E23FC4615FB4F24F738A122D526FFD14300482ED523DB0B8
C02967426872DDC0923D22C02F2C640857D5F14F83C52A0B63A6108A80229F6C
44053BF9244374A7A8D206AB4A531F7134876F7C7632A1896E41ADA9783768A1
2368AC0312F2891B3F223ADF709A273AB7B256830C12B4572B808AEBD4170109
E620A8C4523F898F9D8EE6F241A198DD44AD61B5E598B0D8739454A8DF6F4D3F
A9E599DC466F899FEF1A7450F415768A99EF85B7B2DF3254D4036384D90722D2
297A2536E4FAA1EB319CB0ECA0D2BD6B9FCB889D2E0CB1BF988412F71006173A
302A28C96AFA3FF5897B8D7041BBFACA61A274424D06BBFA801151747503CBB1
CBE67E51EE1BB1D905A638F10D997CCB7951245FA5607E52D0FE669D2B05BF8D
6410B0214811CBBE71A230AB4BE9EB2752B0C261AA427539B2552325838DB8E3
BAA1CAEBC3429D03E018DAE25A4D656D773085418C209AC289FD4A9574663FA3
846DF8A9A609C5BFD79A3BFA88562EC0CD0F939A8FC48FC5B4D1549E843EB4CD
B481DB9C496422742EAB30DDD392F93F6CE1870936E97D158D1D07A3F7A5FB05
658AA0B6514AE736B4270213481A5E448EE8A8CAAB2F4D5A9404FB3693B76599
DF2D7E0FE43D87BB19C92A59418FFBD8E27708E00F60D706EB714F0953FA3DE8
400C97CE51FB1970A2E1C5E6BDA24CBCB80364A01A1A2F9C67E38846144AAC73
A0B3438B6BF9DDAD0CF002856B77FD34382B21738ED6039E0B8520F026D13ED0
ED3A1B36E90DC2B437EA7E1012E8CDFA346A0253BA651D962E7253AB896B08B2
AF4CA06EC9FDC54ECF5BE417FC0364D09DEF16A8116BC9CAB0B5A5738800EEC2
94A4E9042A5BA54E67C72A1DD09B1AB902DA80E99754C5F1BCFDD7E41450E492
1AC9A0F2A39D7A395A021D52CC27501214EA212E93FC666E62FDE56AB481164C
78ACA17CDF5B7F015E75DA70A7E1AE74D74638EB8CA6095168019EF2C2C8F193
72DD36A0E105A593D181CDE7F2540ACEEC9B4CC97507E1F6445645F6987E16B4
7B9A779B4E8FBB473A4E26D7EAB17DD8DBA10176F8D9A6FD1636CE7B9E16C611
7EB62E6CB45D8D873054302C692C8501195A6B4833127A73D418FE68732B639B
F91D591473F7A42B3F98B127C763E37F4D773086319090F9147B4E042A589F72
2E37BD0ABD5E97D8CEC744724C503BCFA2F58EE08F1FE0B4D82A0D4EF831190A
ADA872DEFD5C9AA14FBC339B6543E5520EE5B1988700CE80E78978235A8A50BF
B133DA28961E0A1DD4D16165E2EE06056C2DA12B698092D2B935792E37AE211C
241C2D20FFF102AEC475A15D1FE660835CC4AC676A315A51A0A7CD9BF42AC3FD
CBBE5B0DE7B6580E2B6C052146A5A0FD131E8738E9AA5850DBD81A1A9AC40466
5CE617998142CAEA90B3E4D95BEE1985A69D99A512453DA555BED67AC814FDFA
6960DDBF19E64B70653DD50F1BBBDA922F8E384FC472FB2B8992F415003C836D
DF26F93A48C9D48E8DE27BBD2F7985F98A1D5BEE4C8D5DBD3F05FAE0B13CC2D6
7D766D6C0BAE29EF8F0B348AA5E96E2F4E4B42D089D2E2147CC2059E9E91CF36
747820B2D8F7CCA2B9B882AEAD3865CEE465E776379CE2342703E0DE8D5A6980
229AC5E77F42E8A6E90EE4ED21DC392FF4620D8C4F58173D593D47D6B426BD6E
FD0CDF9F86DB2E55E072A3C6DB36D8CE2E6CF32E11136B82D2E909DF41AB3779
04E5B4B5065AEF4C6945BCB84C43D4146A3E4097DAEFC9104C79FDA981B3D16E
C3184162B6E6157E2ADC01D88E865E8ACAA5EBAF2D67F6C114604B2245AC1631
6DB81E0B6739DA7C6ACFA867E11C97B105A34B3047BE8E149F5F2F05D3BDF3CA
F92D7279638007A91300ED9CB5C4A4AB500DF3E6579B73B9894E6B54DE628C57
C361A67C49770DF931AA8583600F82D30811AC1BBD869AD3E21312FE960C17EA
074E2F579849285D0D3A76E9576B10E2D0D13B1E40370DBB121ED7E2A32FCA01
93D78973376E107B2328CCE1C13B32C5B71CB4B49C896C7618A9BF0AE19CA7EB
263CD9BA6431F6B580C894078BB442BE0F760DCA7B4868446A1E8CE5FFFDD06A
AA3DF2D1E69245AFA0FBDB35DF118CFD3D6150B751B91B4398D4F5D1C4808EC2
9B7409027B0F1876CEA7909F5C378DB6AEAE04BAD1C1EF1280422283F9F2E030
B619A7535980739FB8B713D62E9A934AF0D9AEFD14FB9E03BD6D65A97E70C130
6CD031FA54384FE67C53BB3F6819F807247B25E6BC8E92A61A7FA882FF81551E
84EAFF76556ABFFD8F84C9D296C2A3641C552EBC02EBA0E4BC08FD892312BBF2
ED4C384A42BDE05A389FFA3BE94C7A8AA84DD5AFD1D964A01EF67BA1C9F7737B
AEB0E0FFF0D842D7AF2AC2D240AA864162E635C23407A91CA32BBE82D7DC56B7
232606A9710233998E706778E61979950A5D19988C94B7ED3BB03211A65DD830
ACF56126B85E372E2535B6E0B594D3C53446DA02391503FC6350CAC4BFA17737
67935816EADC811CDB18F504E65D26240E925E459A3941EC33BB164E91A2D5D0
2C8915E09E0086C33F141B4B6EF0F1F1D6B8E8E51476198624C69CF9C96C0B98
A598740C3A1BD551F6B644125D610516752F5B1A8DE190F25FDD9197ED145D29
94E45663850BB9F2948D38631DDBBEEC660EAFACFDBA32DD1CC070BD58C65228
329FC4014B159F5E4759F3F0C17730CD32CCF6F3FDA9E0BAB9A051859C3CF70A
724780DF258C6DA4AD306078D4D43F4615BA6C981C65DB06214C33218637C010
6560FE1FD014633DF764C692E27926E3BD4DBA5C51F124C3D7001453673EF5DF
1ABF075E40D40291571084A333B02FAC3834BCF40A110723664E246DB54C5F66
59757C5C53F28705A5DFCF65929DF3DD23D75787DD73AC34B5B6654E64468361
9F4CDB8EF476D67814CA5A2DBE0C8823390D236D1F52191E6516C383C11BD488
973750CA3C27446B1CC702098F0E1FA01C58D57C95BEA86DC7E5C58CEE21C71C
D712E983634C726CC5E45A4123DB563B54142414D57934E23314D9D96EA119BA
4D58EF3C54DDC066E45D58419D5A9B804FD201925B5CDDF30A31E05B3A1CAB54
6D9B7D0AF445F632846F815EF3C52A019530C89E77D774E2EC24096787293778
525875E5C71499DB81A0E4936DE09FDC19EB4C01DB8989D1233AD0D293207CAA
48609DA1BED9159CA78C268517D2AD88E86E7C7C2C6F4458113C700FCE23EB3B
49F6FAD82A74074485CE8D391A559849379D7E901D3B85646E535684A296D624
6A593B29859A30CF6F1E86690D34E181F1EB39FD4C8CE49200C0789267A84278
9BCB7FC1AEB750BCDDD5F53CAEC9D9F48850341362310AC06FAF062ABC64BEFA
C4CC3A15EE55D52F23E710352FB417B54DAB3166F68A3803B7956E1A5C40EBCA
7F940B3AA19EFA35FC12F2D0A625DF0F0FD4F590D023D033E6B9558EE6A7203B
9E6D2BAF4D6A7488C28FA88F299CEBE8A23AD80654F8ADF6A0ED8DC0DDE536A7
503FD885D9E5E739CA859B4B064F57C0E03B84C7B702A0FA57B99CFDBCB98CC0
913AAFB0F9A9562372EDFA6077B3FEC3047F0A0AB24F1B0D31CD34C9A8A58808
68BE94C5EFB9EF955D402CFD58B5AF29C5048121E7D1B5AFE158866FD756E965
85ECFFBF317692E5ACAE8A47BDB5F660870607AFB223E7ECBD1A925CF4ECB6CC
1DE68FFB7393FA472941CA346AFB98D0F5E079C1E2A938D5BD89EC2CCBDFB617
FD4C995B12A48C7D28C81008BA5BB5243418F0FBDCD1F5370F0DC357B36FE196
C3F1B1539E352AB73A3C7EE7B6484E4539457FF8F139981E0CD78FF3A44523EA
C57186620D0A6A4B4A540973A9AA19C2ABADABF124F9B88F79EBC2402DD38CF7
ADB5A5F5BDA67F3FC66E72CAB8A4F776E7E316CFBF9A47643E47D4F8E6786F44
0945D20D12E6F3556E309504E1019D50B9A1C408AE6E853F432FB58CA25E1A08
7692A5E8072419C84082A31EBC5CE97F5E68BE034267C894EF7028B839F671F9
F9623FAC13451F5BFC5AD4B57EBA3354B060A87A8AE91924E8695E1FAB9FBBE2
50F5A6F3A98D701B6D64C73ED638EECB234705B315F41C8DD96116F5CE6BD401
A07384BE9E824FC542E3EBC081EBEF18F94EF71E6AC71A337F70BC6B54951ACD
BF06072060DE19A169F0F700FA42F1492C980C7B191E0B12B2C27BAE40AD548D
6B2BA0D85BE6730A8DE91A44B34FD4367BEC613A755E36ABB7D064EC3C26746D
1F6EB1145916A17257F6179D065F5EE0581462877A3302012634C2AEF7C30A45
755347F59C7A86CD6AF315B3B481740A3C939A3C566C02DD813F5FEFC24C86D4
E04F52B672B4AB495A13EB709E4557F3112AD9F32DECC089C6F8A39B35203201
A0863088C4001185F259C2ECF297925DFC039E992A9ABCA2C31C479CABD0A2C1
2940D00BC79C34E85F5D2E1E95E0327256DBCD668D4948F6C80C1EA2E9809B49
A6BFA68746B6BECD3BF361C9CF13F9B3B44076182B3DA8E37F802AB47F350ECC
BFFC3016F24DE82473D4B60FC7935A3CBCCF46A5AB62A41E925B1C76BC8CE270
D83A32A5FBDF806CA4E72C1D0BD39B436889C507204D895014DD676BAB66D864
C22506700B653B16BA45B413F806DB1F8F1E3785F0965656C683248985BA5FC4
586692EC127C14C1BAA2ED4F88F566EC14ECC2D5C20ADC463964883BF6572B37
28F7A543F27EA17982A66CF65468F1D3DCF7BA0CD8D0CE5FCD5C4BE4319A7EE6
F824BC7CA56E6011DEEF49CC4B158E0559330C148D76D0328F5AACBD938E5A1D
AB73576026D3489D1C07C7AD476471DEC5766E3319D31F9144E818E959FBA040
660C16E08100A10C27BB0531E12FD1B0335B7B96D0887AB64AD2D46B31800ABB
9D3B5F78A11FA99398860E1C2593AD0388E64D7D7D25F18CBC7FFF83D0236D91
99CB91E18199B0FDC3BDF553DDA248731B0F636CB7ED66BF5F59194FFED4727C
1A5E4F39E5E9FBA448D5B2DFA28358F0A6F3AAD5804F98F3ED1C94539E5B7493
A761531129993C3613080DE2A2A58C7CC2532D9AE19EDA700AFFAD9CCE06F05D
FAEC0C3ED3016301E36BA1E70A58006677B84B687256486DE2FB72C8191340FF
52188FCA5ED5CC0CCC126E3CE348394FAA8C40B1556D54B0DF2FC2F8B3FF7C0A
3F6700242F4AB0216DA0AD0CF0AA78F9D58F2D28DE00BEF90ABBE1D33D504C13
E53B14A862B14E2980B732C089426FF74EAB05D9F3E026C09FFD61415CF94498
DE4196169559DFE4D6180380702B341F499F241FF61123CE94EB98F55AF472D5
91A9303DCCD4CB11DFE94B016AD2274AAC83CB8362D37C0225FD0A6B0F8CA07C
3EAAD4FFDD722310A5F8642BF9892AA8E0E02F537721442D7AD1049C27040BD1
5448E26F25B2E63AA70F2A3D1FB3E6FE18BCBC6330D3230A7A8D37E99487B9EF
DF5D8F7B9157714535F900D76AB2A2C3C68A9D43889A656D47B21D1236FB9089
373A7B106AA400700B8075FDB92C3FEA9AF9A0E104141614A338FBA6851B1256
D071140F822A36DD3B8CDAE1C5C64B402ABEB0352496A76A184977DAB6599743
9B0F60FCEBB7CC9AC8BD8D1966FD52BA35A63C82E32E8D9E51F43C89E607017C
935ABD7EBF207B1447AD840D7DE77337EBFB21E2FD559C228823E57C62CD1895
B811BE15B11660603BB290AAAA4DAA98D72BAEBF008847407389F31FC9FF75FB
5E93BDEEC9C98F04B9F68166109C90B0614713D18F768A9426479C3389C3E999
B2C9DD83298E7A2FDC16341BD03350B335C3E31E6F52094F96C53BCC98F8F086
68A09DA4C8629BF5C98B30DC7A909EE0AA8DAFA215C56F69754AF421F074D294
5711B3133B797781973DFDA7DC9373FC626CE639346FAB1740EC8739429F731D
1C349B9172B6B16A8802CAF8F2DBD73B89693B126F7D4140558817DCBD45C57C
AE26D1B4357DECAE5BEF0303F8221F79CD01E229ED7DE372406DA3CA2E2F64C6
9A3695F30BF3C2ECF757E5B0D8472410D655675341889A0130E104F03AD18297
09F8EC2FF0EFB9AD0401DA2CC281E10DDEBB1D0DEBBAF3137AEDF18998D7AF6D
C989AE9C3BEC07C36F38637F6490E28E03B99A6FB138B23DB84706FE0F412F0D
6A8B24840963190D003DD29BC2B8371919C077F27C43E110C3810A73629993B6
9B4B2282A765CA37349142D7656D4452CCCAA664816FCC46663139E048B1D13F
906B2F6A77FD2719F7DFE6F0C757A098ED3A9DACF29F032D1B5BB766CEEA8885
CC344F195EBE52B97E1F4D57582F02F6EDA4558599D4AD9A8870241F378D82B3
38185D8C4E12575007FCEB86FA1AEE007C327C0B9B7A8EDAB26DE3CE7D7B27F9
1937BAF67AA4C525C1D0A5E4094D50A130E6E3E5F6BBF53552994F738894ED6B
D1FF471E875956008F25078493BC1BBAAEF1322CC07D9F63EC2E3F48CE5B3433
7BBA929335E62220F8D12C3C1AC963A35ACC2987C3A23DC0904818612B4287D8
E267C9F769BB1ADDC3847C9140D8608594C544089549354BD082AF6DC3F0432F
CF666C040772F39F2E29D6AD0D2120B3F17F2BC059D78AABA6BEB20949EF5CA6
E7646D10E328317AB7A79CB2FAFEAF3C99D5DBC27E9FE9A8AF73B3ABB2F79D48
779D9B6AB130F424E9FEE21E8BE08DB1685DC1DA4BD4BD650BC49805CEF5871D
B9323D0AD571AB16DCE306ED5C90E56B03F4D0BEC624BBCCFB99CA3167F7B538
0C291B6F1C3EACEA2219EBE9975DC8846C7029E4DD39238183307C07F9F68875
CD2694D1A9B2E5FBF874F7F622BB9B5B132AD7B710F0B112F8D4C6DBD1DF34B8
97FE822874BB785B06644D72E3996BEFD1C0A51281D422E68499925B01CAC205
CDC89CEC041A81EDE4B590705A28611D4DD0BAE00F9DE17E12D5A3DD0F0F7DF7
DFDFC28EBF2A9BDEFA18AC22DA2D87BD809AB37813CE4584DDC00BD4F2FBB5C1
3C337C1400C194C9B79BF526A53C7ECFD0C80F96D97788662C67FFDD64F181F4
D80903259F399E201853D48A919F4E438516828CE2259CF368B7F37A286233BC
744BE1ED6F526C3E6ED56F4FCA8E4C909C364197ECFFD7285CF0923505E8D208
C5E4F8C3BE49E2D839717F23DF00D8E6E188971C5B5145E8661A0109EC35B99C
F6C0E4CCAA38C550A8ADD74411102B71163D0A3DA62FB0F73842C1B33CA44981
E17145ACDB0A9307E337FAAC11079E0269487E563B7BE502C2104AB48B65885E
16BEB99C270B475DEE72D5E468045E530699B3CC4C5D70411D97B0BADAAA0734
A6BF025197E22E54343EFA105DB3232EE5E2E7EB6E4F4B3963E6FD40872E88A1
BA13A5BAC7016BCD01CA8765F6D08767DCC062D83AAF350D76778639A33DFE37
56C37FFDFD70508F11C3575F3D9E6D85202293D82A1571B45E387D48BC4BC1A5
F056E1E616F62BAE7726BE53CC04E0B0EB7F68F10965D3EC0F7890A3CDBD46D4
ADC9B46BFC70C28349B0AE096817CEB71596BBE6125EDA4BA0FA606B387629D3
72D904BFF442ABE35192A25E9C8251426D0B9A71B95C56A11EDF7DB46750D44C
7BAD2E8C27E0031CE4721E2435367E24534F591781F7A9023CEF03E4322744AB
FE3AFD417CEC41B2CB621E2722F5D84BA6BE76D59DFFD6CE20ADD69CAE1F3361
5AFF3AEEFB06F06A4F7F96ADCAD18A0F4C27B3387BD459FCE576F10BB6D83A99
B42DF26BABECD0BF54B341542F186982907F407C812ED0AAC330E2C0FFBE0B90
A3CE888AA4F986ECB21C56116FBBE49AB534AD40C4AF01776DE4E14F211B4F47
0694288B0560EB7C9F74644BDBE25B6BE1346FC03BA1042E1657B20441C5DE56
FB982C1BCC80D14088E1F146F41CD2FB9B1BBE74DC47537C6D1BE9CF83A56291
79AC7EE73ACCE68A07E3AD5E9CE26FFCB5F94A55F6307DECCC4AB04518528822
AE9435679E339C7C6A327E7FD6E22C3BE0D3EEB140EFA99943ADDA87C9D83CC9
0982E962B998BB02DB287483FE93A8468E2E0E599E25C3FB06E225B9DAE430AA
C411E2F8C1C1BE237D11F1D8D4CBF7852815DDAEB09A6FD79AC0A37C8A50A131
953CA207B14C85243D33730418DF6F3778412540533D3949F5DE9602725E8932
990881C8BD260BF598F0F30A66AAA92AE211351F7A5CB8C13AE1E295FF1A0682
FDAE0C9C60A7AF62995FDBBB1A248C6E80E6177100A4640B36ED961C3B2D57EB
10D5222A3D49F167019CB497913E39C73378D59D54F62FC35F8E56BBB38D0131
5317E30EAD7AC8B0C54ECC806220F1060C54DBA456E62809014A6AF6E1F48BA4
CABA9D6C994A02C2E78DB26973983CD22ECC39B955C2AD8FF23C2CDCC839307E
F525FC703796FF9CEABE55A3259C23ADF50D78317FC27AE2C0A0ADB9CE50D9D7
9B5409A029EDFDBD66B51BB87353AF0B1F6218D45ADDC805A399447AA1017216
57A011D9955203C9A0DFA23E5A86599730480FAF6EAE170BB9A49045FE464718
E130159A00BDEFCCFBBE576B39D0B570718B075B55D2026DE38567960B0D6D71
CFE4C8C508CC78DDC55DB835313FD35DD33561AC0DE908D0D769D50E9C75F84B
0FC0C8C2DB1BD0ACA5882DE4118FB66D95BDF13980A512D07013C241BB03B91B
4A0B66C2F71783C850C04BC1F7ADE31DAA86AB8F28A05DED7ED9808C34AF9C30
B098A9F968C35065FF60A89E343E66C65EBC54DFE7C20CB7C7584ACD12512FCD
63AD5F71AA12EDC03CA8E8971C1AB42BF8E9B05CE74C7E02FC905334E8D95219
51318BA5495D2230EBC24ADB8D7DC1C4CCA934E2B5E8BCF254F6A9B7AD1AC5FD
50A6AA25BCA6B37783567CBDE88FFC0388220CF69DDB47DB8CEA9299AE2B566A
8ED9A968F83772B49FB8C468EF7951EFE22FADE8A41F53BD98BB072E6DDDAC51
AB0903EFFC53BCE55DCB4343D5F37D89912AAA05E8B5903E1EAE432797FDF0FE
47A5CDEE68736E0D538A8A4EB2EB61C231475FD0B0F472354298B7D4BF15A5C3
AC55616162447CAFD946F2F4E013110507C8BFEE37F8BE85AE75CCF2389CEAA6
15F69486B253A34F6C22C191B444515CF4751E811EB965AF9857C7B87604B486
7CD94A161A00912CC245C84A4F25561431EB6066C5D3C0BE52C8F1ECA3CE11A6
5D623A6438C410639462DB9D4D720A3AF4EEDF67FB358787C4D67C5A3EB8E8C0
9036D9E78E3347136F3558F295DB60701C3894BC7483CFA90832EB0661C0D400
34C92BB69AF31803956EFBFD9C2A7225036A51C47F1045CAD33F34ECFBD997AC
2A7196F8DC8A70CBD03815E4B19E787B227EA60DB0F188AB6761858E5F2B3466
5046FE62C06B663DCD0EB5B7D100FDA12965786CAE00C2337FD80886198368FB
E02DA803B63C27CF7E42246EA0A9CDE765E680F7D28DD5A838ECBA96066C16A5
72BD4457CFA45FD801128DC42CD2556B48379A11AF0EE060EC4312BE215B383E
A504F3538DEDE65BA0A88DBFC72E03A0E1E3648D664798BE84DDF52846B3A2E8
BC878FE850BB7B4DCDB4868F7C5FD00BDC47107F06E7E1B412716B51D515E982
146EAD5AC8D932F920E71BCDCF757B7716B980478CB69CE62E174CECDED8E839
4E1833DB8BAFCE813B2C77EE7227A638F587CD46FF127031671F58868C3C283C
02A4655C575315985226991FF01845DE2A5F34D5F246EA125177D1A6ED3902C8
76E527C150D1D213BDD6C2A15B2C986C38AC5B3113AD9DE3167E4031624FAE42
E918CD036C9F256B35E636B297FCFC31A532A984A34DF94F67BD6ABBB66A704D
87740701784E1607740B90F49B853D801D39A20BA4B34940BE64A25763D8C025
8DB45B3D7C03CACFE18F421213F4A02AAC1461A2378974DEAA640EE8EF8D735B
FB4715B774650222C8BBBC32E4DF0075D8B27F5A8743545FFDD8527FFA9E7DC4
07AF357F66CA9788E0FD1CB40301A81DA99BC443459979EC2569A1F7986FEC49
8E3954F73936AE98AA9944F2E93A682D5A8AC924875FC87BEA79E8193E5C672D
2948177B3196BAA2577F5B12E55A626161C82A0543EABF9F427464BE73D83FA3
6BED1853AA1A5347D7F2CF64186FF29C54C065FAADFA4BEDB453B81406A4F8CB
7FB983F3CD43B5FA12C2D5DEEC0141C96F215ED5EA3A0668A6AA47D008E04DBB
18CD58758F1C7C9EF72B68D8D0003E5355B11492
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MathDesign-GM-Regular-Extension-10
%!PS-AdobeFont-1.0: MathDesign-GM-Regular-Extension-10 2.0
%%CreationDate: Thu, 29 Aug 2013 17:19:01
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.0) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign GM Regular Extension 10) readonly def
/FamilyName (MathDesign-GM) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-GM-Regular-Extension-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 18 /parenleftbig5 put
dup 19 /parenrightbig5 put
dup 32 /parenleftbig7 put
dup 33 /parenrightbig7 put
dup 50 /bracketlefttp put
dup 51 /bracketrighttp put
dup 52 /bracketleftbt put
dup 53 /bracketrightbt put
dup 54 /bracketleftex put
dup 55 /bracketrightex put
dup 88 /summationdisplay put
dup 90 /integraldisplay put
dup 98 /hatwide1 put
dup 115 /radicalbig7 put
dup 130 /parenleftbig6 put
dup 140 /parenrightbig6 put
dup 149 /bracketleftbig4 put
dup 152 /bracketrightbig4 put
dup 213 /hatwide7 put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {-28 -3065 3250 1002} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B1059A708DA99A5FEF54076E
8D9026757D0F7E793223AE39AF5DF960A53D81AAF2A83425A9F37BF896F83EFA
DF884EB3F5C6015EF02859B405F506AB15FC2282B07F490A4E029DBFCCE2ECB6
59E9B1D1AE61A08595E7004528E24024F1394DD1A7CB56FCB89325B9A85A2A25
10DF5C755A9FDBD98CCD7B3D9083F83D6F5311EF79AB13DBFFF65E2F0109E224
5CE1BD468C52EDA46FD15C6B121A2690406B952F9BD8F8838832AB8CCDFC9805
C556FB6B23273465D43834D2DFC85AF665C0FA0D69E48399C99776628B96CACF
AA27A61AC602F510B1D87352082E6DB56AE412FA9EF1191BE06236C75D96345D
BD6048FDA3BCE4EB632995A925B63D9B98CF9F7E86D7F0D53EB60678BD5A1F7C
FEC9923AF685B85C02D9D64344208444F95AD4E6B84EB6FC21E399D6E979E306
1D095F0DF25CD158E4B1F24A6FAA45E2099983B01F9704BD933C5C28CA8C3406
C28384EBE0A536D4ED4E8350431915FCD274075E816F416C62F185239358644F
D1A18143FCC5DCB965E4E3703D624FDCBCD3EA00A2D712933238F68F8EBB74A3
58AEA77E872E616D6CC55779A1112431C41FF1E95C909D707CF9F1EFCE84C952
60F3FA5F2150C851D053E588E7CF09B3764960F55FB27DE1A7747DB94E59ADD9
3DDFD189E6965D7C5393C70115FAE97A5289F9F0E6D3CA800754DC5685564681
F5AFCD7D0039D862308B7376F7A7C6F6FF275D09F9C7F7A03086298A8FD8096B
16EA3EA6FDD336088D07980BB85F2627FC9DD99EEC8C2E9FE745AEC19E85D58A
546234321980A39EB431AD0AD67421E014C4C319389C656ECFE0972BBCC0EC12
694D352E5AA7E2C577B2693D598D906A1C6ACA13E5B32FFE023E0F7DB735B9C8
95E9AACA3766430573474F04E6D4C8D3B63A58F1E8CBE38333BE3959067AFA7C
A93E4EAFD485D5469A45AA2C5EA9C22812F055B1D6E9C29C2E65C25AF6E8C1FA
3E30A7B443F7FF07021F46ECC0AA30CCC67D2C0C0CBCCB4E8949AA8C79FEE6AC
FF8567327FCE6E1CEF9FBED678FFE181B949B86A2F01EEEBE241E7C7DA1E413E
15122074EEB735CD1C98201F895AB968A18F830A83BDDEC09B80F36C49216B52
C1A6056ADAC11586865733BB33FA468C9F8C6B28DAD27796E2ECE89CCA28AFCD
EFAAF9441048CC3BF4597F202F06D6C0255EEE6139B6CD0A03CA761985BAD39F
B8BA1F05C392699D0BE73ED6D5821E21493C2466E5A7477803CE45AAC9AAD426
9DFC092F21039E3359E8BACE2455FC9890831FF54866B0594D045F7B71397682
AE97B1855D36F764DD592C9B6CEF14D42E7876F07C6519A0598ADA081CCD1400
01BB6609C19881428FF832A39E41DD4260430630D359E22C425C63BE6C48DEDD
2F819746F51033A88A1FD3DFF0B5F5F8A2F156FB60D91699885FF9B94B355FCD
2FC9DDB5F27A510E3A6572400B9A299A8A83E1AF697794A0717AD6E49709C46A
1273477C93D6FD4721C6799A64BB3FC8CE01137CE02A265078342CF1428FEFE1
5F1A48ACA988005806974AA2A6EDA82F1ED2B50AD7C3B7A6BC7EB006F00E64D2
F12D22724121E09657B9C16FFE7B83197E76F10EB3E8C6946FFFC9FE0EC0BDE0
F3341FB986F27205FCE1111ABED61365D20232CEFD8E6F085C4FA6A8561EDBA7
43CF5529C7C42CFA6631151B21C99FB53DDAC4465B71D8DA701FB121BC255576
FDEF502116F98A3FEA53FFFBBA56AFE69058FAEA499AB0E04D114B09AC04B113
B9C22B1B7524D95082C3F3F47455A7AAAC0B510E6C5FAFDDC155A69019258FAA
DEEB2293306F2B40E28DCDBFE4562DA72BAB326989DFB4D1FA19EB4C45599D6F
2A10094B6413A5AC9BB5B2A057F8B1A27965AD7080C2009788A0A1F58C8B7DC0
6BFEA297938A3C986ED182325B3347E17020CB413B6226E6535D30BC10A91F9A
3885647CE81E4CF4CF6674A7453BFCA61FBBDF96745D9296332E250756F365D7
BEB131B97295BFA4099D146277FC3CE048C20C37F7E37E2DE94F6A04BA533885
8B7A1C1A8CD5AAFE69C80DF18FF06C0CB185F08C1BF6C5F3B858075AA040216D
2963BF2895A9938EF236F4147CFC18BC25DEC9E4788981033FC754982E0997AA
6D3235DCD7872542F4EAB0C04B5CE61646382CFF56D89FB601BDB0838F37F7AD
5E72D627DEA351555046641A3B681657DABB5247B8AE75AD54F2D0A064300D22
D793FF14E24D98F526D6A1BE3994768E7FE4829BAD611EAA3C1410D2751EA82A
BEA5D65053753663C113BBB431639D9FF29C746475332631C3E47D18A68AC611
A0BAAEFF7EF7D8DA5BB2B2F5AFEB789D73810D8288087B11D68689E2D3C924D2
65A0E7E00CFAE80229FB6150375A829491B4789D186515E27E35E4BFAE24F65E
9F4D0955C1986939B71B930DED9DD9F0E2E7C669C9402E15DDE7FC8E9C9217F7
E9A28F47A6A4D940AF28498A72230A17D6A054286021D9EA3DB5B01130E6860B
B42E7AECFBB4834F21BAA4441A5FC50E8CBFF1CF4487E0A932F4C9D389CF25CF
112A84FC2D4F2A01290836BDC52FD066038DC51449CB2E889EBFF9A8FCD1EB16
070B7704BD3CCF9F600D1A863D973BB9E4905DCDFE2B57F8678F2165758F95DF
47DAACF4C1271DDD4D66EC1A482E7C4C9010DFDC306C7767759112F5FA781CB1
F7C87A495C6EAE8BBA0AF02B8FABBD55C2885E26777262E5E756A32BB5F337C0
5C7BEEA31A3ADAAE6089B4F07384AD20380CDD332FFCC0F83692419327B81AFD
CD6834A2854E2263EE4FFCDFC0D2DA293C713D1B04411AF9514451DED49EC8F5
DA524026C847522A5A93EEC3780D6524A1F809D047FD42F0A3F6EA5B93C235DA
75A593B0BA741E8B61B59E733179E4F149F0D0CEF9C016D35EB7FAEA1F2C8B56
6C5AADE3C6DA35D1E44832F9078ED2923A2BA43BA906A140858009F272CC1C06
6D67F4D7138DFDEC766628536B818B4206A2D09C1AE2B1FF47CEAC5B72D372BF
CA64847F4692C95341C46F977B3404B77AD988614012823C3C34D08709C0D317
933A1D8ACD1A98AB8C44D25B3399EAC2A6D629E2FF9525114D7C43727F5D94FB
A532977D59B7988502C2941ADABE3A64C301028C9860600A7705BE55F37C11AA
AF216E6C80A73F17EA0840FB9E06AD6FFBE0CDE6D21FD138A0D69968E6B43777
7381F39B0A03EB3DEEF391B7ECCC9A1B3838E314575DC305466C94A5B56A84DD
CB6150B776B64731DBCC71B87E211447F2F4AD6CB5434C9CA1D0309652ED77FD
8E8FBB287D622B5122923F8C309167B59915B501B9740E2690ED9F561648F8AB
9A265D99BE47D4E0A24A2E7448DCC9CD4E35E1C03043E619C6E44F8236F55938
C3177EFD69F750FD760CE2A5E45A531670A0BED68A3AF43CA2C35FB66730F8EA
846B0699E3514CFEF055832E860D20B568EAD57B1AAD29C206273F3707B066D9
7820434CC2FDC35A4FDC0BF948E92B1B7FF3A08301BE381D1F2D977E63BF1CD6
FBBB99899EF9F91B0C6FB3BCFD8A858DF727E18E7771D7EACA6ABDB1941DA4B5
D436C9BDF01077572BFF0651C782D0A51256C832DF2650A8D3BE5F24D5630259
C1B6A9D4E4C79F6C7CF6B998A0A83E3233167E301873776CD3B5338701288E4F
99E543F4725197C56615739B7DDEB694F3C65E27300BB5F27814AA565B79195E
8E7E2F8E2771C3C0A66E1BBFD21D87
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MathDesign-GM-Regular-T1-10
%!PS-AdobeFont-1.0: MathDesign-GM-Regular-T1-10 2.0
%%CreationDate: Thu, 29 Aug 2013 17:18:54
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.0) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign GM Regular T1 10) readonly def
/FamilyName (MathDesign-GM) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-GM-Regular-T1-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 91 /bracketleft put
dup 93 /bracketright put
dup 123 /braceleft put
dup 125 /braceright put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {-13 -491 945 752} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B1059A708DA99A5FEF54076E
8D9026757D0F7E793223AE39AF5DF960A53D81AAF2A83425A9F37BF896F83EFA
DF884EB3F5C6015EF02859B405F506AB15FC2282B07F490A4E029DBFCCE2ECB6
59E9B1D1AE61A08595E7004528E24024F1394DD1A7CB56FCB89325B9A85A2A25
10DF5C755A9FDBD98CCD7B3D9083F83D6F5311EF79AB13DBFFF65E2F0109E224
5CE1BD468C52EDA46FD15C6B121A2690406B952F9BD8F8838832AB8CCDFC9805
C556FB6B23273465D43834D2DFC85AF665C0FA0D69E48399C99776628B96CACF
AA27A61AC602F510B1D87352082E6DB56AE412FA9EF1191BE06236C75D96345D
BD6048FDA3BCE4EB632995A925B63D9B98CF9F7E86D7F0D53EB60678BD5A1F7C
FEC9923AF685B85C02D9D64344208444F95AD4E6B84EB6FC21E399D6E979E306
1D095F0DF25CD158E4B1F24A6FAA45E2099983B01F9704BD933C5C28CA8C3406
C28384EBE0A536D4ED4E8350431915FCD274075E816F416C62F185239358644F
D1A18143FCC5DCB965E4E3703D624FDCBCD3EA00A2D712933238F68F8EBB74A3
58AEA77E872E616D6CC55779A1112431C41FF1E95C909D707CF9F1EFCE84C952
60F3FA5F2150C851D053E588E7CF09B3764960F55FB27DE1A7747DB94E59ADD9
3DDFD189E6965D7C5393C70115FAE97A5289F9F0E6D3CA800754DC5685564681
F5AFCD7D0039D862308B7376F7A7C6F6FF275D09F9C7F7A03086298A8FD8096B
16EA3EA6FDD336088D07980BB85F2627FC9DD99EEC8C2E9FE745AEC19E85D58A
546234321980A39EB431AD0AD67421E014C4C319389C656ECFE0972BBCC0EC12
694D352E5AA7E2C577B2693D598D906A1C6ACA13E5B32FFE023E0F7DB735B9C8
95E9AACA3766430573474F04E6D4C8D3B63A58F1E8CBE38333BE3959067AFA7C
A93E4EAFD485D5469A45AA2C5EA9C22812F055B1D6E9C29C2E65C25AF6E8C1FA
3E30A7B443F7FF07021F46ECC0AA30CCC67D2C0C0CBCCB4E8949AA8C79FEE6AC
FF8567327FCE6E1CEF9FBED678FFE181B949B86A2F01EEEBE241E7C7DA1E413E
15122074EEB735CD1C98201F895AB968A18F830A83BDDEC09B80F36C49216B52
C1A6056ADAC115818D7C5FA8AABCDA5B697833D7429C56B7A83CAAD25D780757
5962171330FBAFB952053C409CFAD4E1A1D109A0A445879A74D5E8A4C3356466
EFA64DDF0892C0F505F17BDC01AD34DF040D0C34A6A3ECFCBB5A090D7A67806F
2FE9189C8370C3A95D9BC6EDE1BC9D3352E68CD2BF96B4C573E7CBC74835EA0E
B3FEE783F5A6937ED5CA358A6C0F4A4EEEB3E8F0AA7EB8F58B6F14397EF9EFB9
CD5C550E43ADA673D33A752BEAB8786AA58C7B3A65D90C9C4BC3C4D62922664A
F1C75AC3FC955E8D859C506D77F2F8F64076B7335FEBF1D8DDA9A3FD211844F0
189F9CBDDA705879463E5D2BC3869C935025202C8E19212F0C94055F7C06763D
8EFEA27EB1DF138AEC9988C105FBBAE1785C2AFDDB96BBFDF66457EEBA4FDADA
32800CB8DE6B847D65D638E3B9CC1ACDB0C5AA988BCF283284F3BD63224B110E
926AE21A0D9984E869F25DB17E1A3BF7C5089A316352B78EF5A4F3AFC50B177C
E6263308CEB0BD49D58E8FA97239712BBA439B68ECC455709185AF45A92DFAAF
71FF47402A78E50346BBFCC6274242DCAF7264D6AC15896035477EB7E57C1B0F
C2BB9525907077636517E7A28E4043C77D655E5AD454C79D7DF53A2EAA563121
456137C41276DC7DC31C662431C0350A69F954F86F6B8AB04B04FE034F1D3FC7
455651BFFB52F47876C9CD4B8EEF41E89B34F8F5A3ED25131BEA9540C0ED4798
9FFE2F28B117F4B7029FD4A977A714D98A26724F2055D95AB272EB160927357D
4985DD8C2819BFCF979C04AC43280942B54CD7B68E78E6DEA38CAF68150A2E0B
8429794D70182437374AAF794F5477EFED6463DE83ADCB0C7178DF5FB7DEB385
8FF0ED0A8FE07E392B1F4802592F3BEAE812266982EFCCCC83B7BB4A29270C42
7B0B597C02364BA469AECFC2013FDA6BE581BBDA8EF81AB69CA9C20B62F11073
6FBCF26328B325514C2A115625EB29D8E3CB64DEBE26E85702CDF2BA9BD825BC
0C8A6F69A383F8F499C87A2BCA52BCEDCAA2049FDE2E1089C173
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 33154002 47362860 1000 600 600
(P:\BOOKS\Pre-Transmittal\TEX help\booksamp\booksamp\booksamp.dvi)
@start /Fa 54[37 110[40 1[45 58 43 49 41 29 42 2[51 51
54 36 43 1[20 51 47 1[37 47 44 36 45 65[{
 TeXnANSIEncoding ReEncodeFont }22 59.7758 /GaramondNo8-Reg
rf /Fb 255[38{}1 49.8132 /MathDesign-GM-Regular-Symbol-10
rf /Fd 185[33 70[{ TeXnANSIEncoding ReEncodeFont }1 66.4176
/GaramondNo8-Ita rf /Fe 240[31 15[{}1 66.4176
/MathDesign-GM-Regular-Italic-MathItalic-10 rf /Ff 247[59
8[{}1 83.022 /MathDesign-GM-Medium-OT1-10 rf /Fh 240[35
15[{}1 74.7198 /MathDesign-GM-Regular-Italic-MathItalic-10
rf /Fi 194[57 19[25 25 40[{}3 74.7198 /MathDesign-GM-Regular-OT1-10
rf /Fj 133[32 33 34 54 39 39 23 22 29 36 34 34 41 61
21 37 18 22 36 32 21 28 37 28 36 34 10[54 2[34 2[41 59
55 58 1[51 1[25 58 1[37 44 1[52 1[52 5[18 18 11[18 18
18 31[37 12[{ TeXnANSIEncoding ReEncodeFont }45 74.7198
/GaramondNo8-Ita rf /Fl 148[21 107[{ TeXnANSIEncoding ReEncodeFont }1
41.511 /GaramondNo8-Ita rf /Fn 206[20 20 48[{
 TeXnANSIEncoding ReEncodeFont }2 41.511 /GaramondNo8-Reg
rf /Fp 141[32 2[40 8[24 21[52 8[66 1[52 22[21 46[{
 TeXnANSIEncoding ReEncodeFont }7 83.022 /GaramondNo8-MedIta
rf /Fq 245[58 3[58 4[68 1[{}3 83.022
/MathDesign-GM-Regular-MathItalic-10 rf /Fr 206[66 17
14[57 30[44 1[44{}5 58.1154 /MathDesign-GM-Regular-Symbol-10
rf /Fs 134[56 6[56 56 2[56 8[56 3[56 97[{
 TeXBase1Encoding ReEncodeFont }6 94.1379 /Courier-Bold
rf /Ft 190[63 15[41 2[23 46[{
 0.287 SlantFont TeXnANSIEncoding ReEncodeFont }3 83.022
/GaramondNo8-Med rf /Fu 171[44 1[49 2[58 1[62 40 2[26
59 54 71[{ 0.287 SlantFont TeXnANSIEncoding ReEncodeFont }8
66.4176 /GaramondNo8-Med rf /Fv 138[49 49 1[49 2[49 49
49 7[49 3[49 97[{ TeXBase1Encoding ReEncodeFont }8 81.8591
/Courier rf /Fw 42[159 60[41 2[41 8[53 9[53 14[83 16[47
7[49 1[117 32[61 61 61 61 61 61 16[56 56 12[50 50 18[{}19
83.022 /MathDesign-GM-Regular-Extension-10 rf /Fx 190[37
65[{ TeXBase1Encoding ReEncodeFont }1 55.2093 /Helvetica
rf /Fy 137[33 36 22 23 26 1[36 36 37 55 18 2[18 37 1[21
28 34 28 36 28 12[45 32 47 3[56 60 3[22 56 1[39 42 53
2[50 7[32 32 32 32 32 32 32 32 32 32 1[17 17 3[20 20
40[{ TeXnANSIEncoding ReEncodeFont }43 66.4176 /GaramondNo8-Reg
rf /Fz 205[24 24 24 48[{ TeXnANSIEncoding ReEncodeFont }3
49.8132 /GaramondNo8-Reg rf /FA 141[68 3[40 2[40 21 30
30 19[56 4[53 24[0 3[54 95 22[63 4[63 63 2[63 1[40 40
10[40 63 21 63{}21 83.022 /MathDesign-GM-Regular-Symbol-10
rf /FB 134[26 27 42 2[18 17 1[28 27 1[32 47 16 29 14
17 28 5[28 27 10[42 44 35 84[{ TeXnANSIEncoding ReEncodeFont }19
58.1154 /GaramondNo8-Ita rf /FC 194[28 45[28 15[{}2 58.1154
/MathDesign-GM-Regular-Italic-MathItalic-10 rf /FD 130[37
1[37 1[53 53 1[53 58 32 53 37 58 58 58 58 85 27 2[27
58 58 1[53 58 53 1[53 13[64 4[69 12[69 12[53 53 53 53
2[27 46[{ TeXBase1Encoding ReEncodeFont }30 95.4753 /Helvetica-Bold
rf /FE 135[62 2[68 37 62 44 1[68 68 68 100 31 2[31 3[62
68 62 1[62 14[81 4[93 3[31 3[75 18[62 62 2[31 46[{
 TeXBase1Encoding ReEncodeFont }22 112.08 /Helvetica-Bold
rf /FF 139[40 1[47 1[73 7[73 2[66 3[66 29[86 17[66 49[{
 TeXBase1Encoding ReEncodeFont }8 119.552 /Helvetica-Bold
rf /FG 139[57 1[67 16[96 16[115 6[48 7[124 65[{
 TeXBase1Encoding ReEncodeFont }6 172.188 /Helvetica-Bold
rf /FH 104[64 40 27[35 37 38 60 43 43 26 24 32 40 38
38 46 67 23 41 20 24 40 35 23 31 41 31 40 38 8[58 80
60 63 50 38 57 66 46 66 61 1[49 57 26 28 64 64 41 49
63 58 47 58 6[20 11[20 20 20 31[42 12[{ TeXnANSIEncoding ReEncodeFont }
56 83.022 /GaramondNo8-Ita rf /FI 191[41 1[63 1[63 27[59
3[46 12[39 15[{}6 83.022 /MathDesign-GM-Regular-Italic-MathItalic-10
rf /FJ 162[31 1[31 29[63 17[63 1[28 28 40[{}6 83.022
/MathDesign-GM-Regular-OT1-10 rf /FK 190[44 5[15 7[28
28 28 28 1[15 1[15 44[{ TeXnANSIEncoding ReEncodeFont }8
58.1154 /GaramondNo8-Reg rf /FL 212[44 1[19 19 40[{}3
58.1154 /MathDesign-GM-Regular-OT1-10 rf /FM 162[28 1[28
91[{}2 74.7198 /MathDesign-GM-Regular-T1-10 rf /FN 105[36
27[34 40 37 56 37 40 25 26 29 39 40 40 41 62 21 41 1[21
41 34 23 32 39 32 40 32 7[54 1[73 54 61 51 36 52 1[44
63 63 67 45 54 28 25 63 59 44 47 59 55 45 56 7[36 36
36 36 36 36 36 36 36 36 1[19 19 19 2[22 22 27[42 12[{
 TeXnANSIEncoding ReEncodeFont }65 74.7198 /GaramondNo8-Reg
rf /FO 137[40 44 28 28 32 2[40 44 65 22 2[22 44 40 1[33
1[32 41 34 12[50 5[63 3[28 3[47 47 3[56 14[37 37 2[21
46[{ TeXnANSIEncoding ReEncodeFont }25 74.7198 /GaramondNo8-Med
rf /FP 134[49 6[49 49 2[49 8[49 3[49 97[{
 TeXBase1Encoding ReEncodeFont }6 81.8591 /Courier-Bold
rf /FQ 130[35 1[35 29[31 1[31 91[{}4 83.022 /MathDesign-GM-Regular-T1-10
rf /FR 22[35 65[40 18[35 35 24[38 44 41 63 41 44 28 29
32 43 44 44 46 69 23 46 21 23 46 38 26 35 43 35 44 35
8[63 81 1[67 57 40 58 1[49 70 70 75 50 60 1[28 70 66
49 52 66 61 50 63 5[21 21 40 40 40 40 40 40 40 40 40
40 1[21 21 21 2[24 24 23 26[46 3[46 8[{ TeXnANSIEncoding ReEncodeFont }
71 83.022 /GaramondNo8-Reg rf /FS 190[44 65[{
 TeXnANSIEncoding ReEncodeFont }1 58.1154 /GaramondNo8-Med
rf /FT 134[43 44 1[44 49 31 31 35 1[46 44 49 72 24 46
1[24 49 44 29 37 46 35 46 38 8[63 3[55 44 2[52 2[78 50
2[32 2[52 52 69 63 55 63 8[41 41 41 41 41 41 41 41 2[23
4[26 26 27[49 12[{ TeXnANSIEncoding ReEncodeFont }47
83.022 /GaramondNo8-Med rf /FU 134[115 115 2[126 69 115
80 1[126 126 126 184 57 115 1[57 126 126 69 115 126 115
126 115 8[138 3[126 138 2[138 2[172 126 2[57 2[126 138
1[149 149 149 65[{ TeXBase1Encoding ReEncodeFont }33
206.559 /Helvetica-Bold rf /FV 134[39 39 1[39 44 22 39
26 1[44 44 44 66 18 39 1[18 44 44 22 44 44 39 44 44 8[53
3[48 53 57 1[53 2[66 44 2[22 2[48 53 1[57 53 53 7[44
44 44 44 44 44 44 44 44 44 1[22 46[{ TeXBase1Encoding ReEncodeFont }46
78.8709 /Helvetica rf /FW 134[53 2[50 53 33 35 39 2[53
55 83 27 2[27 55 2[42 1[42 1[42 18[84 3[37 3[59 62 3[75
10[48 48 2[48 48 48 1[26 1[26 44[{ TeXnANSIEncoding ReEncodeFont }27
99.6264 /GaramondNo8-Reg rf /FX 139[48 50 56 3[79 1[40
2[40 3[61 16[98 10[48 122 72[{ TeXnANSIEncoding ReEncodeFont }10
143.462 /GaramondNo8-Reg rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 1176 1936 a FX(Inser)t(t)34 b(T)m(itle)f(Her)n(e)
708 2301 y FW(A.)23 b(Eins)q(t)o(ein,)j(Enr)q(ico)f(F)m(er)q(mi,)f
(John)g(v)m(on)g(N)o(eumann)1432 2542 y(Jul)n(y)i(6,)d(2015)p
eop end
%%Page: 2 2
TeXDict begin 2 1 bop -172 -79 3343 7 v -172 -121 a FV(2)p
eop end
%%Page: 1 3
TeXDict begin 1 2 bop 1226 776 a FU(Contents)173 1291
y FT(Pref)o(ace)2669 b(xi)173 1578 y(I)171 b(A)22 b(Sam)o(ple)i(P)m(ar)
r(t)g(P)m(age)2040 b(1)173 1760 y(1)167 b(Sam)o(ple)24
b(F)n(ile)g(f)n(or)g(SIAM)f(L)1214 1742 y FS(A)1246 1760
y FT(T)1287 1778 y(E)1329 1760 y(X)g(Book)h(Macr)o(o)g(P)m(ackage)964
b(3)381 1860 y FR(1.1)173 b(Intr)o(oduction)19 b(and)h(Exam)o(ples)43
b(.)31 b(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)
h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)147 b(3)655 1959
y(1.1.1)270 b(Sam)o(ple)20 b(t)o(e)o(xt)44 b(.)30 b(.)g(.)h(.)f(.)h(.)f
(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)
h(.)f(.)h(.)f(.)h(.)147 b(3)655 2059 y(1.1.2)270 b(Some)20
b(lis)q(t)f(en)n(vir)o(onments)48 b(.)30 b(.)h(.)f(.)h(.)f(.)h(.)f(.)g
(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)146
b(4)655 2159 y(1.1.3)270 b(An)19 b(algor)q(it)o(hm)24
b(.)30 b(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)
f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)147 b(5)655
2258 y(1.1.4)270 b(Some)20 b(displa)n(y)n(ed)h(equations)f(and)g
FQ({)p FP(eqnarray)p FQ(})p FR(s)44 b(.)30 b(.)h(.)f(.)h(.)f(.)h(.)147
b(5)381 2358 y(1.2)173 b(Main)20 b(R)o(esults)67 b(.)30
b(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f
(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)
146 b(6)655 2458 y(1.2.1)270 b(N)n(umer)q(ical)20 b(e)o(xper)q(iments)
48 b(.)30 b(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h
(.)f(.)h(.)f(.)h(.)147 b(9)381 2557 y(Ex)n(er)o(cises)65
b(.)31 b(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)
g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h
(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)107 b(11)173 2740
y FT(Bibliograph)n(y)2448 b(13)173 2922 y(Index)2710
b(15)1665 5220 y FV(i)p eop end
%%Page: 2 4
TeXDict begin 2 3 bop -172 -79 3343 7 v -172 -121 a FV(ii)2990
b(Contents)p eop end
%%Page: 3 5
TeXDict begin 3 4 bop 547 776 a FU(List)58 b(of)f(Contrib)l(utor)m(s)7
1308 y FO(A)q(.)21 b(Einstein)7 1399 y FN(Ins)q(titut)o(e)j(f)n(or)h(A)
n(dv)n(anced)f(Studies)7 1490 y(Pr)q(incet)o(on)17 b(U)m(niv)n(ersity)7
1686 y FO(Enr)q(ico)j(F)n(er)q(mi)7 1778 y FN(U)m(niv)n(ersity)e(of)g
(Chicago)7 1979 y FO(John)j(v)n(on)f(Neumann)7 2070 y
FN(Ins)q(titut)o(e)k(f)n(or)h(A)n(dv)n(anced)f(Studies)7
2162 y(Pr)q(incet)o(on)17 b(U)m(niv)n(ersity)7 2358 y
FO(A)q(.)k(Einstein)7 2449 y FN(Ins)q(titut)o(e)j(f)n(or)h(A)n(dv)n
(anced)f(Studies)7 2540 y(Pr)q(incet)o(on)17 b(U)m(niv)n(ersity)7
2736 y FO(Enr)q(ico)j(F)n(er)q(mi)7 2828 y FN(U)m(niv)n(ersity)e(of)g
(Chicago)1035 1308 y FO(John)i(v)n(on)h(Neumann)1035
1399 y FN(Ins)q(titut)o(e)j(f)n(or)h(A)n(dv)n(anced)f(Studies)1035
1490 y(Pr)q(incet)o(on)17 b(U)m(niv)n(ersity)1035 1664
y FO(A)q(.)j(Einstein)1035 1755 y FN(Ins)q(titut)o(e)k(f)n(or)h(A)n(dv)
n(anced)f(Studies)1035 1846 y(Pr)q(incet)o(on)17 b(U)m(niv)n(ersity)
1035 2020 y FO(Enr)q(ico)j(F)n(er)q(mi)1035 2111 y FN(U)m(niv)n(ersity)
e(of)g(Chicago)1035 2289 y FO(John)i(v)n(on)h(Neumann)1035
2380 y FN(Ins)q(titut)o(e)j(f)n(or)h(A)n(dv)n(anced)f(Studies)1035
2472 y(Pr)q(incet)o(on)17 b(U)m(niv)n(ersity)1035 2645
y FO(A)q(.)j(Einstein)1035 2736 y FN(Ins)q(titut)o(e)k(f)n(or)h(A)n(dv)
n(anced)f(Studies)1035 2828 y(Pr)q(incet)o(on)17 b(U)m(niv)n(ersity)
2063 1308 y FO(Enr)q(ico)i(F)n(er)q(mi)2063 1399 y FN(U)m(niv)n(ersity)
e(of)i(Chicago)2063 1599 y FO(John)h(v)n(on)g(Neumann)2063
1690 y FN(Ins)q(titut)o(e)j(f)n(or)i(A)n(dv)n(anced)g(Studies)2063
1782 y(Pr)q(incet)o(on)17 b(U)m(niv)n(ersity)2063 1976
y FO(A)q(.)j(Einstein)2063 2068 y FN(Ins)q(titut)o(e)j(f)n(or)i(A)n(dv)
n(anced)g(Studies)2063 2159 y(Pr)q(incet)o(on)17 b(U)m(niv)n(ersity)
2063 2354 y FO(Enr)q(ico)i(F)n(er)q(mi)2063 2445 y FN(U)m(niv)n(ersity)
e(of)i(Chicago)2063 2645 y FO(John)h(v)n(on)g(Neumann)2063
2736 y FN(Ins)q(titut)o(e)j(f)n(or)i(A)n(dv)n(anced)g(Studies)2063
2828 y(Pr)q(incet)o(on)17 b(U)m(niv)n(ersity)1481 5220
y FV(iii)p eop end
%%Page: 4 6
TeXDict begin 4 5 bop -172 -79 3343 7 v -172 -121 a FV(iv)2624
b(List)21 b(of)h(Contr)q(ib)n(utors)p eop end
%%Page: 5 7
TeXDict begin 5 6 bop 962 776 a FU(List)57 b(of)h(Figures)298
1229 y FR(1.1)173 b(Log)704 1251 y FK(10)781 1229 y FR(of)16
b(t)o(he)g(r)o(esidual)h(nor)q(m)f(v)n(ersus)i(t)o(he)e(number)h(of)f
(GMRES)p FJ(\()t FH(m)t FJ(\))g FR(it)o(er)o(ations)572
1328 y(f)n(or)k(t)o(he)g(\014nit)o(e)h(dif)q(f)n(er)o(ence)g(met)o
(hods.)44 b(.)31 b(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f
(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)147 b(8)298
1428 y(1.2)173 b(Log)704 1451 y FK(10)781 1428 y FR(of)16
b(t)o(he)g(r)o(esidual)h(nor)q(m)f(v)n(ersus)i(t)o(he)e(number)h(of)f
(GMRES)p FJ(\()t FH(m)t FJ(\))g FR(it)o(er)o(ations)572
1527 y(f)n(or)26 b FH(c)31 b FJ(=)25 b FH(d)33 b FJ(=)24
b FR(10)f(wit)o(h)h(f)o(as)q(t)f(P)l(oisson)i(pr)o(econditioning.)40
b(Solid)23 b(cur)r(v)n(e:)37 b(Algo-)572 1627 y(r)q(it)o(hm)19
b(EHA;)i(dott)o(ed)e(cur)r(v)n(e:)29 b(FDP)20 b(met)o(hod;)g(dashed)h
(cur)r(v)n(e:)28 b(FSP)20 b(met)o(hod.)54 b(.)107 b(10)1654
5220 y FV(v)p eop end
%%Page: 6 8
TeXDict begin 6 7 bop -172 -79 3343 7 v -172 -121 a FV(vi)2790
b(List)21 b(of)h(Figures)p eop end
%%Page: 7 9
TeXDict begin 7 8 bop 1017 776 a FU(List)58 b(of)f(T)-17
b(ab)n(les)298 1208 y FR(1.1)173 b(Statis)q(tics)13 b(o)n(v)n(er)g(20)g
(tr)q(ials)g(of)g(GMRES)p FJ(\()t FH(m)t FJ(\))g FR(it)o(er)o(ation)g
(numbers,)21 b FH(F)15 b FR(-ev)n(aluations,)572 1308
y(and)h(r)r(un)h(times)f(r)o(equir)o(ed)h(t)o(o)f(r)o(educe)i(t)o(he)e
(r)o(esidual)h(nor)q(m)g(b)n(y)g(a)g(f)o(act)o(or)f(of)h
FI(\017)p FR(.)26 b(F)n(or)572 1407 y(eac)n(h)d(met)o(hod,)g(t)o(he)f
(number)h(of)f(GMRES)p FJ(\()t FH(m)t FJ(\))g FR(it)o(er)o(ations)h
(and)h FH(F)14 b FR(-ev)n(aluations)572 1507 y(w)n(as)20
b(t)o(he)g(same)h(in)e(ev)n(er)r(y)j(tr)q(ial.)32 b(.)e(.)g(.)h(.)f(.)h
(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)
g(.)h(.)f(.)h(.)f(.)h(.)147 b(9)1636 5220 y FV(vii)p
eop end
%%Page: 8 10
TeXDict begin 8 9 bop -172 -79 3343 7 v -172 -121 a FV(viii)2791
b(List)22 b(of)f(T)-9 b(ab)n(les)p eop end
%%Page: 9 11
TeXDict begin 9 10 bop 761 776 a FU(List)58 b(of)f(Algorithms)173
1229 y FR(Algor)q(it)o(hm)20 b(1.1)248 b(.)31 b(.)f(.)h(.)f(.)h(.)f(.)g
(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)
f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)147
b(5)1645 5220 y FV(ix)p eop end
%%Page: 10 12
TeXDict begin 10 11 bop -172 -79 3343 7 v -172 -121 a
FV(x)2697 b(List)22 b(of)f(Algor)q(ithms)p eop end
%%Page: 11 13
TeXDict begin 11 12 bop 1300 776 a FU(Preface)298 1208
y FR(This)19 b(is)h(t)o(he)f(pr)o(ef)o(ace.)28 b(This)19
b(is)h(t)o(he)g(pr)o(ef)o(ace.)28 b(This)19 b(is)g(t)o(he)h(pr)o(ef)o
(ace.)28 b(This)19 b(is)h(t)o(he)f(pr)o(ef)o(ace.)28
b(This)19 b(is)173 1308 y(t)o(he)h(pr)o(ef)o(ace.)28
b(This)20 b(is)g(t)o(he)g(pr)o(ef)o(ace.)28 b(This)20
b(is)g(t)o(he)g(pr)o(ef)o(ace.)28 b(This)20 b(is)g(t)o(he)g(pr)o(ef)o
(ace.)1645 5220 y FV(xi)p eop end
%%Page: 12 14
TeXDict begin 12 13 bop -172 -79 3343 7 v -172 -121 a
FV(xii)2998 b(Pref)n(ace)p eop end
%%Page: 1 15
TeXDict begin 1 14 bop 1459 917 a FG(P)-5 b(ar)s(t)48
b(I)702 1333 y FU(A)57 b(Sample)g(P)-6 b(ar)t(t)58 b(P)-6
b(a)n(g)r(e)p eop end
%%Page: 2 16
TeXDict begin 2 15 bop eop end
%%Page: 3 17
TeXDict begin 3 16 bop 173 261 a FF(Chapter)34 b(1)173
535 y FU(Sample)57 b(File)i(f)l(or)e(SIAM)173 785 y(L)225
760 y FG(A)318 785 y FU(T)410 839 y(E)522 785 y(X)g(Book)h(Macr)l(o)173
1034 y(P)-6 b(ac)l(ka)n(g)r(e)1170 1656 y FH(W)m(e)19
b(ha)n(v)q(e)g(no)o(t)q(hing)h(to)h(f)o(ear)f(but)f(f)o(ear)h(itself.)
1170 1756 y(\227)p FR(F)m(r)o(anklin)g(D.)g(R)n(oosev)n(elt)1170
1905 y FH(I)f(am)i(no)o(t)f(a)g(cr)o(ook)q(.)1170 2005
y(\227)p FR(Ric)n(har)o(d)g(M.)h(Nix)m(on)-175 2275 y
FE(1.1)p 17 2260 30 30 v 104 w(Intr)n(oduction)35 b(and)d(Examples)173
2427 y FR(This)18 b(paper)h(pr)o(esents)f(a)g(sam)o(ple)g(\014le)g(f)n
(or)g(t)o(he)f(use)i(of)f(SIAM')o(s)e(L)2028 2409 y FK(A)2060
2427 y FR(T)2103 2444 y(E)2145 2427 y(X)h(macr)o(o)h(pac)n(kage.)28
b(It)17 b(illus)q(tr)o(at)o(es)173 2526 y(t)o(he)h(f)n(eatur)o(es)g(of)
g(t)o(he)774 2496 y FK(1)824 2526 y FR(macr)o(o)g(pac)n(kage,)h(using)f
(actual)g(e)o(xam)o(ples)h(culled)f(fr)o(om)g(v)n(ar)q(ious)g(papers)i
(pub-)173 2626 y(lished)j(in)g(SIAM')o(s)f(jour)q(nals.)37
b(It)23 b(is)g(t)o(o)f(be)i(e)o(xpect)o(ed)h(t)o(hat)e(t)o(his)f(sam)o
(ple)i(will)f(pr)o(o)n(vide)g(e)o(xam)o(ples)i(of)173
2726 y(ho)n(w)15 b(t)o(o)g(use)g(t)o(he)g(macr)o(os)h(t)o(o)f(gener)o
(at)o(e)h(s)q(tandar)o(d)e(elements)h(of)g(jour)q(nal)i(papers,)h
(e.g.,)g(t)o(heor)o(ems,)f(def-)173 2825 y(initions,)25
b(or)f(\014gur)o(es.)38 b(This)23 b(paper)i(also)f(ser)r(v)n(es)g(as)g
(an)g(e)o(xam)o(ple)g(of)g(SIAM')o(s)e(s)q(ty)n(lis)q(tic)i(pr)o(ef)n
(er)o(ences)173 2925 y(f)n(or)e(t)o(he)f(f)n(or)q(matting)g(of)g(suc)n
(h)h(elements)g(as)f(bibliogr)o(aphic)j(r)o(ef)n(er)o(ences,)f(displa)n
(y)n(ed)f(equations,)g(and)173 3024 y(equation)17 b(arr)o(a)n(ys,)j
(among)e(ot)o(hers.)26 b(Some)17 b(special)h(cir)o(cums)q(tances)g(ar)o
(e)f(not)f(dealt)h(wit)o(h)f(in)h(t)o(his)g(sam-)173
3124 y(ple)k(\014le;)g(f)n(or)f(suc)n(h)h(inf)n(or)q(mation)f(one)g
(should)h(see)g(t)o(he)f(included)g(documentation)h(\014le.)298
3224 y FH(N)o(o)o(t)q(e:)36 b FR(This)24 b(paper)i(is)e(not)g(t)o(o)g
(be)h(r)o(ead)g(in)g(an)n(y)f(f)n(or)q(m)h(f)n(or)g(cont)o(ent.)40
b(The)25 b(conglomer)o(ation)h(of)173 3323 y(equations,)g(lemmas,)f
(and)f(ot)o(her)g(t)o(e)o(xt)h(elements)f(w)n(er)o(e)g(put)g(t)o(oget)o
(her)g(solel)o(y)g(f)n(or)h(typogr)o(aphic)h(il-)173
3423 y(lus)q(tr)o(ativ)n(e)21 b(pur)q(poses)i(and)d(don)n(')o(t)e(mak)n
(e)j(an)n(y)f(sense)h(as)f(lemmas,)h(equations,)g(etc.)-175
3667 y FD(1.1.1)p 68 3654 26 26 v 87 w(Sample)27 b(te)o(xt)173
3823 y FR(Let)d FH(S)h FJ(=)19 b([)t FH(s)515 3846 y
FB(i)12 b(j)571 3823 y FJ(])21 b FR(\(1)e FA(\024)i FH(i)8
b FR(,)20 b FH(j)31 b FA(\024)21 b FH(n)t FR(\))g(be)h(a)g
FJ(\()p FR(0,)10 b(1,)g FA(\000)p FR(1)p FJ(\))p FR(-matr)q(ix)21
b(of)g(or)o(der)j FH(n)t FR(.)31 b(Then)22 b FH(S)28
b FR(is)22 b(a)f FH(sign-nonsingular)173 3936 y(matr)q(ix)d
FR(\(SNS-matr)q(ix\))f(pr)o(o)n(vided)g(t)o(hat)e(eac)n(h)i(r)o(eal)g
(matr)q(ix)f(wit)o(h)g(t)o(he)g(same)g(sign)h(patt)o(er)q(n)f(as)j
FH(S)j FR(is)17 b(non-)173 4035 y(singular)-5 b(.)38
b(Ther)o(e)23 b(has)g(been)h(consider)o(able)h(r)o(ecent)e(int)o(er)o
(es)q(t)g(in)g(cons)q(tr)r(ucting)g(and)g(c)n(har)o(act)o(er)q(izing)
173 4135 y(SNS-matr)q(ices)18 b FQ([)p FR(1)p FQ(])p
FR(,)g FQ([)p FR(4)p FQ(])p FR(.)27 b(Ther)o(e)17 b(has)h(also)g(been)g
(int)o(er)o(es)q(t)f(in)g(s)q(tr)o(ong)h(f)n(or)q(ms)f(of)h
(sign-nonsingular)q(ity)173 4235 y FQ([)p FR(2)p FQ(])p
FR(.)37 b(In)23 b(t)o(his)g(paper)h(w)n(e)f(giv)n(e)h(a)f(new)g(gener)o
(alization)h(of)g(SNS-matr)q(ices)f(and)h(in)n(v)n(es)q(tigat)o(e)f
(some)h(of)173 4334 y(t)o(heir)c(basic)h(pr)o(oper)r(ties.)298
4434 y(Let)28 b FH(S)34 b FJ(=)27 b([)t FH(s)661 4457
y FB(i)12 b(j)717 4434 y FJ(])26 b FR(be)h(a)f FJ(\()p
FR(0,)10 b(1,)g FA(\000)p FR(1)p FJ(\))p FR(-matr)q(ix)26
b(of)h(or)o(der)i FH(n)h FR(and)c(let)g FH(C)38 b FJ(=)27
b([)r FH(c)2418 4457 y FB(i)12 b(j)2473 4434 y FJ(])26
b FR(be)h(a)g(r)o(eal)f(matr)q(ix)g(of)173 4546 y(or)o(der)21
b FH(n)t FR(.)26 b(The)18 b(pair)g FJ(\()r FH(S)6 b FR(,)k
FH(C)h FJ(\))19 b FR(is)f(called)g(a)g FH(matr)q(ix)h(pair)g(of)f(or)o
(der)j(n)t FR(.)26 b(Thr)o(oughout,)20 b FH(X)29 b FJ(=)17
b([)t FH(x)2810 4569 y FB(i)12 b(j)2865 4546 y FJ(])18
b FR(denot)o(es)173 4659 y(a)23 b(matr)q(ix)f(of)h(or)o(der)i
FH(n)h FR(whose)d(entr)q(ies)f(ar)o(e)h(algebr)o(aicall)o(y)h
(independent)e(indet)o(er)q(minat)o(es)h(o)n(v)n(er)g(t)o(he)173
4758 y(r)o(eal)16 b(\014eld.)26 b(Let)18 b FH(S)11 b
FA(\016)t FH(X)28 b FR(denot)o(e)16 b(t)o(he)f(Hadamar)o(d)h(pr)o
(oduct)g(\(entr)r(ywise)h(pr)o(oduct\))g(of)h FH(S)k
FR(and)16 b FH(X)c FR(.)26 b(W)-6 b(e)15 b(sa)n(y)p 173
4852 1200 5 v 265 4907 a Fz(1)293 4932 y Fy(This)j(is)g(a)f(sam)o(ple)i
(f)n(ootnote.)j(This)c(is)g(a)g(sam)o(ple)g(f)n(ootnote.)23
b(This)18 b(is)g(a)f(sam)o(ple)h(f)n(ootnote.)23 b(This)18
b(is)g(a)g(sam)o(ple)g(f)n(ootnote.)173 5010 y(This)f(is)g(a)f(sam)o
(ple)h(f)n(ootnote.)h(This)f(is)g(a)f(sam)o(ple)h(f)n(ootnote.)1651
5220 y FV(3)p eop end
%%Page: 4 18
TeXDict begin 4 17 bop -172 -79 3343 7 v -172 -121 a
FV(4)1179 b(Chapter)21 b(1.)49 b(Sample)20 b(File)h(f)n(or)h(SIAM)e(L)
2248 -138 y Fx(A)2273 -121 y FV(T)2308 -100 y(E)2351
-121 y(X)h(Book)h(Macro)g(P)m(ac)n(kage)173 112 y FR(t)o(hat)j(t)o(he)g
(pair)g FJ(\()r FH(S)6 b FR(,)k FH(C)h FJ(\))26 b FR(is)f(a)g
FH(sign-nonsingular)i(matr)q(ix)f(pair)g(of)f(or)o(der)i(n)t
FR(,)f(abbr)o(eviat)o(ed)h(SNS-)p FH(matr)q(ix)173 212
y(pair)22 b(of)e(or)o(der)i(n)t FR(,)f(pr)o(o)n(vided)f(t)o(hat)g(t)o
(he)g(matr)q(ix)1427 385 y FH(A)12 b FJ(=)19 b FH(S)h
FA(\016)13 b FH(X)26 b FJ(+)13 b FH(C)173 559 y FR(is)k(nonsingular)h
(f)n(or)f(all)g(positiv)n(e)h(r)o(eal)f(v)n(alues)h(of)g(t)o(he)j
FH(x)1784 582 y FB(i)12 b(j)1839 559 y FR(.)26 b(If)16
b FH(C)28 b FJ(=)17 b FH(O)23 b FR(t)o(hen)17 b(t)o(he)g(pair)g
FJ(\()r FH(S)6 b FR(,)k FH(O)c FJ(\))18 b FR(is)f(a)g(SNS-)173
671 y(matr)q(ix)g(pair)h(if)g(and)f(onl)o(y)h(if)h FH(S)24
b FR(is)18 b(a)g(SNS-matr)q(ix.)26 b(If)19 b FH(S)k FJ(=)17
b FH(O)23 b FR(t)o(hen)18 b(t)o(he)f(pair)h FJ(\()p FH(O)6
b FR(,)k FH(C)h FJ(\))18 b FR(is)g(a)f(SNS-matr)q(ix)173
771 y(pair)29 b(if)f(and)f(onl)o(y)i(if)e FH(C)40 b FR(is)27
b(nonsingular)-5 b(.)52 b(Thus)28 b(SNS-matr)q(ix)g(pairs)h(include)f
(bot)o(h)g(nonsingular)173 871 y(matr)q(ices)20 b(and)g
(sign-nonsingular)i(matr)q(ices)e(as)g(special)h(cases.)298
970 y(The)f(pairs)h FJ(\()r FH(S)6 b FR(,)k FH(C)h FJ(\))21
b FR(wit)o(h)1089 1194 y FH(S)j FJ(=)1230 1086 y Fw(\225)1313
1144 y FR(1)83 b(0)1313 1244 y(0)g(0)1517 1086 y Fw(\230)1568
1194 y FR(,)177 b FH(C)28 b FJ(=)1932 1086 y Fw(\225)2014
1144 y FR(1)83 b(1)2014 1244 y(1)g(1)2218 1086 y Fw(\230)173
1421 y FR(and)925 1603 y FH(S)24 b FJ(=)1067 1436 y Fw(2)1067
1588 y(4)1170 1503 y FR(1)83 b(1)g(0)1170 1603 y(1)g(1)g(0)1170
1702 y(0)g(0)g(0)1497 1436 y Fw(3)1497 1588 y(5)1568
1603 y FR(,)177 b FH(C)28 b FJ(=)1932 1436 y Fw(2)1932
1588 y(4)2035 1503 y FR(0)83 b(0)f(1)2035 1603 y(0)h(2)f(0)2035
1702 y(3)h(0)f(0)2362 1436 y Fw(3)2362 1588 y(5)173 1853
y FR(ar)o(e)21 b(e)o(xam)o(ples)g(of)g(SNS-matr)q(ix)f(pairs.)-175
2077 y FD(1.1.2)p 68 2064 26 26 v 87 w(Some)27 b(list)e(en)l(vir)n
(onments)173 2229 y FR(In)20 b(t)o(his)g(paper)h(w)n(e)f(consider)h(t)o
(he)f(ev)n(aluation)h(of)f(int)o(egr)o(als)i(of)e(t)o(he)g(f)n(ollo)n
(wing)g(f)n(or)q(ms:)961 2366 y Fw(Z)1041 2387 y FB(b)1010
2564 y(a)1089 2350 y Fw(\202)1142 2404 y(X)1190 2574
y FB(i)1272 2482 y FH(E)1322 2505 y FB(i)1349 2482 y
FH(B)1397 2505 y FB(i)6 b FK(,)q FB(k)f FK(,)s FB(x)1525
2482 y FJ(\()t FH(t)10 b FJ(\))1621 2350 y Fw(\214)1683
2337 y( )1738 2404 y(X)1790 2574 y FB(j)1868 2482 y FH(F)1916
2505 y FB(j)1942 2482 y FH(B)1996 2505 y FB(j)d FK(,)s
FB(l)g FK(,)q FB(y)2110 2482 y FJ(\()t FH(t)j FJ(\))2206
2337 y Fw(!)2273 2482 y FH(d)j(t)d FR(,)639 b(\(1.1\))1176
2700 y Fw(Z)1255 2721 y FB(b)1225 2899 y(a)1314 2816
y FH(f)21 b FJ(\()t FH(t)10 b FJ(\))1464 2684 y Fw(\202)1516
2738 y(X)1564 2909 y FB(i)1646 2816 y FH(E)1696 2839
y FB(i)1723 2816 y FH(B)1771 2839 y FB(i)c FK(,)q FB(k)f
FK(,)s FB(x)1899 2816 y FJ(\()t FH(t)10 b FJ(\))1995
2684 y Fw(\214)2059 2816 y FH(d)j(t)d FR(,)853 b(\(1.2\))173
3033 y(wher)o(e)17 b FH(B)448 3056 y FB(i)6 b FK(,)q
FB(k)f FK(,)s FB(x)592 3033 y FR(is)16 b(t)o(he)j FH(i)8
b FR(t)o(h)17 b(B-spline)h(of)f(or)o(der)i FH(k)k FR(de\014ned)16
b(o)n(v)n(er)h(t)o(he)g(knots)j FH(x)2359 3056 y FB(i)2387
3033 y FR(,)14 b FH(x)2461 3056 y FB(i)6 b FL(+)p FK(1)2561
3033 y FR(,)k(.)g(.)g(.)i(,)i FH(x)2761 3056 y FB(i)6
b FL(+)q FB(k)2868 3033 y FR(.)26 b(W)-6 b(e)17 b(will)173
3132 y(consider)g(B-splines)h(nor)q(malized)e(so)h(t)o(hat)f(t)o(heir)g
(int)o(egr)o(al)h(is)f(one.)26 b(The)16 b(splines)h(ma)n(y)g(be)f(of)h
(dif)q(f)n(er)o(ent)173 3232 y(or)o(ders)25 b(and)e(de\014ned)g(on)h
(dif)q(f)n(er)o(ent)g(knot)e(sequences)28 b FH(x)i FR(and)c
FH(y)6 b FR(.)37 b(Of)r(t)o(en)23 b(t)o(he)h(limits)e(of)i(int)o(egr)o
(ation)173 3331 y(will)h(be)g(t)o(he)g(entir)o(e)g(r)o(eal)g(line,)h
FA(\0001)f FR(t)o(o)g FJ(+)p FA(1)p FR(.)41 b(N)n(ot)o(e)26
b(t)o(hat)e(\(1.1\))i(is)f(a)g(special)h(case)f(of)g(\(1.2\))h(wher)o
(e)183 3431 y FH(f)c FJ(\()t FH(t)10 b FJ(\))19 b FR(is)h(a)g(spline.)
298 3531 y(Ther)o(e)k(ar)o(e)h(\014v)n(e)f(dif)q(f)n(er)o(ent)h(met)o
(hods)f(f)n(or)h(calculating)f(\(1.1\))i(t)o(hat)d(will)h(be)g
(consider)o(ed;)k(her)o(e)c(is)173 3630 y(t)o(he)c Fv(remunerate)i
FR(lis)q(t:)270 3789 y(1.)42 b(Use)20 b(Gauss)h(quadr)o(atur)o(e)g(on)f
(eac)n(h)h(int)o(er)r(v)n(al.)270 3905 y(2.)42 b(Con)n(v)n(er)r(t)26
b(t)o(he)g(int)o(egr)o(al)h(t)o(o)f(a)g(linear)g(combination)g(of)h
(int)o(egr)o(als)g(of)f(pr)o(oducts)h(of)f(B-splines)373
4005 y(and)20 b(pr)o(o)n(vide)g(a)g(r)o(ecurr)o(ence)j(f)n(or)d(int)o
(egr)o(ating)h(t)o(he)f(pr)o(oduct)h(of)f(a)g(pair)h(of)g(B-splines.)
270 4121 y(3.)42 b(Con)n(v)n(er)r(t)20 b(t)o(he)f(sums)h(of)g
(B-splines)h(t)o(o)f(piecewise)g(B\351zier)g(f)n(or)q(mat)f(and)h(int)o
(egr)o(at)o(e)h(segment)e(b)n(y)373 4221 y(segment)h(using)g(t)o(he)h
(pr)o(oper)r(ties)g(of)g(t)o(he)f(Ber)q(ns)q(t)o(ein)g(pol)o(ynomials.)
270 4337 y(4.)42 b(Expr)o(ess)21 b(t)o(he)g(pr)o(oduct)g(of)f(a)h(pair)
g(of)g(B-splines)h(as)e(a)h(linear)f(combination)h(of)g(B-splines.)30
b(Use)373 4437 y(t)o(his)18 b(t)o(o)h(r)o(ef)n(or)q(mulat)o(e)g(t)o(he)
g(int)o(egr)o(and)h(as)e(a)h(linear)g(combination)g(of)h(B-splines,)g
(and)f(int)o(egr)o(at)o(e)373 4536 y(t)o(er)q(m)h(b)n(y)h(t)o(er)q(m.)
270 4652 y(5.)42 b(Int)o(egr)o(at)o(e)21 b(b)n(y)g(par)r(ts.)173
4811 y(Of)f(t)o(hese)g(\014v)n(e,)h(onl)o(y)e(met)o(hods)h(1)g(and)f(5)
g(ar)o(e)h(suitable)g(f)n(or)g(calculating)g(\(1.2\).)28
b(The)19 b(\014rs)q(t)h(f)n(our)g(met)o(h-)173 4911 y(ods)h(will)e(be)i
(t)o(ouc)n(hed)g(on)f(and)g(t)o(he)g(las)q(t)g(will)f(be)i(discussed)g
(at)f(lengt)o(h.)298 5010 y(Her)o(e)h(is)f(t)o(he)g(bullet)h(lis)q(t:)p
eop end
%%Page: 5 19
TeXDict begin 5 18 bop -172 -79 3343 7 v -172 -121 a
FV(1.1.)48 b(Introduction)21 b(and)h(Examples)2183 b(5)291
103 y FA(\017)373 112 y FR(Use)20 b(Gauss)h(quadr)o(atur)o(e)g(on)f
(eac)n(h)h(int)o(er)r(v)n(al.)291 219 y FA(\017)373 228
y FR(Con)n(v)n(er)r(t)26 b(t)o(he)g(int)o(egr)o(al)h(t)o(o)f(a)g
(linear)g(combination)g(of)h(int)o(egr)o(als)g(of)f(pr)o(oducts)h(of)f
(B-splines)373 328 y(and)20 b(pr)o(o)n(vide)g(a)g(r)o(ecurr)o(ence)j(f)
n(or)d(int)o(egr)o(ating)h(t)o(he)f(pr)o(oduct)h(of)f(a)g(pair)h(of)g
(B-splines.)291 435 y FA(\017)373 444 y FR(Con)n(v)n(er)r(t)f(t)o(he)f
(sums)h(of)g(B-splines)h(t)o(o)f(piecewise)g(B\351zier)g(f)n(or)q(mat)f
(and)h(int)o(egr)o(at)o(e)h(segment)e(b)n(y)373 544 y(segment)h(using)g
(t)o(he)h(pr)o(oper)r(ties)g(of)g(t)o(he)f(Ber)q(ns)q(t)o(ein)g(pol)o
(ynomials.)291 651 y FA(\017)373 660 y FR(Expr)o(ess)h(t)o(he)g(pr)o
(oduct)g(of)f(a)h(pair)g(of)g(B-splines)h(as)e(a)h(linear)f
(combination)h(of)g(B-splines.)30 b(Use)373 760 y(t)o(his)18
b(t)o(o)h(r)o(ef)n(or)q(mulat)o(e)g(t)o(he)g(int)o(egr)o(and)h(as)e(a)h
(linear)g(combination)g(of)h(B-splines,)g(and)f(int)o(egr)o(at)o(e)373
859 y(t)o(er)q(m)h(b)n(y)h(t)o(er)q(m.)291 967 y FA(\017)373
976 y FR(Int)o(egr)o(at)o(e)g(b)n(y)g(par)r(ts.)173 1131
y(and,)g(\014nall)o(y)-6 b(,)20 b(t)o(he)g Fv(romannum)h
FR(lis)q(t:)259 1286 y(\(i\))43 b(Use)20 b(Gauss)h(quadr)o(atur)o(e)g
(on)f(eac)n(h)h(int)o(er)r(v)n(al.)236 1403 y(\(ii\))43
b(Con)n(v)n(er)r(t)26 b(t)o(he)g(int)o(egr)o(al)h(t)o(o)f(a)g(linear)g
(combination)g(of)h(int)o(egr)o(als)g(of)f(pr)o(oducts)h(of)f
(B-splines)373 1502 y(and)20 b(pr)o(o)n(vide)g(a)g(r)o(ecurr)o(ence)j
(f)n(or)d(int)o(egr)o(ating)h(t)o(he)f(pr)o(oduct)h(of)f(a)g(pair)h(of)
g(B-splines.)213 1618 y(\(iii\))43 b(Con)n(v)n(er)r(t)20
b(t)o(he)f(sums)h(of)g(B-splines)h(t)o(o)f(piecewise)g(B\351zier)g(f)n
(or)q(mat)f(and)h(int)o(egr)o(at)o(e)h(segment)e(b)n(y)373
1718 y(segment)h(using)g(t)o(he)h(pr)o(oper)r(ties)g(of)g(t)o(he)f(Ber)
q(ns)q(t)o(ein)g(pol)o(ynomials.)218 1834 y(\(iv\))43
b(Expr)o(ess)21 b(t)o(he)g(pr)o(oduct)g(of)f(a)h(pair)g(of)g(B-splines)
h(as)e(a)h(linear)f(combination)h(of)g(B-splines.)30
b(Use)373 1934 y(t)o(his)18 b(t)o(o)h(r)o(ef)n(or)q(mulat)o(e)g(t)o(he)
g(int)o(egr)o(and)h(as)e(a)h(linear)g(combination)g(of)h(B-splines,)g
(and)f(int)o(egr)o(at)o(e)373 2034 y(t)o(er)q(m)h(b)n(y)h(t)o(er)q(m.)
241 2150 y(\(v\))43 b(Int)o(egr)o(at)o(e)21 b(b)n(y)g(par)r(ts.)-175
2373 y FD(1.1.3)p 68 2360 26 26 v 87 w(An)27 b(algorithm)173
2525 y FR(Her)o(e)21 b(is)f(a)h(sam)o(ple)f(algor)q(it)o(hm:)173
2724 y Ft(A)r Fu(L)t(G)t(O)t(R)t(I)t(T)t(H)t(M)26 b Ft(1.1.)173
2824 y FR(The)20 b(Sam)o(ple)g(Algor)q(it)o(hm)g(F)n(or)i
FH(i)k FJ(=)17 b FR(1)j(t)o(o)f(10)173 2923 y(pr)q(int)h(\223Hello)h(w)
m(or)o(ld\224)173 3023 y(end)298 3222 y(Some)28 b(t)o(e)o(xt)g(af)r(t)o
(er)g(t)o(he)g(algor)q(it)o(hm.)50 b(Some)28 b(t)o(e)o(xt)g(af)r(t)o
(er)g(t)o(he)g(algor)q(it)o(hm.)50 b(Some)28 b(t)o(e)o(xt)g(af)r(t)o
(er)g(t)o(he)173 3322 y(algor)q(it)o(hm.)g(Some)20 b(t)o(e)o(xt)g(af)r
(t)o(er)h(t)o(he)f(algor)q(it)o(hm.)27 b(Some)21 b(t)o(e)o(xt)f(af)r(t)
o(er)h(t)o(he)f(algor)q(it)o(hm.)-175 3545 y FD(1.1.4)p
68 3532 V 87 w(Some)27 b(displa)n(y)o(ed)g(equations)g(and)h({)p
Fs(eqnarray)p FD(}s)173 3697 y FR(By)21 b(intr)o(oducing)f(t)o(he)h(pr)
o(oduct)f(t)o(opology)i(on)g FH(R)1629 3666 y FB(m)s
Fr(\002)s FB(m)1794 3697 y FA(\002)15 b FH(R)1930 3666
y FB(n)s Fr(\002)q FB(n)2070 3697 y FR(wit)o(h)20 b(t)o(he)g(induced)g
(inner)g(pr)o(oduct)1002 3866 y FA(h)p FJ(\()p FH(A)1114
3889 y FK(1)1146 3866 y FR(,)10 b FH(B)1224 3889 y FK(1)1257
3866 y FJ(\))p FR(,)g FJ(\()p FH(A)1398 3889 y FK(2)1430
3866 y FR(,)g FH(B)1508 3889 y FK(2)1541 3866 y FJ(\))p
FA(i)17 b FR(:)p FJ(=)g FA(h)p FH(A)1801 3889 y FK(1)1834
3866 y FR(,)10 b FH(A)1919 3889 y FK(2)1951 3866 y FA(i)j
FJ(+)g FA(h)p FH(B)2147 3889 y FK(1)2182 3866 y FR(,)d
FH(B)2260 3889 y FK(2)2293 3866 y FA(i)p FR(,)644 b(\(1.3a\))173
4036 y(w)n(e)20 b(calculat)o(e)h(t)o(he)f(F)m(r)o(\351c)n(het)h(der)q
(iv)n(ativ)n(e)f(of)j FH(F)34 b FR(as)20 b(f)n(ollo)n(w)o(s:)468
4205 y FH(F)523 4170 y Fr(0)545 4205 y FJ(\()r FH(U)8
b FR(,)g FH(V)15 b FJ(\)\()r FH(H)10 b FR(,)g FH(K)d
FJ(\))17 b(=)g FA(h)r FH(R)p FJ(\()r FH(U)8 b FR(,)g
FH(V)16 b FJ(\))p FR(,)c FH(H)e Fq(\006)n FH(V)1664 4170
y FB(T)1727 4205 y FJ(+)15 b FH(U)c Fq(\006)p FH(K)2001
4170 y FB(T)2065 4205 y FA(\000)k FH(P)9 b FJ(\()r FH(H)h
Fq(\006)n FH(V)2435 4170 y FB(T)2498 4205 y FJ(+)15 b
FH(U)c Fq(\006)p FH(K)2772 4170 y FB(T)2823 4205 y FJ(\))p
FA(i)1022 4339 y FJ(=)17 b FA(h)r FH(R)p FJ(\()r FH(U)8
b FR(,)g FH(V)16 b FJ(\))p FR(,)c FH(H)e Fq(\006)n FH(V)1664
4304 y FB(T)1727 4339 y FJ(+)15 b FH(U)c Fq(\006)p FH(K)2001
4304 y FB(T)2052 4339 y FA(i)897 b FR(\(1.3b\))1022 4473
y FJ(=)17 b FA(h)r FH(R)p FJ(\()r FH(U)8 b FR(,)g FH(V)16
b FJ(\))n FH(V)f Fq(\006)1556 4438 y FB(T)1606 4473 y
FR(,)d FH(H)e FA(i)j FJ(+)g FA(h)p Fq(\006)1920 4438
y FB(T)1975 4473 y FH(U)2049 4438 y FB(T)2101 4473 y
FH(R)p FJ(\()r FH(U)7 b FR(,)h FH(V)16 b FJ(\))p FR(,)10
b FH(K)2486 4438 y FB(T)2536 4473 y FA(i)p FR(.)173 4642
y(In)k(t)o(he)g(middle)g(line)g(of)g(\(1.3b\))g(w)n(e)g(ha)n(v)n(e)g
(used)g(t)o(he)g(f)o(act)g(t)o(hat)g(t)o(he)g(r)o(ange)g(of)i
FH(R)e FR(is)g(alw)n(a)n(ys)g(per)q(pendicular)173 4742
y(t)o(o)27 b(t)o(he)g(r)o(ange)g(of)j FH(P)9 b FR(.)47
b(The)27 b(gr)o(adient)g FA(r)r FH(F)41 b FR(of)30 b
FH(F)14 b FR(,)29 b(t)o(her)o(ef)n(or)o(e,)h(ma)n(y)e(be)f(int)o(er)q
(pr)o(et)o(ed)h(as)f(t)o(he)g(pair)h(of)173 4841 y(matr)q(ices:)632
5010 y FA(r)r FH(F)14 b FJ(\()r FH(U)8 b FR(,)g FH(V)15
b FJ(\))i(=)g(\()r FH(R)p FJ(\()r FH(U)7 b FR(,)h FH(V)16
b FJ(\))n FH(V)f Fq(\006)1538 4976 y FB(T)1588 5010 y
FR(,)d FH(R)p FJ(\()r FH(U)c FR(,)g FH(V)16 b FJ(\))1912
4976 y FB(T)1964 5010 y FH(U)10 b Fq(\006)p FJ(\))17
b FA(2)i FH(R)2273 4976 y FB(m)s Fr(\002)s FB(m)2437
5010 y FA(\002)c FH(R)2573 4976 y FB(n)s Fr(\002)q FB(n)2694
5010 y FR(.)273 b(\(1.3c\))p eop end
%%Page: 6 20
TeXDict begin 6 19 bop -172 -79 3343 7 v -172 -121 a
FV(6)1179 b(Chapter)21 b(1.)49 b(Sample)20 b(File)h(f)n(or)h(SIAM)e(L)
2248 -138 y Fx(A)2273 -121 y FV(T)2308 -100 y(E)2351
-121 y(X)h(Book)h(Macro)g(P)m(ac)n(kage)173 112 y FR(Because)g(of)f(t)o
(he)f(pr)o(oduct)g(t)o(opology)-6 b(,)22 b(w)n(e)e(kno)n(w)888
307 y FA(T)968 329 y FL(\()q FB(U)6 b FK(,)o FB(V)11
b FL(\))1128 307 y FJ(\()p FA(O)16 b FJ(\()t FH(m)t FJ(\))d
FA(\002)g(O)j FJ(\()r FH(n)t FJ(\)\))g(=)h FA(T)1803
329 y FB(U)1859 307 y FA(O)f FJ(\()t FH(m)t FJ(\))d FA(\002)g(T)2203
329 y FB(V)2261 307 y FA(O)i FJ(\()r FH(n)t FJ(\))p FR(,)522
b(\(1.3d\))173 514 y(wher)o(e)24 b FA(T)463 536 y FL(\()q
FB(U)7 b FK(,)o FB(V)k FL(\))624 514 y FJ(\()p FA(O)k
FJ(\()t FH(m)t FJ(\))h FA(\002)g(O)g FJ(\()r FH(n)t FJ(\)\))23
b FR(s)q(tands)g(f)n(or)h(t)o(he)g(tangent)f(space)i(t)o(o)e(t)o(he)h
(manif)n(old)g FA(O)15 b FJ(\()t FH(m)t FJ(\))h FA(\002)g(O)g
FJ(\()r FH(n)t FJ(\))173 626 y FR(at)22 b FJ(\()r FH(U)8
b FR(,)g FH(V)16 b FJ(\))j FA(2)h(O)c FJ(\()t FH(m)t
FJ(\))f FA(\002)f(O)i FJ(\()r FH(n)t FJ(\))22 b FR(and)g(so)g(on.)33
b(The)22 b(pr)o(ojection)h(of)g FA(r)r FH(F)14 b FJ(\()r
FH(U)8 b FR(,)g FH(V)15 b FJ(\))22 b FR(ont)o(o)g FA(T)2707
649 y FL(\()q FB(U)7 b FK(,)o FB(V)j FL(\))2868 626 y
FJ(\()p FA(O)15 b FJ(\()t FH(m)t FJ(\))g FA(\002)173
738 y(O)h FJ(\()r FH(n)t FJ(\)\))p FR(,)28 b(t)o(her)o(ef)n(or)o(e,)i
(is)c(t)o(he)h(pr)o(oduct)g(of)g(t)o(he)g(pr)o(ojection)h(of)f(t)o(he)g
(\014rs)q(t)f(com)o(ponent)i(of)f FA(r)r FH(F)14 b FJ(\()r
FH(U)8 b FR(,)g FH(V)16 b FJ(\))173 838 y FR(ont)o(o)k
FA(T)411 861 y FB(U)468 838 y FA(O)15 b FJ(\()t FH(m)t
FJ(\))20 b FR(and)g(t)o(he)h(pr)o(ojection)g(of)f(t)o(he)g(second)h
(com)o(ponent)g(of)f FA(r)r FH(F)14 b FJ(\()r FH(U)8
b FR(,)g FH(V)16 b FJ(\))k FR(ont)o(o)g FA(T)2919 861
y FB(V)2976 838 y FA(O)15 b FJ(\()r FH(n)t FJ(\))p FR(.)173
938 y(In)e(par)r(ticular)l(,)j(w)n(e)d(claim)g(t)o(hat)g(t)o(he)g(pr)o
(ojection)21 b FH(g)10 b FJ(\()r FH(U)i FR(,)c FH(V)16
b FJ(\))d FR(of)g(t)o(he)g(gr)o(adient)g FA(r)r FH(F)k
FJ(\()r FH(U)7 b FR(,)h FH(V)16 b FJ(\))d FR(ont)o(o)g
FA(T)2971 960 y FL(\()q FB(U)8 b FK(,)o FB(V)i FL(\))3133
938 y FJ(\()p FA(O)15 b FJ(\()t FH(m)t FJ(\))p FA(\002)173
1050 y(O)h FJ(\()r FH(n)t FJ(\)\))j FR(is)h(giv)n(en)h(b)n(y)g(t)o(he)f
(pair)h(of)f(matr)q(ices:)720 1307 y FH(g)10 b FJ(\()r
FH(U)e FR(,)g FH(V)16 b FJ(\))g(=)1079 1187 y Fw(\022)1140
1249 y FH(R)p FJ(\()r FH(U)8 b FR(,)g FH(V)16 b FJ(\))n
FH(V)f Fq(\006)1562 1218 y FB(T)1614 1249 y FH(U)1688
1218 y FB(T)1751 1249 y FA(\000)g FH(U)c Fq(\006)n FH(V)2035
1218 y FB(T)2087 1249 y FH(R)p FJ(\()r FH(U)d FR(,)g
FH(V)15 b FJ(\))2377 1218 y FB(T)p 1138 1289 1289 5 v
1763 1371 a FR(2)2439 1307 y FH(U)8 b FR(,)3023 1432
y(\(1.4\))1184 1506 y FH(R)p FJ(\()r FH(U)f FR(,)h FH(V)16
b FJ(\))1474 1475 y FB(T)1526 1506 y FH(U)10 b Fq(\006)n
FH(V)1731 1475 y FB(T)1794 1506 y FA(\000)h FH(V)16 b
Fq(\006)2002 1475 y FB(T)2055 1506 y FH(U)2128 1475 y
FB(T)2180 1506 y FH(R)p FJ(\()r FH(U)8 b FR(,)g FH(V)16
b FJ(\))p 1182 1546 V 1806 1628 a FR(2)2478 1564 y FH(V)2554
1444 y Fw(\023)2613 1564 y FR(.)173 1817 y(Thus,)21 b(t)o(he)f(v)n(ect)
o(or)h(\014eld)1309 1920 y FH(d)9 b FJ(\()r FH(U)g FR(,)f
FH(V)15 b FJ(\))p 1307 1960 287 5 v 1406 2042 a FH(d)e(t)1620
1978 y FJ(=)k FA(\000)8 b FH(g)i FJ(\()r FH(U)e FR(,)g
FH(V)16 b FJ(\))973 b FR(\(1.5\))173 2185 y(de\014nes)24
b(a)g(s)q(t)o(eepes)q(t)g(descent)f(\010o)n(w)h(on)g(t)o(he)f(manif)n
(old)h FA(O)15 b FJ(\()t FH(m)t FJ(\))h FA(\002)g(O)f
FJ(\()r FH(n)t FJ(\))24 b FR(f)n(or)f(t)o(he)h(objectiv)n(e)h(function)
175 2284 y FH(F)15 b FJ(\()r FH(U)8 b FR(,)g FH(V)15
b FJ(\))p FR(.)-175 2560 y FE(1.2)p 17 2545 30 30 v 104
w(Main)33 b(Results)173 2712 y FR(Let)21 b FJ(\()r FH(S)6
b FR(,)k FH(C)h FJ(\))21 b FR(be)f(a)h(matr)q(ix)e(pair)i(of)f(or)o
(der)j FH(n)t FR(.)k(The)20 b(det)o(er)q(minant)1421
2906 y(det)p FJ(\()r FH(S)g FA(\016)13 b FH(X)26 b FJ(+)13
b FH(C)e FJ(\))173 3100 y FR(is)19 b(a)g(pol)o(ynomial)h(in)e(t)o(he)h
(indet)o(er)q(minat)o(es)g(of)g FH(X)31 b FR(of)19 b(degr)o(ee)h(at)e
(mos)q(t)j FH(n)i FR(o)n(v)n(er)c(t)o(he)g(r)o(eal)g(\014eld.)26
b(W)-6 b(e)19 b(call)173 3200 y(t)o(his)c(pol)o(ynomial)h(t)o(he)f
FH(indicator)h(pol)n(ynomial)g FR(of)f(t)o(he)g(matr)q(ix)f(pair)h
FJ(\()r FH(S)6 b FR(,)k FH(C)h FJ(\))16 b FR(because)h(of)e(t)o(he)f(f)
n(ollo)n(wing)173 3300 y(pr)o(oposition.)173 3499 y FT(Theorem)29
b(1.1.)49 b FH(The)26 b(matr)q(ix)g(pair)h FJ(\()r FH(S)6
b FR(,)k FH(C)h FJ(\))26 b FH(is)g(a)g FR(SNS)p FH(-matr)q(ix)g(pair)h
(if)e(and)h(onl)n(y)f(if)h(all)f(t)q(he)g(nonzer)o(o)173
3598 y(coef)r(\014cients)g(in)g(its)h(indicator)g(pol)n(ynomial)h(ha)n
(v)q(e)d(t)q(he)g(same)i(sign)g(and)f(t)q(her)o(e)g(is)g(at)h(least)f
(one)g(nonzer)o(o)173 3698 y(coef)r(\014cient.)173 3897
y Fp(Proof.)39 b FR(Assume)24 b(t)o(hat)f FJ(\()r FH(S)6
b FR(,)k FH(C)h FJ(\))25 b FR(is)f(a)g(SNS-matr)q(ix)f(pair)-5
b(.)39 b(Clear)o(l)o(y)24 b(t)o(he)g(indicat)o(or)f(pol)o(ynomial)i
(has)f(a)173 3997 y(nonzer)o(o)d(coef)q(\014cient.)29
b(Consider)20 b(a)h(monomial)1287 4191 y FH(b)1328 4214
y FB(i)1345 4230 y Fn(1)1369 4214 y FK(,...,)q FB(i)1463
4230 y Fl(k)1492 4214 y FK(;)7 b FB(j)1528 4230 y Fn(1)1552
4214 y FK(,...,)g FB(j)1649 4230 y Fl(k)1686 4191 y FH(x)1725
4214 y FB(i)1742 4230 y Fn(1)1774 4214 y FB(j)1788 4230
y Fn(1)1826 4191 y FA(\001)j(\001)g(\001)15 b FH(x)1963
4214 y FB(i)1981 4230 y Fl(k)2017 4214 y FB(j)2032 4230
y Fl(k)3023 4191 y FR(\(1.6\))173 4400 y(occurr)q(ing)23
b(in)e(t)o(he)g(indicat)o(or)f(pol)o(ynomial)i(wit)o(h)f(a)g(nonzer)o
(o)h(coef)q(\014cient.)31 b(By)22 b(taking)e(t)o(he)25
b FH(x)2961 4423 y FB(i)12 b(j)3038 4400 y FR(t)o(hat)173
4512 y(occur)20 b(in)e(\(1.6\))h(large)g(and)f(all)g(ot)o(hers)h
(small,)g(w)n(e)f(see)h(t)o(hat)f(an)n(y)g(monomial)h(t)o(hat)f(occurs)
i(in)e(t)o(he)g(indi-)173 4612 y(cat)o(or)k(pol)o(ynomial)h(wit)o(h)e
(a)g(nonzer)o(o)i(coef)q(\014cient)f(can)g(be)g(made)g(t)o(o)f(dominat)
o(e)h(all)f(ot)o(hers.)32 b(Hence)173 4712 y(all)20 b(t)o(he)g(nonzer)o
(o)h(coef)q(\014cients)h(ha)n(v)n(e)f(t)o(he)f(same)g(sign.)28
b(The)19 b(con)n(v)n(erse)j(is)e(immediat)o(e.)p 3103
4661 38 5 v 3103 4707 5 46 v 3136 4707 V 3103 4712 38
5 v 298 4911 a(F)n(or)g(SNS-matr)q(ix)f(pairs)i FJ(\()r
FH(S)6 b FR(,)k FH(C)h FJ(\))20 b FR(wit)o(h)f FH(C)28
b FJ(=)17 b FH(O)26 b FR(t)o(he)19 b(indicat)o(or)h(pol)o(ynomial)g(is)
g(a)g(homogeneous)173 5010 y(pol)o(ynomial)h(of)g(degr)o(ee)i
FH(n)t FR(.)k(In)20 b(t)o(his)g(case)g(Theor)o(em)h(1.1)f(is)g(a)g(s)q
(tandar)o(d)g(f)o(act)f(about)i(SNS-matr)q(ices.)p eop
end
%%Page: 7 21
TeXDict begin 7 20 bop -172 -79 3343 7 v -172 -121 a
FV(1.2.)48 b(Main)21 b(Results)2662 b(7)173 112 y FT(Lemma)29
b(1.2)g(\(St)q(ability\).)48 b FH(Giv)q(en)25 b(T)40
b FI(>)25 b FR(0)p FH(,)h(suppose)g(t)q(hat)e FA(k)p
FI(\017)p FJ(\()t FH(t)10 b FJ(\))p FA(k)2164 135 y FK(1,2)2263
112 y FA(\024)29 b FH(h)2402 81 y FB(q)5 b Fr(\000)p
FK(2)2536 112 y FH(f)o(or)25 b FR(0)f FA(\024)29 b FH(t)35
b FA(\024)25 b FH(T)40 b(and)175 212 y(q)24 b FA(\025)17
b FR(6)p FH(.)25 b(Then)18 b(t)q(her)o(e)f(e)r(xists)i(a)f(positiv)q(e)
h(number)e(B)25 b(t)q(hat)18 b(depends)g(on)g(T)34 b(and)18
b(t)q(he)f(e)r(x)r(act)g(solution)i FI( )f FH(onl)n(y)173
311 y(such)i(t)q(hat)f(f)o(or)i(all)f FR(0)c FA(\024)21
b FH(t)26 b FA(\024)17 b FH(T)f(,)1085 503 y(d)p 1063
541 93 5 v 1065 623 a(d)d(t)1165 559 y FA(k)p FI(\017)p
FJ(\()t FH(t)d FJ(\))p FA(k)1380 582 y FK(1,2)1471 559
y FA(\024)17 b FH(B)7 b FJ(\()t FH(h)1684 524 y FB(q)e
Fr(\000)p FK(3)p FC(=)p FK(2)1863 559 y FJ(+)13 b FA(k)p
FI(\017)p FJ(\()t FH(t)d FJ(\))p FA(k)2154 582 y FK(1,2)2228
559 y FJ(\))17 b FR(.)729 b(\(1.7\))173 793 y FH(The)20
b(function)g(B)7 b FJ(\()p FH(T)16 b FJ(\))k FH(can)g(be)f(chosen)g(to)
i(be)e(nondecr)o(easing)i(in)g(time.)173 992 y FT(Theorem)c(1.3.)29
b FH(The)15 b(maximum)h(number)f(of)g(nonzer)o(o)g(entr)q(ies)g(in)g(a)
g FR(SNS)p FH(-matr)q(ix)j(S)j(of)15 b(or)o(der)j(n)h(equals)1478
1188 y(n)1528 1158 y FK(2)1573 1188 y FJ(+)13 b FR(3)r
FH(n)18 b FA(\000)13 b FR(2)p 1476 1227 396 5 v 1653
1309 a(2)173 1478 y FH(wit)q(h)20 b(equality)g(if)g(and)h(onl)n(y)e(if)
i(t)q(her)o(e)e(e)r(xist)h(per)q(mut)r(ation)i(matr)q(ices)e(such)g(t)q
(hat)h(P)9 b FA(j)r FH(S)d FA(j)p FH(Q)25 b FJ(=)16 b
FH(T)2814 1501 y FB(n)2875 1478 y FH(wher)o(e)1112 1953
y(T)1163 1976 y FB(n)1220 1953 y FJ(=)1299 1621 y Fw(2)1299
1768 y(6)1299 1815 y(6)1299 1862 y(6)1299 1909 y(6)1299
1957 y(6)1299 2004 y(6)1299 2051 y(6)1299 2103 y(4)1403
1676 y FR(1)82 b(1)h FA(\001)10 b(\001)g(\001)84 b FR(1)f(1)g(1)1403
1776 y(1)f(1)h FA(\001)10 b(\001)g(\001)84 b FR(1)f(1)g(1)1403
1876 y(0)f(1)h FA(\001)10 b(\001)g(\001)84 b FR(1)f(1)g(1)1412
1964 y FH(.)1412 1997 y(.)1412 2030 y(.)1535 1964 y(.)1535
1997 y(.)1535 2030 y(.)1653 1972 y(.)1680 1997 y(.)1707
2022 y(.)1825 1964 y(.)1825 1997 y(.)1825 2030 y(.)1948
1964 y(.)1948 1997 y(.)1948 2030 y(.)2071 1964 y(.)2071
1997 y(.)2071 2030 y(.)1403 2130 y FR(0)f(0)h FA(\001)10
b(\001)g(\001)84 b FR(1)f(1)g(1)1403 2229 y(0)f(0)h FA(\001)10
b(\001)g(\001)84 b FR(0)f(1)g(1)2142 1621 y Fw(3)2142
1768 y(7)2142 1815 y(7)2142 1862 y(7)2142 1909 y(7)2142
1957 y(7)2142 2004 y(7)2142 2051 y(7)2142 2103 y(5)2213
1953 y FR(.)789 b(\(1.8\))298 2529 y(W)-6 b(e)23 b(not)o(e)g(f)n(or)g
(lat)o(er)h(use)f(t)o(hat)g(eac)n(h)h(submatr)q(ix)f(of)h
FH(T)1882 2552 y FB(n)1945 2529 y FR(of)f(or)o(der)j
FH(n)19 b FA(\000)d FR(1)22 b(has)i(all)f(1s)g(on)g(its)f(main)173
2629 y(diagonal.)298 2728 y(W)-6 b(e)21 b(no)n(w)f(obtain)h(a)f(bound)i
(on)e(t)o(he)h(number)h(of)e(nonzer)o(o)i(entr)q(ies)e(of)j
FH(S)k FR(in)21 b(a)f(SNS-matr)q(ix)h(pair)173 2828 y
FJ(\()r FH(S)6 b FR(,)k FH(C)h FJ(\))25 b FR(in)e(t)o(er)q(ms)h(of)g(t)
o(he)g(degr)o(ee)h(of)f(t)o(he)g(indicat)o(or)f(pol)o(ynomial.)39
b(W)-6 b(e)24 b(denot)o(e)g(t)o(he)f(s)q(tr)q(ictl)o(y)g(upper)173
2928 y(tr)q(iangular)f(\(0,1\)-matr)q(ix)g(of)f(or)o(der)26
b FH(m)g FR(wit)o(h)20 b(all)h(1s)g(abo)n(v)n(e)i(t)o(he)e(main)g
(diagonal)g(b)n(y)k FH(U)2739 2951 y FB(m)2792 2928 y
FR(.)30 b(The)21 b(all)g(1s)173 3027 y(matr)q(ix)f(of)g(size)25
b FH(m)g FR(b)n(y)31 b FH(p)c FR(is)20 b(denot)o(ed)g(b)n(y)h
FH(J)1437 3050 y FB(m)s FK(,)7 b FB(p)1544 3027 y FR(.)173
3240 y FT(Pr)o(oposition)25 b(1.4)f(\(Con)o(v)m(olution)h(theorem\).)k
FH(Let)908 3493 y(a)17 b FA(\003)g FH(u)6 b FJ(\()t FH(t)k
FJ(\))17 b(=)1262 3377 y Fw(Z)1341 3398 y FB(t)1310 3576
y FK(0)1379 3493 y FH(a)t FJ(\()t FH(t)24 b FA(\000)13
b FI(\034)t FJ(\))t FH(u)6 b FJ(\()p FI(\034)t FJ(\))r
FH(d)j FI(\034)t FR(,)134 b FH(t)27 b FA(2)16 b FJ(\()p
FR(0,)10 b FA(1)p FJ(\))p FR(.)173 3745 y FH(Then)1349
3938 y Fw(\325)1347 3941 y FH(a)18 b FA(\003)f FH(u)6
b FJ(\()t FH(s)i FJ(\))17 b(=)1702 3939 y Fw(b)1698 3941
y FH(a)t FJ(\()t FH(s)8 b FJ(\))1839 3939 y Fw(b)1836
3941 y FH(u)f FJ(\()t FH(s)h FJ(\))p FR(.)173 4236 y
FT(Lemma)24 b(1.5.)31 b FH(F)n(or)25 b(s)783 4259 y FK(0)832
4236 y FI(>)17 b FR(0)p FH(,)j(if)1178 4370 y Fw(Z)1254
4391 y Fr(1)1226 4569 y FK(0)1336 4486 y FH(e)1374 4451
y Fr(\000)p FK(2)s FB(s)1466 4467 y Fn(0)1493 4451 y
FB(t)1524 4486 y FH(v)1573 4451 y FL(\()p FK(1)p FL(\))1644
4486 y FJ(\()t FH(t)10 b FJ(\))r FH(v)c FJ(\()t FH(t)k
FJ(\))r FH(d)j(t)42 b FA(\024)17 b FR(0)g(,)173 4738
y FH(t)q(hen)1141 4849 y Fw(Z)1217 4870 y Fr(1)1189 5048
y FK(0)1299 4965 y FH(e)1337 4930 y Fr(\000)p FK(2)s
FB(s)1429 4946 y Fn(0)1456 4930 y FB(t)1487 4965 y FH(v)1536
4930 y FK(2)1568 4965 y FJ(\()t FH(t)10 b FJ(\))r FH(d)j(t)43
b FA(\024)1926 4908 y FR(1)p 1896 4947 101 5 v 1896 5028
a(2)t FH(s)1964 5051 y FK(0)2008 4965 y FH(v)2057 4930
y FK(2)2089 4965 y FJ(\()p FR(0)p FJ(\))p FR(.)p eop
end
%%Page: 8 22
TeXDict begin 8 21 bop -172 -79 3343 7 v -172 -121 a
FV(8)1179 b(Chapter)21 b(1.)49 b(Sample)20 b(File)h(f)n(or)h(SIAM)e(L)
2248 -138 y Fx(A)2273 -121 y FV(T)2308 -100 y(E)2351
-121 y(X)h(Book)h(Macro)g(P)m(ac)n(kage)1073 1229 y @beginspecial
0 @llx 0 @lly 216 @urx 216 @ury 1440 @rhi @setspecial
%%BeginDocument: box.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: box.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1
%AI9_PrintingDataBegin
%%For: JAR
%%CreationDate: 6/2/2014
%%BoundingBox: 0 0 216 216
%%HiResBoundingBox: 0 0 216 216
%%CropBox: 0 0 216 216
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: font Helvetica
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: Helvetica
%%DocumentNeededFonts: Helvetica
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2014-06-02T11:08:02-04:00</xap:CreateDate>
         <xap:ModifyDate>2014-06-02T11:08:03-04:00</xap:ModifyDate>
         <xap:MetadataDate>2014-06-02T11:08:03-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9FYUOxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxVgnnn84/Lnk3XINF1Cy1C7vLi3W6j+pRRSLwZ3SnxyxtyrET0&#xA;6YppIT/zkn5MSjT6RrVvDUB55bWIItTSrETE/hitM/0/zjoGp+WZPMmm3H1zTIoZJ2aIfHSJSzoV&#xA;bjRxTo1MUN+T/NWn+a/Llpr+nRzRWd76npR3AVZR6UrRNyCNIv2ozT4umKU5xQ7FXYq7FXYq7FXY&#xA;qxrzV5/0fy1rGgaTfw3Etz5iuPqtk8CoyI4eKOspd0IWs6/ZB74pZLihjV/5/wBHsvPeneSpYbht&#xA;V1O3a6t5lVDbqiiViHYuHDf6O3RD2xSyXFDsVY95o88aT5b1DRLC+inkm1+7Wxs2gVGVZHZEBlLO&#xA;hC1kH2QflilkOKEr80+Y7Hy3oF5rl8kslpYoHlSAK0hBYL8IZkXq3c4qiNF1W31fR7DVrZXS21C3&#xA;iuoUkADhJ0EihgpYcqNvQnFUZirsVdirsVdirsVdirsVdirsVdirsVeOeZ//AFp3yj/2yZf+Td/g&#xA;T0evXZtBaym8MYtOB9czcfT4U+Lny+HjTrXCh4H+TQr5V/Mp7IU0BmuP0ZSoH9zMWp/zyMWKSzL8&#xA;mdYsNF/I3TNV1CT0rKyivZp3pUhVvJjsB1J6AYqXQ/m95ovLRdV0zyFqN1oTqZI71po45niG4dLf&#xA;izMCNxRvlirM/JfnLRvN+gw61pLP9XkYxyRSDjJHKtOUbgEioqOhxViOo/nJNPq93pnk7y5deaWs&#xA;DwvLuCQQWyyVoUWUrIGI+W/bbfFU58g/mXp3m6W+sTZXGla3phAv9LuxSRATSoO1RXY7Aj6RiqS6&#xA;l+c7Taxd6V5P8u3fmmaxPC7uYHENqrg0KiYrJU/Rv2riqa+SvzPtvMGqT6FqemXGgeY7dBK+mXe/&#xA;OPb44nonMD/VHjirNsUPGfz1mih8+fljNM6xQxaozySOQqqq3FmSzE7AAYEh6h/i/wAp/wDV6sP+&#xA;kqH/AJqwoeU6zqWn6h/zkx5SmsLqG7hXS5kaSCRZFDCO+JUlCRWhGBPRnHnb8z9P8t6hbaNZ2M+u&#xA;eYrwcodJsxV1T+eVqNwX6PfphVK9I/OKRdatNI83+XrrytcX542NxcOJraR60CesFjAY/L54ql35&#xA;1/8AKWflt/23Yf8Ak9BioZV59/MnTPKT2dl9Un1XW9SPGw0m0FZZKbcj14rXboSfDY0VeefmR+Ze&#xA;o3nkPWNI8y+W7vy3e38FNPeZxPbzOkis0frKqcX4gkKRirPNB8z6N5Y/KTy/rGrzejZwaRYVoKu7&#xA;m2TiiL+0zdh/DFWPj86PNMlqNUg/L/U30EqZDemQLL6QqeYg9M1FN686e+KslvvzN0gfl3ced9Jj&#xA;OoWcEYkFsz+i/LmEaNzSTgylt9jiqWaF+cCa/wCYdP0vR9Du7yznVf0lrEfJrS1kaEymP1FRg/Fv&#xA;gJJXfFXomKHYq7FXYq7FXYq7FXYq7FXgv5peW7TzL+f/AJb0S7nntre70k857R1jmX0zeyjizK4F&#xA;SlDt0wMhyZD/ANC2eS3IFxqus3UNatBNdRFGp48YVP44UWzG+8u6P5e/L3VNK0e2W1sYNPuuEa1J&#xA;JMLVZmNSzHuTih5z5Q17y9on/ON2n3mv2n6Q09vrERsOnryNfylEJ7Cq1J9sUlkFhefnrqFnbrZ6&#xA;Vofl6zaNRHHdPPNNFHQcQEiPAEL+yR92Ksa/JabULX8oPOc9u3q6jBeam8LrtymSyiKkU6VYYqWU&#xA;f846wWcf5Vaa8AAlmluXuyOpkE7oK/8APNUxUpl5pTyraXfmPUNLNuPPi6NcuAkh+smNIax8oww+&#xA;Hkqb08MVecfk4fzch8hWR8rWmgNpcsk7CS8Nz9ZaQSsrGX03C1HGi0H2aYqU7l0L8zb38xPK+t+Z&#xA;X0Gxm06SSNEsp5o554JRxkQJMX9TiGNAtPtGuKvZcUPE/wDnIHT7PUvOP5b6dex+rZ3uoy29zFVl&#xA;5RSz2aOvJSGFVJ3BrgSGVf8AQv8A+Uf/AFYf+nu9/wCq2FbYKnk/y55U/wCcjfKunaBafUrOXTpr&#xA;iSL1JZaytDeoW5StI32Y12rTAnoyL8tglx+cn5h3N9vqUD20Npy3ItjyB41rQUSLChHf85FQ2T/l&#xA;dfzT0Fxbz20li37QlM6qeJ8fTZ8VCSfmbLdS3/5Sy3dfrUmqWbXFdz6ha3L+PfFQjbVFf/nJW7N5&#xA;uY9CB03l2JeMNx/4KX8cVTj8/bWyn/KrWWuqAwehLbseolE6KtP9YMV+RxUPN/zGfVH8m/lDZ2iQ&#xA;yxTpZMY7rl9Xa4WC2WBZuJB9MiR+VN6VwJZ+Ln/nIkCgs/LFPnef9VMKGEv5e1rQ/wApfzBh1K40&#xA;+Q3VyLpbXTJjLFbySSqJY+Lbx04gAEk7b4q9a/LC0trT8uvLUdvGIkfTbWZlUUBkmhWWRvmzuScV&#xA;LJ8UOxV2KuxV2KuxV2KuxV2KsB1jyBrF7+cWhedYprddK0yxe1uIWZxcM7LcqCihChX/AEherjvi&#xA;ln2KEDrtjLqGiahYQlVmu7aaCNnqFDSRlAWIBNKnwxV59afk9Pc/k5a+RNXu447+2aWWO8tuUkSy&#xA;m4kmjNHWNmHGTi2w70xTapa+VPzlvbVdK1vzPY2+mBRFPeafC5v5ogKGryBUjdunJRt1xVX/ACs/&#xA;LvX/ACVJq+kzXVpd+V7qaS5sUUP9a5yBEpNyHDj6cYGxNTipSqD8sfzD8p3d4n5e63Zw6Leymf8A&#xA;ReqI7LA7Ch9J0SQ9gO23WtMVZB+X35bzeX7zU9b12/8A0z5m1na+vCnCMRDpFGv8uwrsOgAApiqQ&#xA;Q/lj+YPlS7ux+XuuWkOjXkpn/RGqI7Rwu3X03RZG7ADpt1r1xVNPKn5ceYR5pXzb511aPVtat4zD&#xA;p1vbpwtbVXBDlAQtWINK8R717KvRMUMB/MbyBrHmXzT5M1awmt4rby7fG6vUnZ1d0M1vJSIIjgtS&#xA;BvtEdsUs+xQwHWPIGsXv5xaF51imt10rTLF7W4hZnFwzstyoKKEKFf8ASF6uO+KWvOf5b6reeY4v&#xA;NvlHVF0bzKsYgumlX1Le6hAFElWjU6AVodvcA4qlUf5Z+efMuqWVz+Yms2t3pmnyCeHRtNR0gkmX&#xA;7Lyu6xsfcU+VN8VT38w/I+reZNb8o39jLBHDoGpR314s7OrNGkkbkRBUcFqRn7RHzxV35gfl5da/&#xA;f6fr+hah+iPNGk1W0vSvOOSJqkxSr/L8Rp16nY1xVinmH8sPzU836VcWvmrX7FkijZtP0+xWSK3e&#xA;5pSOS5k9MPRKk8Qp3xVlOqflha65+W+k+VNWmEV7plpaxw39vVvSuraFY/Uj5BCymhFDSo8D0VSN&#xA;fLH/ADkCtv8Ao0eaNLa04+mNSaF/rvHpXj6fDl78q+9cVR835Siy/KzU/J+kXKzalqQ9S51G7LKJ&#xA;rlnRnkkKiRgKJQdf44qzLyppVxpHlbR9JuWR7nT7G2tZnjJKF4IVjYqWCnjVdqgYqmmKHYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXm2i/mF5x8w/mBqWk6NptovlrQrs2WrXlwz&#xA;/WWZSykwgMq/bjPVTtil6Tih2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KoTWLfUbjS7qDTboWOoSxMtreFFlEUhHwvwb4WoexxV4b+TGl+cE85+bJ&#xA;28wRpa2GryjX42togL2RXmDShyP3A5AtRdsUlP7DzR+Z/wCYV1eXnk68tvL3li1la3tb+4hW4uLl&#xA;0PxMEdXQLv8AR7mtFUz8qedvN2mecU8k+ehBLfXkbT6NrFqPTiuFQEsjqQoD0U9B7eBxVKvMn5ge&#xA;frf80dV8p+X0W9mms4DpVtMkawW8jKrzXE0gCyFVWtAWI5EbdsVei+TbbzZbaDDF5ru4L3Wg8hnn&#xA;tgFiKs5MaqBHD9lKD7P34qneKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXjP5YWk95qX5s2kDcZ7nVbuKJhtR3a4VT1Hc4pKb/847alZyfl3BpIIj1LSJ7i&#xA;DULc7SK7zvIpZev2X419sVKC8/zxav8AnT5G0rTmD3ukNcXmoshBMcLBGCuRSlREdq/te+Kr9FA/&#xA;6GV1/wBtCT/idrivR6zih2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2Kse8r+R9J8t6hrd/YyzyTa/dtfXizsjKsjs7kRBUQhayH7RPzxSk3mj8mvKGv6tJr&#xA;HO70nVZhS4vNMm+rvJ/rgq6knuaVOKpp5L/Lryv5Pjn/AERA5urs1ur64f1biXv8Tmm1d6AAVxVV&#xA;tfI+k23ni885JLOdTvbQWMsLMnoCNTGaqoQPy/cjq/0YqyHFDsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirEPzY83y+U/Iuo6rbP6d+VFvYNRWpPMeKtxaqngKvQjti&#xA;kMd/JPzv5o1ptc0PzbN6vmDR7hSxMccR9GQUA4xKiniyE1p+0MVL1HFDsVYzpnnqzv8Az3q/lBLa&#xA;RLnR4Ip5bpivpuJkjcBQN9vV74pZNihhX5nfmZZeSdPt+NudQ1nUH9LTtOQ/E7dObUBPEEgbCpJo&#xA;PZSxa20//nJLVoRfvq+l6EXHOPTDCshFdwsjGKcr9Dk4qv8AL/5qebNE8023lP8AMeyhtbm+PHT9&#xA;ZttreUnZeX7O7fDUUoSKqOuKvW8UOxV57+enmvX/ACv5IGp6FdfU7763DF63pxy/A4csOMquv7I7&#xA;YpD0LFDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeP/mSx81fmx5U8mR/HZaa3&#xA;6X1YDp8G6K1f8leO38+KUL5plXyf+f8Ao2tkiPT/ADRb/Urw7qPVHGLc9NmELH/M4qyH8/tc1LRf&#xA;I8N/p91PaTJqFuHe2leF2j+MshZCDRqbjFQifJ3lr8wJtWfzJ5m191S+tnWPy5ArLDa+txZPjDKr&#xA;SRAca8K1r8WKvOvKvkO6P52eYdL/AMS6uJNMgtLh9Q+sn6zdApA/pXD/ALafFxp4AYq+hcUPFTGm&#xA;s/8AOTskV6pePQtPV7JG3XmYkcMB7NcsfmMU9HtWKHlX/OSmmWtz+XD3zrS6026gltpRsymRxEwr&#xA;4EPX6BikJL+YPnLzfD/yq+80WaUahrMDtLZGSSOGeeeG1Ef1hEI5qjyk0PTfFUX5r8j/AJjaL5fv&#xA;vNEPnvULnWNOge8uLUgJZOsQMkipBXgKKDSq74qlf5ueYpvMn5B6Rrc6LHcXtxbPOifZ9RRIj8a9&#xA;iykjFQyH83tX1ryv5u8peZ4r+4i0E3IsdYs1mkW2IckrI8VfSJ4NIakfsj6FU5/O/wA03Pl7yBdv&#xA;YyyRapqEkdlYPCzLKJJTVihT4uQjVqU74qGT+UdNv9M8saZY6jcy3moQ26C8uZ5GlkeYjlIS7FmP&#xA;xEgb9MUJvirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVWTTRQQyTTMEiiUvI7bBVUVJPyGKv&#xA;nvyL+Xlp+aGo+YfO2sXt/YxXt88Wm/UpEiYwxgCjl0lJCrwUUp9k4pVfzM/IXStE8n3uu6RqmqXV&#xA;/pYW4SO7njkQRqw9Rl4RRsGVfirXtgW0V+bvmVPMv5C6Trakc7u4tjOAa0mRZElH0SKcKh7xih5D&#xA;5cvLS1/5yJ85i5njgMtjZiL1HVOR9G22XkRXFL17FDxb82LXVPJ35gaV+Zlhbvd6cqCz1uCPdglC&#xA;vI+AKHYnYMor1xSHoekfmb5B1WwF9a69ZLDxDyJPPHDJGKV/eJIVZencYq8s/MzzWn5m6xp/kDye&#xA;5u7QzrcavqqAmBEjrsGpuq1LV7txAriqd/mjawWfn/8AKq0gXjBb3c8US+CJ9VVR9wxVnv5i/wDk&#xA;vvM//bJvv+oZ8VeIebv/AFmLy7/zERf8nJ8Cer2T81fK/wDiXyFq+mInO69Ez2Y7+vB+8QD/AFuP&#xA;H6cKHkvlrXX/ADK8x+QdMkPq23l6yOpa0OxuYH9GMOPEtEjfJzir6GxQ7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYqhtT06z1PTrnTr1DJZ3cbQ3Eau8ZaNxxZeSFWFQabHFVDy/5f0fy/pMGk&#xA;6PbC00+35ejAGZ6c2LtVnLMasx6nFUXd2lveWk1pcoJba4jaKaM9GRwVZTTxBxVjJ/KvyGfLI8sH&#xA;TCdDE/1pbM3FyaTdOQf1PU+jlTFLK8UMb1z8ufJWuaxBrOqaXHcanbcTFdB5I2/dmqchGyB+PbkD&#xA;ilkmKFskccsbRyKHjcFXRgCCD1BBxVhV9+SX5WXtz9Zm8vwLJXlSF5oErWv93E6J+GKbZLoXlrQN&#xA;AtTaaLYQWEBNWWFApY+LN9pj7k4oU9X8qaBrGpaXqeo2vr32jSNLps3qSJ6TvxLHijKrV9NftA4p&#xA;R2o6fZ6lp91p17H6tnewyW9zFVl5RSqUdeSkMKqTuDXFCR3f5deTbzyxbeV7jT+ehWjB7ez9accW&#xA;UsQfUDiQ7uerYpRfmbzj5a8sWyXGuXyWUcocwh6kyGMAsqAA1bfpih59/wA49+WVt9J1XzW9t9Vf&#xA;zHdPLZwf77s0djGB82ZvoAOKS9axQ7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FUDqmg6HqwiGq6dbagLdi8H1qGOb02NKlPUDcTt2xVGxxxxxrHGo&#xA;SNAFRFFAANgAB2xVvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:8D0C65B167EAE311894D865016B8E430</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:8E0C65B167EAE311894D865016B8E430</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -216 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 216 li
216 216 li
216 0 li
cp
clp
[1 0 0 1 0 0 ] concat
216 216 mo
216 0 li
0 0 li
0 216 li
216 216 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 .1 cmyk
f
/0 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%%IncludeResource: font Helvetica
/IDICGM+Helvetica /Helvetica findfont def
/IDICGM+Helvetica*1 
[
32{/.notdef}repeat /space 39{/.notdef}repeat /H 7{/.notdef}repeat /P 16{/.notdef}repeat /a 
/.notdef /c /d /e 6{/.notdef}repeat /l 2{/.notdef}repeat /o 
2{/.notdef}repeat /r 141{/.notdef}repeat
] IDICGM+Helvetica nfnt
IDICGM+Helvetica*1  [27 0 0 -27 0 0 ]mfnt sfnt
26.9738 85.0313 mov
(Place Holder ) sh
%%IncludeResource: font Helvetica
/IDICGM+Helvetica*1 
[
32{/.notdef}repeat /space 39{/.notdef}repeat /H 7{/.notdef}repeat /P 16{/.notdef}repeat /a 
/.notdef /c /d /e /f 5{/.notdef}repeat /l 2{/.notdef}repeat 
/o 2{/.notdef}repeat /r 141{/.notdef}repeat
] IDICGM+Helvetica nfnt
IDICGM+Helvetica*1  [27 0 0 -27 0 0 ]mfnt sfnt
92.6506 117.431 mov
0.809967 0 111 -0.809967 0 (for) awsh
%%IncludeResource: font Helvetica
/IDICGM+Helvetica*1 
[
32{/.notdef}repeat /space 32{/.notdef}repeat /A 6{/.notdef}repeat /H 6{/.notdef}repeat /O 
/P 16{/.notdef}repeat /a /.notdef /c /d /e /f 
5{/.notdef}repeat /l /.notdef /n /o 2{/.notdef}repeat /r /.notdef 
/t 4{/.notdef}repeat /y 134{/.notdef}repeat
] IDICGM+Helvetica nfnt
IDICGM+Helvetica*1  [27 0 0 -27 0 0 ]mfnt sfnt
58.6985 149.831 mov
1.07982 0 114 (Art Only) wsh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/IDICGM+Helvetica*1 ufnt
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.1
%%For: (JAR) (PA)
%%Title: (box.eps)
%%CreationDate: 6/2/2014 11:08 AM
%AI9_DataStream
%Gb"/LB6W(P](#SWCZRe%NXH\_)FDMN'#Jfsj-&&/NW@`Z#)%]OhDl\GDh"Bl7V,Q738Whggi_X[+_YIEoCOpB()IF(4QpklGD?"h
%)CJ,q=-]hV>ZJ;&,//N6\@C-RF%1G=.V_\W"Z$=&J^YQUHe`fLri,(hS^GN#H`f;2j,BScIUL3cm_FVW4fA%ln[iY-*BSG7Nml+<
%U$jKjc#1jA\mF:f\U$[eSYC49N4ZdKn[RIs]JWFs'[eYlOR4\kp78P0OnYYY^"MjAf=Br=J.q:#b:K)Pf*CG_jL]gq'7)0ZRo%Kl
%!F"H1fBkSI&SICh0kc8:B?je,jEn>mFU)92_6t.TJ(V)ULQG.EJ4`usr'-\QBM`H$'a7,808cXCX'-;h+o!cHSKD/#0-l;.EP-f7
%]'#]0rrne?7#=i".Hir7pDiXBcpcsA5)n"LaR(t#Y`ISrm+DMid_to<QuQP]GE*4#GC*i<DiLe*i>Br<d/N8PDoH+JPG'eBE8M<o
%<rlMjVCpCL8AeW5VBUhdU&_KAZB$DQRMP6=P't;WD-R@5#rb\Ckbl5$'<cc7*NXr+W].Or[hH)FQ+/l'+]q_/bWd]W(B=iAqn=il
%Ta)/bNu3EZ.RtkrX#9+.DBF-X_Fk!@4TNmt\Tbl'HpPb[M=L*.X&#p+aVt1=G("!+/+srXX7:D*rPJY:f6M/u\XY&Ub`%iNEqiks
%;KkBQ4"]1LoQo?PW!hAO*W,9MnUgdKS8WU7&<PY<o/AmU4TF7YO6f/f5B#;J45fQm-ck")kLSfl/5E8rFD^ApouMJ&l+J0U8Z%4Y
%FJq'O?CuEG*IDnS4+6[l&*i<H+SQnSDgS/1r$\s%^"IQ'NpHGT&p--2dJ3$&fC8k$&]]reFrSM"X7GY_k;e1g:Um@n/^Jia"t^di
%>ccKOE'E0&LHgDK^!<b/mgco2\6YAETKeg!hSAg[qk(cQB>Aj^.H/8Vhm_>G(6B8u`".4T&_oAfnbun`BFI;p\fU=tH]AbFg$Q'5
%nGP)_WQ^R?:)it(<bjdfDQa;BLj'*o*<8pn*js$O!`?XkK9'NsK7!+T^"p;sHN]la:=LOq-h771l#]FdiMKB7X%1h.L]FV_]GZ78
%>NBta+udCh(3@)&h7$0mmF*Z\R5t/l*6Z+[O3*-\bR(uAK\g[bgi,Sg3f3:jO*c>"f_`d_N-ZlcQQ\\^o]Ag/k0)tkCH?][ms6*.
%%N+a;Lt[Zol,In&O3QHse#i"N&Y"m"G5-5O%Yrp/d++]^Am!34md&;(>ro%0Cse7)3'`K)h9`"Ih%1p"\\S`P7/(i85J#K5M(tm:
%Np0=!"?b`.StC,W-cGctG/&KK@8Tt%]Y1imJI>T?N^8a.Y<WMU2/'VcOk7+4a@!8Ine3,>oC36(DD+2f-7aZG$J48/Nn\S,IL_pa
%#a8P3@,"VQ[85<8GY#j>2lF>D%.8H0GdouJF^Mm5OLr&%gV3tp&#Nf8jFTRAajF=cpTXN>m&\jq@I]1#00BdK!:Q`Vh.cb*J'\eB
%4!/ZpB9oAhdGfM*P5tj9)isEt$eOc7TEZ']Ta5+HPk:R)As6nKh?G\/q^ud?i6FSFLA0MIhYK7md7+f;SRl$pLe.3O*Krk<B%]7p
%O+!,:\(q'QJK,:"Qu[(oLf$3WIW#b%)eV'sRBs]dE,Hi+Ap?spXhbOGk74&m5O&:0c$ch0iCq2cfl+F7m\h5VK^"?Mca"6QD]Suj
%\V1!$nc,#aZtBncO!=`=1rM/?g0j;Ger'+=b:70a=j+=d3o+E!3FfkMf_*UT%K&)d5k6+:M>M7Q]EJ"m*FPuqcKL@?EoZhnB!Z2/
%)bmYQ2"d`sX>e[AXf4.X9t;]1`MR$#/^%m2VI`l@V-.q6[;)":<@ume/C>(Kc%ab^1sC^%cl6/`rq]V^D:BIrUY:eK;F>7+B%+-2
%L2!*2WLK>Z2c[1r.V@4q:!")D_.XaQd4e830Q]Z<l@s''%)o.`Z6:*[!HG[,e1JA-S%><Z\u+)%<NkYE?I`UmdR@HgR[U'11fH1e
%?.60lVJ7t_dAiY:8XcRaok*$[2sP#2W9\T.%PZJaHEF@"X*#<.$*c+]:"<,\Wi6o:Y%h]W<RmP<W)Zhu,umou>-hhk)E"j5eF]21
%X4L<A5Eo?Z-J,&^=9BD*VICt``Dd77=#?bVW(ILSPH#fWOs2AB[99o;NN-,=Wd7[GeuNPn<`Q/"aEj\_=;BnoCrm.>PRUc^2&Ted
%<OjG,E`JE:8VY;mC.afAOA*cXF@h\]Ot,!-7B/tc,Y=^ULeZ80)knc"U+U1i>u\e3W/+GN(*ufl!Cd+B.0)^<6NEheJ@88f!&O]l
%(IZKb[U9`WG[ktd4OCDbi7nLaG7O1e_fQb-</C0%*fi@$e7ce;*=D!5U"tE!FoX:4oYs:2'A"[qeaO+1!8*8?A."]b%HJ0j!LaMn
%JRDjf>(N&K"1j-3?iqI%#[mg\clmhT`H;#68-:jUEPhu9&&JRr!1JHm@KZIZBOV'MJtQQT\H&nR"u9f+M?Gb@N;eCpK8=">4T^1i
%Aca&>r368u5oHnXI"5s>"'G^p_$4pq_MX-r!bRV79`/[f#.b*j#-@p="bjhuEWYN]%:fs5&KAeEW$XFLKa+VLLk]S@cu:`9#PnpF
%%F"s"!@>bjZ3Mk?%HJ?7!&i110F-5q^FWJ!)1X!=#au$d72E6!YDK@f1'hIq)osfP)/Prb?uiK&Sq-pZ#!1Ll'e)5,!L.8R-3Xhp
%CGq$jJkQFO#d=G+#'!\:eNgY1cnl:;A=a+G6$/Qi+QB!rC&rVc$;psp;*eJE+ts3T":,:-D#oI&U^65h)@24tJATi%mHU?n)@2X[
%Muus^";Ls%'IV%rZCpl`]W)D6"dE.[@0)'?JK[S$AlZXK61O%dr[D4^^t+$5cqm8!XA!.D&A!^sJGG:G5qjVm(mQ#,Q9(BMTFM76
%6,]T#lp1+J@#PXf),(]=Xb!/I9*Ze:7hGouC*:uUa9!Op`_FI4_:7#NjJf=iJa(X>C)A(>-nH.<!XU<-TgX"&?oE!r[9a):Wdt3h
%.%h\\(1EU2"rGB+KD>Zn6!J,4NcD'7BWN(dC7q>"UmnbW-UV/r"!%fXO6@VJ<]/=8HD"oEL(W5KA`Abdqr?CnXplCPjP@UO<E(88
%?W1hpD[\dt:oOU%9eko,1'>kpJ#D,=6^bQ0H9M#+1.Su!]"u$s=BoINTeP5n3,=-]j"'@39qKjB`H5I0`hqfU=>AK-S#NBN)lsmj
%Y<U^I-QAF2=Ab^EN$k'^DQmT]Y<cCR"^,$I\-*@3Srhf!]HQg#TgqMC(j\X1(I:X>1SSfH]d*'.kT(Q@(jj?V8(NNXN4gM,PHS<s
%Sl-i*P4b(inWe[79__52pe'g'Q%ZULJ,/pUnWtTqQc*BkJ]Fhr*`EM1VEVh'b(7=/;1JE<("bh;1!RLD2Ml*DIjrG;1@UT!i%6Mn
%\>4O!9EM8"%t(49nWi;ed8q[nU_uS-e4WDbQ]-;;M-8:kP'G&E(.a*L@mq$WP5):WI$@6t98.U?lDl0CLC/UQZ:I5oP/pWN*YpjS
%Qo"$@W;iS5%"&nKO"CD:ojZF3Kq9jfA]1&mrX:n-`!/8Zjf)=>rEAR@@c'Yf)t@dHG@URjGW:Ld@NWX:\[7u%Hb.#E0qL#eFl<4]
%hJSLkS*KO:732uPhpXc--Ee6^4OEsC]cN!KXDU6qMR;-9KE1\'8We,o/2:US:kBfM_@Rgq!^`'#M$V3i#nrJV&r22EPWY0q%:YP1
%@\>PeY#I_;8h;)$&3qT)9ao+o,f[#R!X9kAKRc*<Pgj6DKTn>\:4as0e9QVi"0+tH`*nT'R"XOSN]?9TK,n=cN2O8Kk<%lqK,($;
%`+Nd%8'd,j3]"m"ZAFtrjYT!R^i7^Y4Pc7W<h%Ic\A='H'f!Q#9q0l/\A=&K:,AKh;La80aSF!cS:uiN#OlJWkaXk0JnO9_,^O]q
%,:Y(mfYUO0OG;Oj&r>"]>i]EQ&U*=G4u`*THc)FRk0BJ,[hQd7,kfOLB7k-]:R:g+36P"6=^`m7XN+I`<A(5n#u#IoXO'O4SM%"o
%JJ!kkG%&q(`mjFnqAjE=iNo4Jc%oO+&?H`K"U2G+1Mil,-SUh"YhCHZ2*Y:;X+n$sf<:PK@#_,fL:'9E%ucqu2'ZijR0YdV,-;J]
%ENLpp(CEjd0WZ86e\eVC=CpcRcp0C&;,`m_,&LN5oV`X)Mc^dZW<o7n#ZOcK9ZC*uL5B[D.nYe5CpI7EMGcg_4[lK&7B%G5ROsDe
%=fER=S/+`sJl2]7AdG00#18[Il)&&r4k$c3$^:ZmbYsJ%Jg;$Vd8GIu,,71Z.[3r0Zq<n]jT:R2F4Dh:DGdHGR`[Nj0r]t3L!2#Y
%<^@TlKb_j#CLgTY;8U)t!J2:ZXRu:<*Zg]bi;l)&80/bt@fmr.MM)3=OMun7&2bki(i^E=3%RTA(!tBa8UNgK8AGp&5VKu!![B+;
%=@'JbarCo<6:ZZ1l+"sR'KND5!P4aa&s/jY7ZAj8d,Kf!'K;c77TA"_AISnRP(a?Kekd#k%4aE4'@TAZVPIW(LMe<g5`$Jg.7(eb
%*YnTE\NboC,ndU9,k@h;1rdGDd45Eie[SSJ3o/#=dE#=H,?&Wu);gPtTeWS`4lr.^'PE/l)6]Xbh*HsRW8Ur_V"WtFs8RI;3mi;2
%6jX\n&?3oaD-Yf3AaLFHh1EPkUh-m,ibiG_dWR3ZeS5t[QEk/!r0F^&BksS8a.%(JQF13O/,&g>NYP4>YT3P*Z<g,W"gXZ'?.!Y'
%Cq%hn.rDToMhMH?,Sa%:/4_$8:e:(_-Xj_T%d>PX[YlCnYECSE-'<pWiWb>LR`*BB`+K1oLtAaBT5"oJBuL*h<\46to;'lmd_l4=
%F4u:VfF13P)2hq<<;t#lL:s8TPs4/Y'k]VkRe[AN3VAhc0)"HZrJsTsnl10sT$st90DQ@P,RMffEk_[O:I`J[p++P.1=>(<9Do3R
%E&oItTjIgrP41"UpFBVY&tW[??P*r<nu#Uda,E]N9G?ZY38n*c4[>W(ANK/Do/k(ni*"Tf+K8'"<D,OFP8Oe$E/jG)C@XYl[Qcb0
%M#4"/6aLTYQr<'08!N@hAnlSY4&1hmC_)`Ip`fCLclXS3UP-1=I/e3IIiNaROoN;=!S#?V!S#aeVTdl"I9_;o`c=`-M.[@e*:=5)
%llK?D#pWhSV<#1(OMf)D5/$$H0Cb"FK;</',-smiY2$d@26A]u/,)h15"PP"ilEsuB/2dLQRo)Aj`\'LcPGj";LVU--dVRo#6F12
%!IKd@*\tY=&FApTE-)+29#QpINB-i+!$2*ELFVhF96;$BqA&OS@:KghfV>&5(l10tatH&9:0upJ/MBjArS^*W9)+qh\HV<ckcZHL
%IGuDGR?Aer1B$_\Isa`>B7NZLiq:5&nmlVOIcHc%A2lc@kEG6Y_f_&t,i9tgIS)md`I!Cqe";]Cnpcf*j:mo&i#n/58Q%6F%ORI-
%%J%/(^+;s@L<9!Ob01tA=c(4b$0LJ[2=YcBNTk.V:ZHa>fc/0,_)/m(&O)3E+a#&M5)o2KXA>U>qBuH*pM%Rl4tTIgIN&%2fUkY5
%&H@A`.mXZ\4uZ.k!LaDCCk1XM@7EM'!g49$O$(e%!&=ZI)(h9td/8E+#W,%Z*hs0""e$sgCk7#;R-"f&COi@6IAE0WW0Vk5QKAbF
%K=*P"a?E]6=Hf8L3oSIi,KMLEkeUFKa>)c*,INLRdkJjU+1*0J:kOO:X22][ie5Y<OMb/t?CdN'3O<JkBJqZ8W<"8/`04+SR,SpS
%q%;t#]LS`,pe=E\c^obr_K.DMru-tLD@Jg+5&^`qN^'uL%TeDDo55Y?D_s(c-hq]uf1H26l6foOKm2FJmk:id*H@^c#[HOMN1J@a
%=5^<.qH<I`f<70JiS<F^o^8?Eh]DOi02I3cgB5/Q$a3"ei&Q=EP5uo8!r=[:HCEomG0f^KMcF`fdh^a^mq]<B[Lo7'rjJrX2VnSd
%/KAR6_6jhZK+LI7&b6*H;rE\oh_k=Am_NO6l"uRron?[D4A?1[<+Y'4#%/XO5M@3-aVOJ*>F\"?_D!a;qe*?I6&3WGfTVM`M$UDn
%e@_Wr`"^_<]Tj&,&2FGBGf]ufU81(RnmMn,AAD-m.u)P`iPX:.XFU9`5)qRe$i-F]$Y1ZBZ]L)c$K6A[e&VlA\-`OIo.^]*U6)50
%JsQmR'dX6VOp;p00En&JUu2o-i5=.l01,=fmKm5IjXF!0An'a5Bm?'R64OS_,fl`G(4@?a]o^)pMgHj+/6n;A-NTu/_gnWF_\U<&
%$XTXM$2DFAI'G#2\Kc+\P=\\U&3nCW(]lF-#t-f*&kEm=OCL&%nB"g;+P3s..\USk`uO+`B'g<5R(Knn2HU*QS2KE0`<$&2Zl$R5
%0oblpPEe*2R*#d0n/u-G`&pruph!6OP[b(V2M5F.aqt,m.:\Xk/;e#Y\qkV9Mb$NRo8"D9F>@XSGp\G?9Nl-4G,3L1eVZp?.@KTh
%nirb`87E3W,)J>R5Y;uKaD`OfP*eY/87L.Z<Kr/2:nB@E@\2+B$;r1&Nfn=)6aJ*%fr]oMM(,fAbGF:(./h+@;d#=\es`rPb9BW5
%15g.lj!k^I/u(O3b_^G=;,=`9`hY$s6Ei#j3=6i\RfPQ?k@<tQKfQ4.@S6+BO=\;R8T@"qpciO6O?QB0>PeP;@Z-j&NKcf"f]oAJ
%,Nf^f2Z64B8<$?tX68/)(@5;)F3I!D=CRrp/4:h`Mdan5#r-9CncHF+E[jP^10EX?Hq(.-A3(O/N9)F3jd?$t>%3Knj;G`ae?MTd
%L2L^uPmOUnOq2VM&CN:<!b0.hUd<<%U2"rM2r#0sD)G'N2<(u*9"pp!!]br34&L7Dk5KJF032=GJI^,3"2q&8?e>mIV0aTW&-*`"
%Is/a'na")2pojkd,'_dX@jStbIKgfo7u,-&a.ZRg2k=?&OlOc9r5r0Fn9;W+J/PE_19gZ6G02d'J&2_c3$pCJj7n&T3&0k$*/;AD
%mWit>(k'H64+P.3!JU<l:lK;lqC_rtlaEA3Ii*q5GZO^UgZs)d6n%4*%l;c0!J8nT7rZXnX?6faF*HuY*V'C2^G0aXaBPh9]DY+[
%eu)lsr\WO5QJoEga`'oQ"fCA=OiOB7B0]5orB>;hh[RE:o.g+;1e,kG4T(4QrQIdthSCk$Ii:7;r&rF7iQoF/YAVCqs5/`<!.Ob.
%WTbkX1ei5L%#2-n1`5&!:KsGFotO8+!0:7hQD25,g[!Rq*ra1$J(gqsL?/(/j>Ze<^VK$?Oc?8e(ubH1Gl=73dl.#%T)TOoRYU"Y
%Nu@Hj#p'!$=<]6pIM:RZgCI%l#,2R^Jb-M%.n!iuFTuD?-C?oPA?/@PH;"0A&S7+#^"iMRY>>06MZ"o(@r!@34AXiN7IJZH7ZR5\
%i@^Y8IEq,"ICn%sFo="CY:5@1"Ou&t29tpnQ>:gfY)PYJ`eg3%WR-i-n)t'BR>d1teL+.YR!#$kb-(Ue&?T'7Sm8djPsCl&HhLi(
%[-95Qh0Ifd2sUAmS1#Z()q(>DNa2Lq3EX]Q`a\f2LB6$SGO364jS(;_Es:utr]HY0EA3IOY*BM;S8mi8a5?A)j[]M9HPjn[qnqrY
%=MGfolNbo>W2#Lrq.V_SclUu%m5p(bFb^RqZ64fl%oVn-ljj-/1E1fGXSX[AZk+&RN*Q^UP.9bt);RN&Mnjk_io6*t<e!)G+'@:'
%HhO,'%]?TfO<pgE%IG=?2sU+W4e(+bUR%Sf_F!3BC+)NA@CMCHrb1M-fOsriUNBl#*^,0UNAAVLh<Dj-YO?Q/fQSQL75jnhOjiQT
%q[D;p0\/1DS'?b@`)?BcEDFJ$7I,-#3s>CgeGD1[^\$YDFqapo]3`PBjH,A]O'Vd2iuu&1f_"_$IO,\6f=uOBi_3;*rLY6=A!4';
%]oG%Ocq$)B!%!,,>"FTL>%9<D_'ah/kbLV/SbDf^dWPkgJj*2h.4`D:).Pq]-uUTfc'8(G_M"mpAnisd6]1[QGf)(oUsqfP6DWf$
%j%jDN:TW1^;;uDAqCJ/siGT`+GYFJaE:-!'InV*\mD,oIH:./PN=BAL(PfX%6NqsmETH!5<d]*NqdfW4`u'I9ZU'&1:3,S:-7>/*
%dJtX.,M7SjmAYp`o@W5)F,/Zn\q=3GS;1`uPG%;&\*1'Kg/J)(f&`RZL3P(A9?D&.h3QskHd4EbTo+9Qm7h(NR@2RW>Y;K=:'I2#
%cQ6,9bW7IH:s@MoS2tE>4XXG'abeu68tP-s=[RD_I=brg%9P<sGJ/Jh1!TC\l0kN<T\]2h;*<7CB54'+*83SqO42#Y=C*.dg7q^#
%n(Y`_k.4@X4.=e/:4K.dlo:d.h&o.:*<$A%?KE5-E9'^CD)1R`)<W:QdqV$Qs']4MIoj0I:K9_;1r8`PZTVo7;49[-2F1-`AF**`
%f>EFcHA"GN(6AB"TZ"b,1j=iKJq`6A1TV%Lq_6f8F4_Au6KrL&j>ksoR-4uV`5[1R@*2MXW-]!\PaM5^#60ht"=ZQ#6?p(=qDcBe
%XLo6"/*@Z8K@AgR(\41.pUP8BiT0WPOo$:bJJ*]LXFfRH%ON>tB&a,Q\*UrHS`]Z[pbj2#VoR"[[XiCS@J>G*arPZF:X'_>\OP>E
%65p=;_/b;h+jUJ1P[l7#0l-nq3I#"2X,Bi$(sYj3d[VCSmtmEH1iA;M=U#dg0l3I*fLa0[%.dU6SfAbrmPHR1YP<e.T`-DS@8C-L
%K[9-MiJd_Q0<R(kC(?(5g4Rd02!LfEYPiM\l)=3gRj$428b^]B"*ZuA3[<m\:c./M8\*tt8,J5V';dQ)X4fs;Qgi/*aW?T#4I>Fh
%-]r\W8*)i1S<k;Bj=jf`.nImO3?q,CQ.Z(7;3;*@m#;uic^Q+i3-Fl?*C?DXR%@TI:^c7ao#tc"Q>bRpr^8;qUDfKq@%)4a*gAe^
%pU&4UV!C-:Ymk?<"SK"jM=iP`cbt]q),rH<&f$C/C+?a3ZpG+XL;`?R1Li]t5E,f6p*(Kt$8^7b1iD6k,t"gs+LN=c2583/@5"9L
%putZHK>k4IQWp#:DBg8E,3&B]f6A)\@6\`Jh/%i#Ot`'DAcP\q-t3ud5pe1j-gCK-R$*6K"C[H)0\`\l-p@/fd+"hW#Rl,.':/t0
%?bbT?JF,[5U7[qPqfSaoTSXpEQaW-u6Zr:egQp2h3o;*I>M@rNpNSq]l>jT3Z.ArbZ21TeWZPcF_q_\Ej-ZFIFk5+;C<(ZqpLE0`
%W@c>$m+bnUESfG6Ca8:p4#K[cpV*`QRDkBT`k++-[/I_X$USj,/r7BPBAW'*T$pKL?<fBIXQk!jb*NT.SgTNoF/sq;XgtaeeE9FG
%QbU`Z^YRK(b4!)KF(JRT#lNh-!O2rTGZPnWUSI#3Yh@IJ_rJ3f#MNjl^:3X+!n^K0>MeP(6K;SIqP(O"Dmj'nECEq6_)Cl$]99_9
%@LA[f:M-ib[mD0,LBJTJ^Nr^*_M1-5Al'#"o9\Ts)opL><IXcB>\WMt0t5N.o<?JE\[\tuh/DIKn)f\o9'sbUNc!+El>gO?HuubT
%\+9=6'6sDZ:=n<:NdJQ4WPm[UN<O=@'\CU4c&2Y\]Xc]u5Fh<FlVk9,8OmoJGE.^gMrhR_/\$'*-oe,i-%UQ5YE7N#"g.5$6D;8[
%9>RlO$Gj@Cc3i@3="J3*\du[Fnm_tZ9>T^n@21FsK?M.^@RKUs]j102p;<XPnB/J<pYE`LIdl=6(LbY`[/e].[29FY3,EGtQiVQM
%g^FG3<AK+$J7Fc4nT$]2gZRUdjG!7g4WHEnUOfVa[)JWPmr#;HII,OsAiUntU+s:KmT4r$jV>nIqHSW+h@ue>U[M\03"sE1]R;dF
%Q_uq8i\tgHeV1_L)5jQlen<#G'$5>V>BLM7_`HI_rWN"CHGY<Y.:q/jE<.[Fags!e62]spR6N`^OQ#m@@)8=l2`Oum*@cJg^HPn^
%G5W1oo*r3:qmbA<m>WFEB'jK?S5d+q!mKBcD/$U`mpNQ"`PbDh$2AYn#W;!G"#pNtC>IC6BEb!@Y-bi!h[%gc^9,0!lFY<3A`oem
%hq=M-o]u?G$jHJo67^D2092NU^&<AYfXlDBLtf=CNTacVimp.n7=(5U<l=#F+6Z#V8e>3^qaGc(8JL#2Mh"(YX0e_j9.n&XA]s.D
%ROMA*Z)/XAe/:s]=om"F%D6qD0AFttPTPZ.q5,8i2FR:#9DfDH#?9Tdd+BEL!^oeR'r$i=o&f`T[Erj7`.!7+hQNZ`$"OKjqh&H=
%Di1.sci@$AZ!k&hV7tlH*m/`<''QkccV'8J:F/j)c#Ul;Zi]>6OEAIC^c'"'PH3-_m_KOM'Lh?2BG\[W4:GJdZGHT^5\rh:.OZ70
%J:R2k$_Rp[TQl1->,]e`.g/r')schD7bGCA<3-(eSisr%ZP)!p^pWiCo]?BQYrjjs`nLr(aBF>-gB%2e4G_o7d97TXLq`uQ1#0fP
%>JiejK&Q1Lk&@RdWg:tMSfobgD=6P3=WmKPS[ck-DG]1$m'd,&]XGRTg6S$mOAXJkMP"Y+f!)Y=N'(JFcA4W0.#`Z^?6XHK%#CBc
%[<j*3elP;uX(OW-gijM/n9-&@L0((P4somaQJ2!6`gN%)3PR8*(-'Pi:gMb.D(=(!]e=IC#7]#6FB8a\X;g"u4X)eY_N0pEWM!P?
%Yqq0Lg7,WAA"aJecsFjG@.6ZCZ3f(nRod42b_!V_6Gu.]Ja[J^>/Vr^h=B88nVUc4qo>r0g>fdmK9EmOZ13f%K=q0^p].aZofPLP
%>5SebCNG.QV2b0I)*6Y8*4Wk:2frH@GBqDoO#h/HC&Dg<-?=X@hlhFuj;&?kc_VtIM%p(A)(QK25P8L>:p/g;6IVm(!/=Qbf_,)>
%Je(AjO>+($$gLmb(iGhP7e=kd+Uk#1Pf.!`dT721l0]Q"q*TRt$i/f%S/XhNg:A1p>%s`d3Y)6:oO7f*NAsGZpdP7:`A]*[0/?@;
%/Y%4nVc2EJ1h"5WoEj0S9a5XDCVYnpairCD47ssV,K0s'kT"3-E@ci[XGP.>4!.MiE/i$*6uHI1[1WR-"aULqq.kfXV.Tf0gLSl;
%/!OCqLfmkT;)9KOm"eoLn[TV?+GPg^PVmq7d?=&KQHdCs9M8]L'R\8i%NisujZ2X"?cfr7N?TucdZX;T)SEYc0*ZdjmMYP$8>es7
%2Y#:&j09GQoj*NS/ln#Phh\N>mjWjP]GC6oO=T:._OTfdU\SK9f@[XI>i%)Ie]0.U"3Jja)5KU9NqHgNrjjK`j)+"$XrqWWkZT'%
%nOlGP`:_,nl0Z+=hYGk<Z'rM?p6h'62t;Wt\M),8'%B?<,??=N:>Y\skQFR1c!]o6[mfrGHlUXEp/)1&%h(fj;+OYa6'#X;D+jZ0
%N%\gcRlqh5%.#-_a;a+*aM3I\K2Tg;J$g(<'_D4>A:3k]Hpq>Z44"3QXp*)j>s4>bokQ-&!\)'Mac@ui^6KhXXI_'Ml'Yjb-4*"p
%s/AZ]LRcNoZSaYp$F#)3laf3o`9LhH9#8^8]4Dn1K!p%6Q6\-Fm1hC,1-Z2ai@$0b;Pc([#os&dX5u`3Z1aR1hn`\nE<LeMFWm#;
%"=s_+9<kohlNNHc&8WcS2h"0dcTu0=</X.&@/dl1_T,%i=C)J)`+84Z1L?<3[tT6n/Wq6@'()>cU/\Dq<K0OrN.c:'ZoC>ai2B>#
%>S;X5%`9e:SM&eF:5_Q2`0t[P:4mOT%&A3Cs-Z7ei"^/9+'&Ib.\B41g]PD9pE;@)GDBr867`ac&<YPq76<ouh.f?!#jA`)H^G.?
%fE)H\B!bFH>katgbbYp+o'g[6Y'g9J![Bck>%K,kT\*X/R@+qb<k]af+61]aM$CMo^\/G^m0r/,9[me&n!4&u]+Wt^4%L8i4dXVh
%;%tkMN`%:+kCmU$!\Ed.-7'95nF#'E!J4_.P)H<>&9(#WKVJEgN_S"]YKn*W8Z213Qs,c2*/'WB,c+BV7'K#-Qt->uX.WD^?<h\X
%2pU8%8)USogDBiN@MDYQ/'3?pTT8ST)[rCOUWZ<rOF)QiQMLF4W_T'5&e.c5U0.?@Q]`iRhTR!nMH);9#NGI^!27(p&cBEgdN.f8
%C0Embh9V,rs+j=`nA>d(!2JCANW#+lfd>:%"STtf;ZA;0<Yf@OC:rkN9#]Ki<6O`rUi5f.&IT9%F(JEh^Um_QkoWap*:jQ$[GJ(f
%QWcc@gP<<k**\1!AP$3k/k)"\##UEu5QY3ms(eFYi[.R&)U[jaYqIs.S9X5[.c7r=g5s#h%6"oDJc^ZJi\U(^08R67Bo(lkjXMrj
%?,;KOOG];`RXKme1J#Yt_QOsCQp6qUdY!AonldKIs4.OE$qCR_GBI2OAGKLrh!=Y@fT"uU_QSGc"K5KD<nRr>Cofn]ZY<k-dCLin
%M(=Qj!kXnG[^n0oP..K>GPCDHZ;42VoR$q7pjQN&0!6i@js&2L1?=.3lRdU.;6#PdpF?KIPe:*N>j:g2p8AOY&0,"_ln%K(bnmCI
%Ck"n`g'3ee[`%keA&#Ca^4_1;$@2>ZG?).9R^3PFZiYVV3OI.QIXXIrVt.5>[LR/:n.iEX*c&eh4J7.B(mq&Npe"6C<7Yrj]rP[H
%CPb;I;%q\+5?2@S.rLOOk4:X<f%cK!IW[0ag94SSD5fWF0/[RM_<j2QW)]=;]"aM0j)\@1=b1q=^-X.5E[TdL]-rNJk/k'EIAs6>
%R@X;<BfCM+:A-U'/I@I;eHF!.n;5m$?3^YnB<n!fZ_2c/*=1t[@0rk%5h'kS%).)_6\3hGU@=F"9q=7r+<8">=I!dt3b@Bi.P8kQ
%)%Q,;"D,*dH&P_Z/;L'q2p6:^EBo+%dK@/8EJYBmb9.3jG#mkhQ]XY0NTI[1+l%P&\I7GR!uB1f0_e*AJcKP>*A\L9d7n1qi)8o0
%!u6";DY#b)&=<L>H1%);Np2s`\9g1WKf@$uB)_5M8imqnAI!eu.>j[V"lbN\^"OWq%ZY6?7O3tQSP"!)CFH>\#c6BXk`g88`.d&6
%?s%)e@XIQs>gdalTu<UEI,1T!+=PC]ckCfc>""iJF=-\+(TjuDr493e]O+2T&qtem?qGGWL\1@ndRTHeRZC_Cs3-YRH:#7c8m2or
%f![33a1D,D;]l9;.XjLP$]FADV"h/;(,DjKmQ?0$Iph>+C@#eHo(Jainj[AAgo"#Te7bI&_7SR#'YGB7qF[LgWsIQ=$o?EnEh/eC
%&2^A^SI^?UTQ-dE#L'4a"Pte2Ln0APfZRZ)[N9M<cLB2=jq+J/4*+a1XYMDoXapPFQDH7pNIANfj]?,9g+>Z9M,e$EmjJap$Q[%B
%,*f"g"U?Yg)q@TPOG*q&RI`/%cC1f%4E##-(R3Le2H@^Jp&1KXm6U3VY!XF-"kSV[01U]*,RY*CnAO/+!bO<6-UD@Cs3DJ[%R==!
%-sU&WWtg"5I,&d*qTU+,be,!e7pc`eDUWZss5:Gp4kT/8s5#NF*PKqpnj*,Y^+I(&2r8Yr(u7$m^!C'6a17$XJje]ij&Xo_fR%\J
%BfBp`l`F.;$X(uu,A'f"GXf;)=2*pH_R&P!\\d4%9MTVH3nL_M)-7B@4tHt8^G;_maDJ!$CJ1g0[6>FgmpV\+hHsu]ZtbLX/89#-
%\rY_9gg4;,l[-$Xa!FI5ghpj7B-$TegGaI`NsknRag`s+[)@\#4G1D#D-l5-B(]6AM:A`?XBGK:3WB##QSkhY6JfAjA^0MDLr&n0
%QSkhY6JhVRroFH9`>l&YMT_I=?XZM#!gbdF^I$d2/o*oY&?4h$#(UAORSHSVDSX62gDt`"ga6'p0t'kREXb9E@KHZ$<$A]gGgQ2G
%)!+e[/Hr"n'dZk2[o1-GXlQVJRmRg';r+qGc`=l\+_uePn>VM?<I=kB8?/.iS+:nZoRc?tIXs;:!u!9(B=9(C0=:;\I#k]4K-IAR
%RU76ri5@DR@em6]MKQ.l/JoPuN43'=*d[JB3+WW;6X^(V67"T(hq]^b!dtc(TB6g/l9)17Z;SBjbHIg6C6:KNh8-uDk*T1hS*=G:
%GuL>rNbRD6SF[NL"j1+$[6Vi=fX;D_XP%)eAT*$HCO:9b3U^Xqfjkj0S9]fa/T>iTWpc)jLT]#V,RUggjj>FpOA"0foi4m?"0$%"
%dHHn4R2kam%oUaJ(#&CnF<_Gr%AQ#/-\:nua?d3V3p2II.)2GLSe"R(gF#MT$g5E;7-<uZ\J-,lP/FE[n<+ar*=^ZM_ClSJ0?Fe,
%3Hi+8(a!&kc%D!Sp=L*U!%&^Z-'*rMq:u[1!1JE(>+,HeR[AU8'fnGkVNNjr>T!Fa9?muD^\I^/j0(!iHC)[9R))R27Z%k(@%:Xp
%EM`<5e*(80Xu'CU!_:NSjlZ`.50P[ooN8e/aeL1/g<>?Y'0$%YYk-"9LmF4EEd>YN,OdM84iHr*e6*P700']7ALZJoMEBX0pV725
%4i42r$3SjE?9\n8l:Z,E!+'h]6p4.A@[\HH-PaK7QC)9?f?#p(/2>B\YJW7O/htT^YG7o,[)=dg]H00Eq4\MN%.QAro8hFS-HGH:
%j6qIr]M=:V_@k<+nToF"nWFO6%.tn\ka.U&AuIA:"oO^OQtE9M@=Igr'%<*AdX([c#A_[XIaDMC&\l$u^\$SEo+fo5p.r_eJ+kGj
%_L#;C7&eI'$MhdJ!P8lY\J3,,:+UF@(o#t*;u(]GQZ]jri79kKqZ^Z]%lt"U0HGn*nRj^sn9`r5I(B(]U!SSRc\5B+kP]"\>ZJ;t
%)e8d;\u#c*q@M5D[*3YLs"JR[>i.:Y%A?!q`a_FI.rtt[\[;7Zrh/<L*H[hKY4ja;!;,KAeDh(*e[Rr.]DD$neKOMfk_)(Zqna.F
%m5sLJZb&A2`ne`8iGdk1]XI:eLW8g6TLQ/s_i=*?^T[r]MJ`FFShsfhqYu=AJ%5~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 472 1403 a FO(F)o(igure)f(1.1.)27 b FN(Log)972
1424 y Fz(10)1043 1403 y Fj(of)19 b(t)q(he)g(r)o(esidual)g(nor)q(m)g(v)
q(er)q(sus)e(t)q(he)i(number)e(of)i FN(GMRES)p Fi(\()t
Fj(m)t Fi(\))g Fj(it)q(er)l(ations)i(f)o(or)e(t)q(he)173
1495 y(\014nit)q(e)g(dif)r(f)o(er)o(ence)d(met)q(hods.)173
1803 y FH(Pr)o(oof.)28 b FR(Appl)o(ying)20 b(int)o(egr)o(ation)i(b)n(y)
f(par)r(ts,)g(w)n(e)e(obtain)256 1965 y Fw(Z)332 1986
y Fr(1)305 2163 y FK(0)415 2081 y FH(e)453 2046 y Fr(\000)p
FK(2)s FB(s)545 2062 y Fn(0)572 2046 y FB(t)601 2081
y FJ([)r FH(v)683 2046 y FK(2)715 2081 y FJ(\()t FH(t)10
b FJ(\))j FA(\000)i FH(v)951 2046 y FK(2)983 2081 y FJ(\()p
FR(0)p FJ(\)])r FH(d)e(t)27 b FJ(=)35 b FR(lim)1302 2132
y FB(t)7 b Fr(!1)1460 1961 y Fw(\022)1510 2081 y FA(\000)1613
2024 y FR(1)p 1583 2063 101 5 v 1583 2144 a(2)t FH(s)1651
2167 y FK(0)1696 2081 y FH(e)1734 2046 y Fr(\000)p FK(2)s
FB(s)1826 2062 y Fn(0)1852 2046 y FB(t)1883 2081 y FH(v)1932
2046 y FK(2)1964 2081 y FJ(\()t FH(t)j FJ(\))2060 1961
y Fw(\023)2123 2081 y FJ(+)2220 2024 y FR(1)p 2209 2063
61 5 v 2213 2144 a FH(s)2237 2167 y FK(0)2290 1965 y
Fw(Z)2366 1986 y Fr(1)2339 2163 y FK(0)2449 2081 y FH(e)2487
2046 y Fr(\000)p FK(2)s FB(s)2579 2062 y Fn(0)2605 2046
y FB(t)2636 2081 y FH(v)2685 2046 y FL(\()p FK(1)p FL(\))2756
2081 y FJ(\()t FH(t)g FJ(\))r FH(v)c FJ(\()t FH(t)k FJ(\))r
FH(d)j(t)1219 2323 y FA(\024)1319 2266 y FR(1)p 1309
2305 V 1313 2386 a FH(s)1337 2409 y FK(0)1389 2207 y
Fw(Z)1465 2228 y Fr(1)1438 2405 y FK(0)1548 2323 y FH(e)1586
2288 y Fr(\000)p FK(2)s FB(s)1678 2304 y Fn(0)1705 2288
y FB(t)1735 2323 y FH(v)1784 2288 y FL(\()p FK(1)p FL(\))1856
2323 y FJ(\()t FH(t)d FJ(\))r FH(v)c FJ(\()t FH(t)k FJ(\))r
FH(d)j(t)59 b FA(\024)50 b FR(0.)173 2606 y(Thus)730
2681 y Fw(Z)806 2702 y Fr(1)778 2880 y FK(0)888 2797
y FH(e)926 2762 y Fr(\000)p FK(2)s FB(s)1018 2778 y Fn(0)1045
2762 y FB(t)1076 2797 y FH(v)1125 2762 y FK(2)1157 2797
y FJ(\()t FH(t)10 b FJ(\))r FH(d)j(t)60 b FA(\024)19
b FH(v)1526 2762 y FK(2)1558 2797 y FJ(\()p FR(0)p FJ(\))1664
2681 y Fw(Z)1739 2702 y Fr(1)1712 2880 y FK(0)1855 2797
y FH(e)1893 2762 y Fr(\000)p FK(2)s FB(s)1985 2778 y
Fn(0)2012 2762 y FB(t)2043 2797 y FH(d)13 b(t)61 b FJ(=)2337
2740 y FR(1)p 2307 2779 101 5 v 2307 2860 a(2)t FH(s)2375
2883 y FK(0)2419 2797 y FH(v)2468 2762 y FK(2)2500 2797
y FJ(\()p FR(0)p FJ(\))p FR(.)p 3135 2747 38 5 v 3135
2792 5 46 v 3168 2792 V 3135 2797 38 5 v 173 3069 a FT(Cor)o(ollar)r(y)
30 b(1.6.)43 b FH(Let)24 b Fp(E)32 b FH(satisfy)25 b
FJ(\()p FR(5)p FJ(\))p FH(\226)p FJ(\()p FR(6)p FJ(\))d
FH(and)i(suppose)h Fp(E)1888 3037 y FB(h)1947 3069 y
FH(satis\014es)g FJ(\()p FR(7)p FJ(\))e FH(and)h FJ(\()p
FR(8)p FJ(\))f FH(wit)q(h)h(a)g(g)o(ener)l(al)d Fp(G)6
b FH(.)173 3169 y(Let)20 b Fp(G)27 b FJ(=)20 b FA(r)14
b(\002)h Ff(\010)g FJ(+)g FA(r)10 b FH(p)c FR(,)33 b
FH(p)27 b FA(2)21 b FH(H)1177 3138 y FK(1)1167 3196 y(0)1210
3169 y FJ(\()p Fq(\012)p FJ(\))p FH(.)32 b(Suppose)23
b(t)q(hat)f FA(r)10 b FH(p)29 b(and)22 b FA(r)15 b(\002)g
Ff(\010)21 b FH(satisfy)j(all)e(t)q(he)f(assum)o(p)o(tions)173
3268 y(of)26 b(Theor)o(ems)g FR(4.1)f FH(and)g FR(4.2)p
FH(,)h(r)o(espectiv)q(el)n(y)o(.)41 b(In)25 b(addition)i(suppose)f(all)
f(t)q(he)f(r)o(egular)q(ity)i(assum)o(p)o(tions)i(of)173
3368 y(Theor)o(ems)e FR(4.1)p FH(\226)p FR(4.2)e FH(ar)o(e)h
(satis\014ed.)40 b(Then)24 b(f)o(or)h FR(0)e FA(\024)28
b FH(t)33 b FA(\024)24 b FH(T)40 b(and)25 b FR(0)e FI(<)h(\017)g
FA(\024)g FI(\017)2399 3391 y FK(0)2456 3368 y FH(t)q(her)o(e)f(e)r
(xists)j(a)e(const)r(ant)173 3467 y(C)k FJ(=)17 b FH(C)11
b FJ(\()p FI(\017)p FR(,)f FH(T)17 b FJ(\))i FH(such)h(t)q(hat)1207
3637 y FA(k)p FJ(\()p Fp(E)h FA(\000)13 b Fp(E)1488 3602
y FB(h)1525 3637 y FJ(\)\()t FH(t)d FJ(\))p FA(k)1689
3660 y FK(0)1736 3637 y FA(\024)17 b FH(C)e(h)1936 3602
y FB(k)t FL(+)p FK(1)p Fr(\000)p FC(\017)2118 3637 y
FR(,)173 3845 y FH(wher)o(e)20 b(C)31 b(also)21 b(depends)g(on)f(t)q
(he)f(const)r(ants)i(giv)q(en)f(in)g(Theor)o(ems)h FR(4.1)f
FH(and)h FR(4.2)p FH(.)173 4045 y FT(De\014nition)i(1.7.)30
b FH(Let)21 b(S)26 b(be)18 b(an)h(isolat)q(ed)h(in)o(var)q(iant)f(set)g
(wit)q(h)g(isolating)i(neighbor)o(hood)f(N)10 b(.)26
b(An)19 b FR(inde)o(x)173 4144 y(pair)i FH(f)o(or)h(S)27
b(is)21 b(a)f(pair)h(of)g(com)o(pact)f(sets)h FJ(\()p
FH(N)1372 4167 y FK(1)1404 4144 y FR(,)10 b FH(N)1496
4167 y FK(0)1529 4144 y FJ(\))20 b FH(wit)q(h)g(N)1809
4167 y FK(0)1857 4144 y FA(\032)d FH(N)1998 4167 y FK(1)2047
4144 y FA(\032)g FH(N)30 b(such)20 b(t)q(hat)r(:)259
4350 y FR(\(i\))45 b FH(c)11 b(l)g FJ(\()p FH(N)540 4373
y FK(1)571 4350 y FA(n)p FH(N)672 4373 y FK(0)704 4350
y FJ(\))20 b FH(is)h(an)f(isolating)i(neighbor)o(hood)g(f)o(or)g(S)6
b(.)236 4466 y FR(\(ii\))43 b FH(N)435 4489 y FB(i)479
4466 y FH(is)17 b(positiv)q(el)n(y)f(in)o(var)q(iant)h(r)o(elativ)q(e)f
(to)h(N)26 b(f)o(or)18 b(i)26 b FJ(=)17 b FR(0,)10 b(1)p
FH(,)17 b(i.e.,)f(giv)q(en)k(x)k FA(2)16 b FH(N)2546
4489 y FB(i)2590 4466 y FH(and)21 b(x)12 b FA(\001)5
b FJ([)p FR(0,)14 b FH(t)c FJ(])17 b FA(\032)g FH(N)10
b(,)373 4566 y(t)q(hen)23 b(x)d FA(\001)13 b FJ([)p FR(0,)h
FH(t)c FJ(])17 b FA(\032)g FH(N)964 4588 y FB(i)992 4566
y FH(.)213 4682 y FR(\(iii\))43 b FH(N)434 4705 y FK(0)487
4682 y FH(is)22 b(an)g(e)r(xit)f(set)h(f)o(or)f(N)1082
4705 y FK(1)1114 4682 y FH(,)h(i.e.)30 b(if)c(x)f FA(2)18
b FH(N)1550 4705 y FK(1)1583 4682 y FH(,)25 b(x)c FA(\001)14
b FJ([)p FR(0,)c FA(1)p FJ(\))19 b FA(6\032)g FH(N)2109
4705 y FK(1)2141 4682 y FH(,)j(t)q(hen)e(t)q(her)o(e)g(is)j(a)e(T)34
b FA(\025)19 b FR(0)i FH(such)g(t)q(hat)377 4781 y(x)f
FA(\001)13 b FJ([)p FR(0,)d FH(T)16 b FJ(])h FA(\032)g
FH(N)826 4804 y FK(1)878 4781 y FH(and)24 b(x)c FA(\001)13
b FH(T)33 b FA(2)17 b FH(N)1334 4804 y FK(0)1366 4781
y FH(.)p eop end
%%Page: 9 23
TeXDict begin 9 22 bop -172 -79 3343 7 v -172 -121 a
FV(1.2.)48 b(Main)21 b(Results)2662 b(9)472 89 y FO(T)-5
b(able)17 b(1.1.)23 b Fj(S)o(t)r(atistics)16 b(ov)q(er)f
FN(20)f Fj(tr)q(ials)h(of)g FN(GMRES)p Fi(\()t Fj(m)t
Fi(\))g Fj(it)q(er)l(ation)h(number)q(s,)g(F)c(-e)q(valuations,)k(and)g
(r)q(un)173 180 y(times)f(r)o(equir)o(ed)f(to)h(r)o(educe)e(t)q(he)h(r)
o(esidual)h(nor)q(m)g(b)s(y)f(a)h(f)n(actor)g(of)f Fh(\017)p
Fj(.)23 b(F)o(or)15 b(each)e(met)q(hod,)j(t)q(he)e(number)f(of)i
FN(GMRES)p Fi(\()t Fj(m)t Fi(\))173 271 y Fj(it)q(er)l(ations)20
b(and)h(F)13 b(-e)q(valuations)18 b(w)o(as)h(t)q(he)e(same)h(in)g(e)q
(v)q(er)r(y)f(tr)q(ial.)p 484 387 2378 5 v 482 466 5
79 v 798 466 V 1051 466 V 1103 442 a Fy(N)n(umber)f(of)p
1458 466 V 137 w(N)n(umber)f(of)p 1940 466 V 137 w(Mean)h(R)o(un)e(T)o
(ime)p 2488 466 V 117 w(Standar)o(d)p 2860 466 V 482
545 V 534 521 a(Method)p 798 545 V 160 w Fe(\017)p 1051
545 V 184 w Fy(Iterations)p 1458 545 V 124 w Fd(F)d Fy(-Ev)o(aluations)
p 1940 545 V 194 w(\(Seconds\))p 2488 545 V 195 w(Deviation)p
2860 545 V 484 549 2378 5 v 482 628 5 79 v 552 612 a(EHA2)p
798 628 V 118 w(10)914 588 y Fb(\000)p Fz(10)p 1051 628
V 1225 612 a Fy(26)p 1458 628 V 380 w(32)p 1940 628 V
411 w(47.12)p 2488 628 V 315 w(.1048)p 2860 628 V 482
709 5 82 v 581 686 a(FD2)p 798 709 V 145 w(10)914 661
y Fb(\000)p Fz(10)p 1051 709 V 1225 686 a Fy(26)p 1458
709 V 380 w(58)p 1940 709 V 411 w(53.79)p 2488 709 V
315 w(.1829)p 2860 709 V 484 714 2378 5 v 482 792 5 79
v 552 777 a(EHA4)p 798 792 V 118 w(10)914 753 y Fb(\000)p
Fz(12)p 1051 792 V 1225 777 a Fy(30)p 1458 792 V 380
w(42)p 1940 792 V 411 w(56.76)p 2488 792 V 315 w(.1855)p
2860 792 V 482 874 5 82 v 580 850 a(FD4)p 798 874 V 146
w(10)914 826 y Fb(\000)p Fz(12)p 1051 874 V 1225 850
a Fy(30)p 1458 874 V 364 w(132)p 1940 874 V 395 w(81.35)p
2488 874 V 315 w(.3730)p 2860 874 V 484 878 2378 5 v
482 957 5 79 v 552 942 a(EHA6)p 798 957 V 118 w(10)914
917 y Fb(\000)p Fz(12)p 1051 957 V 1225 942 a Fy(30)p
1458 957 V 380 w(48)p 1940 957 V 411 w(58.56)p 2488 957
V 315 w(.1952)p 2860 957 V 482 1039 5 82 v 580 1015 a(FD6)p
798 1039 V 146 w(10)914 991 y Fb(\000)p Fz(12)p 1051
1039 V 1225 1015 a Fy(30)p 1458 1039 V 364 w(198)p 1940
1039 V 395 w(100.6)p 2488 1039 V 315 w(.3278)p 2860 1039
V 484 1043 2378 5 v -175 1287 a FD(1.2.1)p 68 1274 26
26 v 87 w(Numerical)27 b(e)o(xperiments)173 1439 y FR(W)-6
b(e)21 b(conduct)o(ed)g(numer)q(ical)f(e)o(xper)q(iments)h(in)f(com)o
(puting)h(ine)o(xact)g(N)o(ewt)o(on)f(s)q(t)o(eps)h(f)n(or)f(discr)o
(etiza-)173 1539 y(tions)g(of)h(a)f FH(modi\014ed)h(Br)l(atu)g(pr)o
(oblem)p FR(,)g(giv)n(en)f(b)n(y)1107 1767 y Fq(\001)r
FH(w)f FJ(+)c FH(c)9 b(e)1413 1732 y FB(w)1477 1767 y
FJ(+)15 b FH(d)1616 1710 y FI(@)23 b FH(w)p 1616 1749
130 5 v 1626 1830 a FI(@)i FH(x)1773 1767 y FJ(=)i FH(f)104
b FR(in)22 b FH(D)6 b FR(,)3023 1873 y(\(1.9\))1690 1945
y FH(w)23 b FJ(=)17 b FR(0)82 b(on)21 b FI(@)h FH(D)6
b FR(,)173 2121 y(wher)o(e)23 b FH(c)28 b FR(and)23 b
FH(d)30 b FR(ar)o(e)21 b(cons)q(tants.)29 b(The)21 b(actual)g(Br)o(atu)
h(pr)o(oblem)g(has)h FH(d)k FJ(=)18 b FR(0)j(and)31 b
FH(f)39 b FA(\021)18 b FR(0.)29 b(It)20 b(pr)o(o)n(vides)173
2221 y(a)j(sim)o(pli\014ed)f(model)h(of)f(nonlinear)h(dif)q(fusion)g
(phenomena,)h(e.g.,)h(in)d(combus)q(tion)h(and)f(semicon-)173
2321 y(duct)o(ors,)27 b(and)e(has)g(been)g(consider)o(ed)g(b)n(y)h(Glo)
n(winski,)f(K)o(eller)l(,)h(and)e(Rheinhar)o(dt)g FQ([)p
FR(11)p FQ(])p FR(,)i(as)f(w)n(ell)f(as)173 2420 y(b)n(y)e(a)f(number)g
(of)g(ot)o(her)g(in)n(v)n(es)q(tigat)o(ors;)g(see)g FQ([)p
FR(11)p FQ(])g FR(and)f(t)o(he)h(r)o(ef)n(er)o(ences)h(t)o(her)o(ein.)
28 b(See)21 b(also)g(pr)o(oblem)173 2520 y(3)i(b)n(y)h(Glo)n(winski)e
(and)h(K)o(eller)f(and)h(pr)o(oblem)h(7)e(b)n(y)i(Mitt)o(elmann)f(in)f
(t)o(he)h(collection)h(of)f(nonlinear)173 2619 y(model)d(pr)o(oblems)h
(assembled)g(b)n(y)g(Mor)o(\351)f FQ([)p FR(13)p FQ(])p
FR(.)27 b(The)19 b(modi\014ed)h(pr)o(oblem)h(\(1.9\))g(has)e(been)i
(used)f(as)g(a)173 2719 y(t)o(es)q(t)g(pr)o(oblem)h(f)n(or)g(ine)o
(xact)f(N)o(ewt)o(on)g(met)o(hods)g(b)n(y)h(Br)o(o)n(wn)f(and)g(Saad)g
FQ([)p FR(7)p FQ(])p FR(.)298 2819 y(In)14 b(our)h(e)o(xper)q(iments,)h
(w)n(e)e(t)o(ook)j FH(D)22 b FJ(=)17 b([)p FR(0,)10 b(1)p
FJ(])q FA(\002)q FJ([)p FR(0,)g(1)p FJ(])p FR(,)28 b
FH(f)38 b FA(\021)17 b FR(0,)g FH(c)24 b FJ(=)19 b FH(d)26
b FJ(=)17 b FR(10,)f(and)e(discr)o(etized)g(\(1.9\))173
2918 y(using)19 b(t)o(he)g(usual)g(second-or)o(der)h(cent)o(er)o(ed)f
(dif)q(f)n(er)o(ences)h(o)n(v)n(er)f(a)f(100)10 b FA(\002)g
FR(100)17 b(mesh)i(of)g(equall)o(y)f(spaced)173 3018
y(points)g(in)h FH(D)6 b FR(.)27 b(In)16 b(GMRES\()t
FH(m)t FR(\),)k(w)n(e)d(t)o(ook)22 b FH(m)f FJ(=)c FR(10)g(and)g(used)h
(f)o(as)q(t)f(P)l(oisson)h(r)q(ight)e(pr)o(econditioning)173
3118 y(as)28 b(in)g(t)o(he)g(e)o(xper)q(iments)g(in)g(\2472.)50
b(The)27 b(com)o(puting)i(en)n(vir)o(onment)e(w)n(as)h(as)g(descr)q
(ibed)h(in)e(\2472.)50 b(All)173 3217 y(com)o(puting)21
b(w)n(as)f(done)h(in)f(double)h(pr)o(ecision.)298 3317
y(In)27 b(t)o(he)h(\014rs)q(t)h(set)f(of)g(e)o(xper)q(iments,)j(w)n(e)d
(allo)n(w)n(ed)f(eac)n(h)i(met)o(hod)g(t)o(o)e(r)r(un)i(f)n(or)f(40)g
(GMRES\()t FH(m)t FR(\))173 3416 y(it)o(er)o(ations,)23
b(s)q(tar)r(ting)d(wit)o(h)h(zer)o(o)g(as)h(t)o(he)f(initial)f(appr)o
(o)m(ximat)o(e)j(solution,)f(af)r(t)o(er)g(whic)n(h)f(t)o(he)g(limit)f
(of)173 3516 y(r)o(esidual)h(nor)q(m)f(r)o(eduction)h(had)f(been)h(r)o
(eac)n(hed.)28 b(The)19 b(r)o(esults)i(ar)o(e)f(sho)n(wn)g(in)g(F)n
(ig.)g(1.1.)298 3616 y(In)29 b(F)n(ig.)g(1.1,)j(t)o(he)e(t)o(op)f(cur)r
(v)n(e)i(w)n(as)e(pr)o(oduced)i(b)n(y)f(met)o(hod)f(FD1.)55
b(The)29 b(second)g(cur)r(v)n(e)i(fr)o(om)173 3715 y(t)o(he)24
b(t)o(op)g(is)g(actuall)o(y)g(a)g(super)q(position)i(of)f(t)o(he)f(cur)
r(v)n(es)h(pr)o(oduced)g(b)n(y)g(met)o(hods)f(EHA2)g(and)f(FD2;)173
3815 y(t)o(he)f(tw)m(o)f(cur)r(v)n(es)i(ar)o(e)f(visuall)o(y)g(indis)q
(tinguishable.)31 b(Similar)o(l)o(y)-6 b(,)21 b(t)o(he)g(t)o(hir)o(d)g
(cur)r(v)n(e)i(fr)o(om)e(t)o(he)g(t)o(op)h(is)f(a)173
3915 y(super)q(position)j(of)d(t)o(he)f(cur)r(v)n(es)j(pr)o(oduced)f(b)
n(y)f(met)o(hods)h(EHA4)e(and)h(FD4,)g(and)f(t)o(he)h(f)n(our)r(t)o(h)h
(cur)r(v)n(e)173 4014 y(fr)o(om)g(t)o(he)h(t)o(op,)g(whic)n(h)f(lies)g
(bar)o(el)o(y)h(abo)n(v)n(e)g(t)o(he)f(bott)o(om)f(cur)r(v)n(e,)k(is)d
(a)g(super)q(position)i(of)f(t)o(he)f(cur)r(v)n(es)173
4114 y(pr)o(oduced)f(b)n(y)h(met)o(hods)e(EHA6)g(and)g(FD6.)27
b(The)20 b(bott)o(om)f(cur)r(v)n(e)j(w)n(as)e(pr)o(oduced)h(b)n(y)g
(met)o(hod)f(A.)298 4213 y(In)14 b(t)o(he)g(second)h(set)f(of)h(e)o
(xper)q(iments,)i(our)e(pur)q(pose)i(w)n(as)e(t)o(o)f(assess)h(t)o(he)f
(r)o(elativ)n(e)h(amount)g(of)f(com-)173 4313 y(putational)27
b(w)m(or)o(k)g(r)o(equir)o(ed)g(b)n(y)h(t)o(he)e(met)o(hods)h(whic)n(h)
g(use)g(higher)m(-or)o(der)g(dif)q(f)n(er)o(encing)h(t)o(o)e(r)o(eac)n
(h)173 4413 y(com)o(par)o(able)20 b(lev)n(els)e(of)g(r)o(esidual)g(nor)
q(m)g(r)o(eduction.)27 b(W)-6 b(e)17 b(com)o(par)o(ed)i(pairs)g(of)f
(met)o(hods)g(EHA2)f(and)173 4512 y(FD2,)f(EHA4)g(and)f(FD4,)h(and)f
(EHA6)g(and)g(FD6)g(b)n(y)h(obser)r(ving)i(in)d(eac)n(h)h(of)f(20)g(tr)
q(ials)g(t)o(he)g(number)h(of)173 4612 y(GMRES\()t FH(m)t
FR(\))22 b(it)o(er)o(ations,)h(number)e(of)i FH(F)15
b FR(-ev)n(aluations,)22 b(and)f(r)r(un)g(time)g(r)o(equir)o(ed)g(b)n
(y)g(eac)n(h)h(met)o(hod)173 4712 y(t)o(o)d(r)o(educe)g(t)o(he)g(r)o
(esidual)g(nor)q(m)f(b)n(y)i(a)e(f)o(act)o(or)h(of)g
FI(\017)p FR(,)g(wher)o(e)g(f)n(or)f(eac)n(h)i(pair)f(of)g(met)o(hods)g
FI(\017)g FR(w)n(as)f(c)n(hosen)173 4811 y(t)o(o)f(be)g(somewhat)g(gr)o
(eat)o(er)h(t)o(han)f(t)o(he)g(limiting)f(r)o(atio)h(of)h(\014nal)f(t)o
(o)f(initial)h(r)o(esidual)g(nor)q(ms)g(obtainable)173
4911 y(b)n(y)25 b(t)o(he)e(met)o(hods.)38 b(In)23 b(t)o(hese)h(tr)q
(ials,)g(t)o(he)f(initial)g(appr)o(o)m(ximat)o(e)i(solutions)f(w)n(er)o
(e)g(obtained)g(b)n(y)g(gen-)173 5010 y(er)o(ating)f(r)o(andom)h(com)o
(ponents)f(as)g(in)f(t)o(he)g(similar)h(e)o(xper)q(iments)g(in)g
(\2472.)33 b(W)-6 b(e)23 b(not)o(e)f(t)o(hat)g(f)n(or)h(ev)n(er)r(y)p
eop end
%%Page: 10 24
TeXDict begin 10 23 bop -172 -79 3343 7 v -172 -121 a
FV(10)1135 b(Chapter)21 b(1.)49 b(Sample)20 b(File)h(f)n(or)h(SIAM)e(L)
2248 -138 y Fx(A)2273 -121 y FV(T)2308 -100 y(E)2351
-121 y(X)h(Book)h(Macro)g(P)m(ac)n(kage)1073 1229 y @beginspecial
0 @llx 0 @lly 216 @urx 216 @ury 1440 @rhi @setspecial
%%BeginDocument: box.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: box.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1
%AI9_PrintingDataBegin
%%For: JAR
%%CreationDate: 6/2/2014
%%BoundingBox: 0 0 216 216
%%HiResBoundingBox: 0 0 216 216
%%CropBox: 0 0 216 216
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: font Helvetica
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: Helvetica
%%DocumentNeededFonts: Helvetica
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2014-06-02T11:08:02-04:00</xap:CreateDate>
         <xap:ModifyDate>2014-06-02T11:08:03-04:00</xap:ModifyDate>
         <xap:MetadataDate>2014-06-02T11:08:03-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9FYUOxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxVgnnn84/Lnk3XINF1Cy1C7vLi3W6j+pRRSLwZ3SnxyxtyrET0&#xA;6YppIT/zkn5MSjT6RrVvDUB55bWIItTSrETE/hitM/0/zjoGp+WZPMmm3H1zTIoZJ2aIfHSJSzoV&#xA;bjRxTo1MUN+T/NWn+a/Llpr+nRzRWd76npR3AVZR6UrRNyCNIv2ozT4umKU5xQ7FXYq7FXYq7FXY&#xA;qxrzV5/0fy1rGgaTfw3Etz5iuPqtk8CoyI4eKOspd0IWs6/ZB74pZLihjV/5/wBHsvPeneSpYbht&#xA;V1O3a6t5lVDbqiiViHYuHDf6O3RD2xSyXFDsVY95o88aT5b1DRLC+inkm1+7Wxs2gVGVZHZEBlLO&#xA;hC1kH2QflilkOKEr80+Y7Hy3oF5rl8kslpYoHlSAK0hBYL8IZkXq3c4qiNF1W31fR7DVrZXS21C3&#xA;iuoUkADhJ0EihgpYcqNvQnFUZirsVdirsVdirsVdirsVdirsVdirsVeOeZ//AFp3yj/2yZf+Td/g&#xA;T0evXZtBaym8MYtOB9czcfT4U+Lny+HjTrXCh4H+TQr5V/Mp7IU0BmuP0ZSoH9zMWp/zyMWKSzL8&#xA;mdYsNF/I3TNV1CT0rKyivZp3pUhVvJjsB1J6AYqXQ/m95ovLRdV0zyFqN1oTqZI71po45niG4dLf&#xA;izMCNxRvlirM/JfnLRvN+gw61pLP9XkYxyRSDjJHKtOUbgEioqOhxViOo/nJNPq93pnk7y5deaWs&#xA;DwvLuCQQWyyVoUWUrIGI+W/bbfFU58g/mXp3m6W+sTZXGla3phAv9LuxSRATSoO1RXY7Aj6RiqS6&#xA;l+c7Taxd6V5P8u3fmmaxPC7uYHENqrg0KiYrJU/Rv2riqa+SvzPtvMGqT6FqemXGgeY7dBK+mXe/&#xA;OPb44nonMD/VHjirNsUPGfz1mih8+fljNM6xQxaozySOQqqq3FmSzE7AAYEh6h/i/wAp/wDV6sP+&#xA;kqH/AJqwoeU6zqWn6h/zkx5SmsLqG7hXS5kaSCRZFDCO+JUlCRWhGBPRnHnb8z9P8t6hbaNZ2M+u&#xA;eYrwcodJsxV1T+eVqNwX6PfphVK9I/OKRdatNI83+XrrytcX542NxcOJraR60CesFjAY/L54ql35&#xA;1/8AKWflt/23Yf8Ak9BioZV59/MnTPKT2dl9Un1XW9SPGw0m0FZZKbcj14rXboSfDY0VeefmR+Ze&#xA;o3nkPWNI8y+W7vy3e38FNPeZxPbzOkis0frKqcX4gkKRirPNB8z6N5Y/KTy/rGrzejZwaRYVoKu7&#xA;m2TiiL+0zdh/DFWPj86PNMlqNUg/L/U30EqZDemQLL6QqeYg9M1FN686e+KslvvzN0gfl3ced9Jj&#xA;OoWcEYkFsz+i/LmEaNzSTgylt9jiqWaF+cCa/wCYdP0vR9Du7yznVf0lrEfJrS1kaEymP1FRg/Fv&#xA;gJJXfFXomKHYq7FXYq7FXYq7FXYq7FXgv5peW7TzL+f/AJb0S7nntre70k857R1jmX0zeyjizK4F&#xA;SlDt0wMhyZD/ANC2eS3IFxqus3UNatBNdRFGp48YVP44UWzG+8u6P5e/L3VNK0e2W1sYNPuuEa1J&#xA;JMLVZmNSzHuTih5z5Q17y9on/ON2n3mv2n6Q09vrERsOnryNfylEJ7Cq1J9sUlkFhefnrqFnbrZ6&#xA;Vofl6zaNRHHdPPNNFHQcQEiPAEL+yR92Ksa/JabULX8oPOc9u3q6jBeam8LrtymSyiKkU6VYYqWU&#xA;f846wWcf5Vaa8AAlmluXuyOpkE7oK/8APNUxUpl5pTyraXfmPUNLNuPPi6NcuAkh+smNIax8oww+&#xA;Hkqb08MVecfk4fzch8hWR8rWmgNpcsk7CS8Nz9ZaQSsrGX03C1HGi0H2aYqU7l0L8zb38xPK+t+Z&#xA;X0Gxm06SSNEsp5o554JRxkQJMX9TiGNAtPtGuKvZcUPE/wDnIHT7PUvOP5b6dex+rZ3uoy29zFVl&#xA;5RSz2aOvJSGFVJ3BrgSGVf8AQv8A+Uf/AFYf+nu9/wCq2FbYKnk/y55U/wCcjfKunaBafUrOXTpr&#xA;iSL1JZaytDeoW5StI32Y12rTAnoyL8tglx+cn5h3N9vqUD20Npy3ItjyB41rQUSLChHf85FQ2T/l&#xA;dfzT0Fxbz20li37QlM6qeJ8fTZ8VCSfmbLdS3/5Sy3dfrUmqWbXFdz6ha3L+PfFQjbVFf/nJW7N5&#xA;uY9CB03l2JeMNx/4KX8cVTj8/bWyn/KrWWuqAwehLbseolE6KtP9YMV+RxUPN/zGfVH8m/lDZ2iQ&#xA;yxTpZMY7rl9Xa4WC2WBZuJB9MiR+VN6VwJZ+Ln/nIkCgs/LFPnef9VMKGEv5e1rQ/wApfzBh1K40&#xA;+Q3VyLpbXTJjLFbySSqJY+Lbx04gAEk7b4q9a/LC0trT8uvLUdvGIkfTbWZlUUBkmhWWRvmzuScV&#xA;LJ8UOxV2KuxV2KuxV2KuxV2KsB1jyBrF7+cWhedYprddK0yxe1uIWZxcM7LcqCihChX/AEherjvi&#xA;ln2KEDrtjLqGiahYQlVmu7aaCNnqFDSRlAWIBNKnwxV59afk9Pc/k5a+RNXu447+2aWWO8tuUkSy&#xA;m4kmjNHWNmHGTi2w70xTapa+VPzlvbVdK1vzPY2+mBRFPeafC5v5ogKGryBUjdunJRt1xVX/ACs/&#xA;LvX/ACVJq+kzXVpd+V7qaS5sUUP9a5yBEpNyHDj6cYGxNTipSqD8sfzD8p3d4n5e63Zw6Leymf8A&#xA;ReqI7LA7Ch9J0SQ9gO23WtMVZB+X35bzeX7zU9b12/8A0z5m1na+vCnCMRDpFGv8uwrsOgAApiqQ&#xA;Q/lj+YPlS7ux+XuuWkOjXkpn/RGqI7Rwu3X03RZG7ADpt1r1xVNPKn5ceYR5pXzb511aPVtat4zD&#xA;p1vbpwtbVXBDlAQtWINK8R717KvRMUMB/MbyBrHmXzT5M1awmt4rby7fG6vUnZ1d0M1vJSIIjgtS&#xA;BvtEdsUs+xQwHWPIGsXv5xaF51imt10rTLF7W4hZnFwzstyoKKEKFf8ASF6uO+KWvOf5b6reeY4v&#xA;NvlHVF0bzKsYgumlX1Le6hAFElWjU6AVodvcA4qlUf5Z+efMuqWVz+Yms2t3pmnyCeHRtNR0gkmX&#xA;7Lyu6xsfcU+VN8VT38w/I+reZNb8o39jLBHDoGpR314s7OrNGkkbkRBUcFqRn7RHzxV35gfl5da/&#xA;f6fr+hah+iPNGk1W0vSvOOSJqkxSr/L8Rp16nY1xVinmH8sPzU836VcWvmrX7FkijZtP0+xWSK3e&#xA;5pSOS5k9MPRKk8Qp3xVlOqflha65+W+k+VNWmEV7plpaxw39vVvSuraFY/Uj5BCymhFDSo8D0VSN&#xA;fLH/ADkCtv8Ao0eaNLa04+mNSaF/rvHpXj6fDl78q+9cVR835Siy/KzU/J+kXKzalqQ9S51G7LKJ&#xA;rlnRnkkKiRgKJQdf44qzLyppVxpHlbR9JuWR7nT7G2tZnjJKF4IVjYqWCnjVdqgYqmmKHYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXm2i/mF5x8w/mBqWk6NptovlrQrs2WrXlwz&#xA;/WWZSykwgMq/bjPVTtil6Tih2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KoTWLfUbjS7qDTboWOoSxMtreFFlEUhHwvwb4WoexxV4b+TGl+cE85+bJ&#xA;28wRpa2GryjX42togL2RXmDShyP3A5AtRdsUlP7DzR+Z/wCYV1eXnk68tvL3li1la3tb+4hW4uLl&#xA;0PxMEdXQLv8AR7mtFUz8qedvN2mecU8k+ehBLfXkbT6NrFqPTiuFQEsjqQoD0U9B7eBxVKvMn5ge&#xA;frf80dV8p+X0W9mms4DpVtMkawW8jKrzXE0gCyFVWtAWI5EbdsVei+TbbzZbaDDF5ru4L3Wg8hnn&#xA;tgFiKs5MaqBHD9lKD7P34qneKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXjP5YWk95qX5s2kDcZ7nVbuKJhtR3a4VT1Hc4pKb/847alZyfl3BpIIj1LSJ7i&#xA;DULc7SK7zvIpZev2X419sVKC8/zxav8AnT5G0rTmD3ukNcXmoshBMcLBGCuRSlREdq/te+Kr9FA/&#xA;6GV1/wBtCT/idrivR6zih2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2Kse8r+R9J8t6hrd/YyzyTa/dtfXizsjKsjs7kRBUQhayH7RPzxSk3mj8mvKGv6tJr&#xA;HO70nVZhS4vNMm+rvJ/rgq6knuaVOKpp5L/Lryv5Pjn/AERA5urs1ur64f1biXv8Tmm1d6AAVxVV&#xA;tfI+k23ni885JLOdTvbQWMsLMnoCNTGaqoQPy/cjq/0YqyHFDsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirEPzY83y+U/Iuo6rbP6d+VFvYNRWpPMeKtxaqngKvQjti&#xA;kMd/JPzv5o1ptc0PzbN6vmDR7hSxMccR9GQUA4xKiniyE1p+0MVL1HFDsVYzpnnqzv8Az3q/lBLa&#xA;RLnR4Ip5bpivpuJkjcBQN9vV74pZNihhX5nfmZZeSdPt+NudQ1nUH9LTtOQ/E7dObUBPEEgbCpJo&#xA;PZSxa20//nJLVoRfvq+l6EXHOPTDCshFdwsjGKcr9Dk4qv8AL/5qebNE8023lP8AMeyhtbm+PHT9&#xA;ZttreUnZeX7O7fDUUoSKqOuKvW8UOxV57+enmvX/ACv5IGp6FdfU7763DF63pxy/A4csOMquv7I7&#xA;YpD0LFDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeP/mSx81fmx5U8mR/HZaa3&#xA;6X1YDp8G6K1f8leO38+KUL5plXyf+f8Ao2tkiPT/ADRb/Urw7qPVHGLc9NmELH/M4qyH8/tc1LRf&#xA;I8N/p91PaTJqFuHe2leF2j+MshZCDRqbjFQifJ3lr8wJtWfzJ5m191S+tnWPy5ArLDa+txZPjDKr&#xA;SRAca8K1r8WKvOvKvkO6P52eYdL/AMS6uJNMgtLh9Q+sn6zdApA/pXD/ALafFxp4AYq+hcUPFTGm&#xA;s/8AOTskV6pePQtPV7JG3XmYkcMB7NcsfmMU9HtWKHlX/OSmmWtz+XD3zrS6026gltpRsymRxEwr&#xA;4EPX6BikJL+YPnLzfD/yq+80WaUahrMDtLZGSSOGeeeG1Ef1hEI5qjyk0PTfFUX5r8j/AJjaL5fv&#xA;vNEPnvULnWNOge8uLUgJZOsQMkipBXgKKDSq74qlf5ueYpvMn5B6Rrc6LHcXtxbPOifZ9RRIj8a9&#xA;iykjFQyH83tX1ryv5u8peZ4r+4i0E3IsdYs1mkW2IckrI8VfSJ4NIakfsj6FU5/O/wA03Pl7yBdv&#xA;YyyRapqEkdlYPCzLKJJTVihT4uQjVqU74qGT+UdNv9M8saZY6jcy3moQ26C8uZ5GlkeYjlIS7FmP&#xA;xEgb9MUJvirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVWTTRQQyTTMEiiUvI7bBVUVJPyGKv&#xA;nvyL+Xlp+aGo+YfO2sXt/YxXt88Wm/UpEiYwxgCjl0lJCrwUUp9k4pVfzM/IXStE8n3uu6RqmqXV&#xA;/pYW4SO7njkQRqw9Rl4RRsGVfirXtgW0V+bvmVPMv5C6Trakc7u4tjOAa0mRZElH0SKcKh7xih5D&#xA;5cvLS1/5yJ85i5njgMtjZiL1HVOR9G22XkRXFL17FDxb82LXVPJ35gaV+Zlhbvd6cqCz1uCPdglC&#xA;vI+AKHYnYMor1xSHoekfmb5B1WwF9a69ZLDxDyJPPHDJGKV/eJIVZencYq8s/MzzWn5m6xp/kDye&#xA;5u7QzrcavqqAmBEjrsGpuq1LV7txAriqd/mjawWfn/8AKq0gXjBb3c8US+CJ9VVR9wxVnv5i/wDk&#xA;vvM//bJvv+oZ8VeIebv/AFmLy7/zERf8nJ8Cer2T81fK/wDiXyFq+mInO69Ez2Y7+vB+8QD/AFuP&#xA;H6cKHkvlrXX/ADK8x+QdMkPq23l6yOpa0OxuYH9GMOPEtEjfJzir6GxQ7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYqhtT06z1PTrnTr1DJZ3cbQ3Eau8ZaNxxZeSFWFQabHFVDy/5f0fy/pMGk&#xA;6PbC00+35ejAGZ6c2LtVnLMasx6nFUXd2lveWk1pcoJba4jaKaM9GRwVZTTxBxVjJ/KvyGfLI8sH&#xA;TCdDE/1pbM3FyaTdOQf1PU+jlTFLK8UMb1z8ufJWuaxBrOqaXHcanbcTFdB5I2/dmqchGyB+PbkD&#xA;ilkmKFskccsbRyKHjcFXRgCCD1BBxVhV9+SX5WXtz9Zm8vwLJXlSF5oErWv93E6J+GKbZLoXlrQN&#xA;AtTaaLYQWEBNWWFApY+LN9pj7k4oU9X8qaBrGpaXqeo2vr32jSNLps3qSJ6TvxLHijKrV9NftA4p&#xA;R2o6fZ6lp91p17H6tnewyW9zFVl5RSqUdeSkMKqTuDXFCR3f5deTbzyxbeV7jT+ehWjB7ez9accW&#xA;UsQfUDiQ7uerYpRfmbzj5a8sWyXGuXyWUcocwh6kyGMAsqAA1bfpih59/wA49+WVt9J1XzW9t9Vf&#xA;zHdPLZwf77s0djGB82ZvoAOKS9axQ7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FUDqmg6HqwiGq6dbagLdi8H1qGOb02NKlPUDcTt2xVGxxxxxrHGo&#xA;SNAFRFFAANgAB2xVvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:8D0C65B167EAE311894D865016B8E430</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:8E0C65B167EAE311894D865016B8E430</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -216 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 216 li
216 216 li
216 0 li
cp
clp
[1 0 0 1 0 0 ] concat
216 216 mo
216 0 li
0 0 li
0 216 li
216 216 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 .1 cmyk
f
/0 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%%IncludeResource: font Helvetica
/IDICGM+Helvetica /Helvetica findfont def
/IDICGM+Helvetica*1 
[
32{/.notdef}repeat /space 39{/.notdef}repeat /H 7{/.notdef}repeat /P 16{/.notdef}repeat /a 
/.notdef /c /d /e 6{/.notdef}repeat /l 2{/.notdef}repeat /o 
2{/.notdef}repeat /r 141{/.notdef}repeat
] IDICGM+Helvetica nfnt
IDICGM+Helvetica*1  [27 0 0 -27 0 0 ]mfnt sfnt
26.9738 85.0313 mov
(Place Holder ) sh
%%IncludeResource: font Helvetica
/IDICGM+Helvetica*1 
[
32{/.notdef}repeat /space 39{/.notdef}repeat /H 7{/.notdef}repeat /P 16{/.notdef}repeat /a 
/.notdef /c /d /e /f 5{/.notdef}repeat /l 2{/.notdef}repeat 
/o 2{/.notdef}repeat /r 141{/.notdef}repeat
] IDICGM+Helvetica nfnt
IDICGM+Helvetica*1  [27 0 0 -27 0 0 ]mfnt sfnt
92.6506 117.431 mov
0.809967 0 111 -0.809967 0 (for) awsh
%%IncludeResource: font Helvetica
/IDICGM+Helvetica*1 
[
32{/.notdef}repeat /space 32{/.notdef}repeat /A 6{/.notdef}repeat /H 6{/.notdef}repeat /O 
/P 16{/.notdef}repeat /a /.notdef /c /d /e /f 
5{/.notdef}repeat /l /.notdef /n /o 2{/.notdef}repeat /r /.notdef 
/t 4{/.notdef}repeat /y 134{/.notdef}repeat
] IDICGM+Helvetica nfnt
IDICGM+Helvetica*1  [27 0 0 -27 0 0 ]mfnt sfnt
58.6985 149.831 mov
1.07982 0 114 (Art Only) wsh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/IDICGM+Helvetica*1 ufnt
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.1
%%For: (JAR) (PA)
%%Title: (box.eps)
%%CreationDate: 6/2/2014 11:08 AM
%AI9_DataStream
%Gb"/LB6W(P](#SWCZRe%NXH\_)FDMN'#Jfsj-&&/NW@`Z#)%]OhDl\GDh"Bl7V,Q738Whggi_X[+_YIEoCOpB()IF(4QpklGD?"h
%)CJ,q=-]hV>ZJ;&,//N6\@C-RF%1G=.V_\W"Z$=&J^YQUHe`fLri,(hS^GN#H`f;2j,BScIUL3cm_FVW4fA%ln[iY-*BSG7Nml+<
%U$jKjc#1jA\mF:f\U$[eSYC49N4ZdKn[RIs]JWFs'[eYlOR4\kp78P0OnYYY^"MjAf=Br=J.q:#b:K)Pf*CG_jL]gq'7)0ZRo%Kl
%!F"H1fBkSI&SICh0kc8:B?je,jEn>mFU)92_6t.TJ(V)ULQG.EJ4`usr'-\QBM`H$'a7,808cXCX'-;h+o!cHSKD/#0-l;.EP-f7
%]'#]0rrne?7#=i".Hir7pDiXBcpcsA5)n"LaR(t#Y`ISrm+DMid_to<QuQP]GE*4#GC*i<DiLe*i>Br<d/N8PDoH+JPG'eBE8M<o
%<rlMjVCpCL8AeW5VBUhdU&_KAZB$DQRMP6=P't;WD-R@5#rb\Ckbl5$'<cc7*NXr+W].Or[hH)FQ+/l'+]q_/bWd]W(B=iAqn=il
%Ta)/bNu3EZ.RtkrX#9+.DBF-X_Fk!@4TNmt\Tbl'HpPb[M=L*.X&#p+aVt1=G("!+/+srXX7:D*rPJY:f6M/u\XY&Ub`%iNEqiks
%;KkBQ4"]1LoQo?PW!hAO*W,9MnUgdKS8WU7&<PY<o/AmU4TF7YO6f/f5B#;J45fQm-ck")kLSfl/5E8rFD^ApouMJ&l+J0U8Z%4Y
%FJq'O?CuEG*IDnS4+6[l&*i<H+SQnSDgS/1r$\s%^"IQ'NpHGT&p--2dJ3$&fC8k$&]]reFrSM"X7GY_k;e1g:Um@n/^Jia"t^di
%>ccKOE'E0&LHgDK^!<b/mgco2\6YAETKeg!hSAg[qk(cQB>Aj^.H/8Vhm_>G(6B8u`".4T&_oAfnbun`BFI;p\fU=tH]AbFg$Q'5
%nGP)_WQ^R?:)it(<bjdfDQa;BLj'*o*<8pn*js$O!`?XkK9'NsK7!+T^"p;sHN]la:=LOq-h771l#]FdiMKB7X%1h.L]FV_]GZ78
%>NBta+udCh(3@)&h7$0mmF*Z\R5t/l*6Z+[O3*-\bR(uAK\g[bgi,Sg3f3:jO*c>"f_`d_N-ZlcQQ\\^o]Ag/k0)tkCH?][ms6*.
%%N+a;Lt[Zol,In&O3QHse#i"N&Y"m"G5-5O%Yrp/d++]^Am!34md&;(>ro%0Cse7)3'`K)h9`"Ih%1p"\\S`P7/(i85J#K5M(tm:
%Np0=!"?b`.StC,W-cGctG/&KK@8Tt%]Y1imJI>T?N^8a.Y<WMU2/'VcOk7+4a@!8Ine3,>oC36(DD+2f-7aZG$J48/Nn\S,IL_pa
%#a8P3@,"VQ[85<8GY#j>2lF>D%.8H0GdouJF^Mm5OLr&%gV3tp&#Nf8jFTRAajF=cpTXN>m&\jq@I]1#00BdK!:Q`Vh.cb*J'\eB
%4!/ZpB9oAhdGfM*P5tj9)isEt$eOc7TEZ']Ta5+HPk:R)As6nKh?G\/q^ud?i6FSFLA0MIhYK7md7+f;SRl$pLe.3O*Krk<B%]7p
%O+!,:\(q'QJK,:"Qu[(oLf$3WIW#b%)eV'sRBs]dE,Hi+Ap?spXhbOGk74&m5O&:0c$ch0iCq2cfl+F7m\h5VK^"?Mca"6QD]Suj
%\V1!$nc,#aZtBncO!=`=1rM/?g0j;Ger'+=b:70a=j+=d3o+E!3FfkMf_*UT%K&)d5k6+:M>M7Q]EJ"m*FPuqcKL@?EoZhnB!Z2/
%)bmYQ2"d`sX>e[AXf4.X9t;]1`MR$#/^%m2VI`l@V-.q6[;)":<@ume/C>(Kc%ab^1sC^%cl6/`rq]V^D:BIrUY:eK;F>7+B%+-2
%L2!*2WLK>Z2c[1r.V@4q:!")D_.XaQd4e830Q]Z<l@s''%)o.`Z6:*[!HG[,e1JA-S%><Z\u+)%<NkYE?I`UmdR@HgR[U'11fH1e
%?.60lVJ7t_dAiY:8XcRaok*$[2sP#2W9\T.%PZJaHEF@"X*#<.$*c+]:"<,\Wi6o:Y%h]W<RmP<W)Zhu,umou>-hhk)E"j5eF]21
%X4L<A5Eo?Z-J,&^=9BD*VICt``Dd77=#?bVW(ILSPH#fWOs2AB[99o;NN-,=Wd7[GeuNPn<`Q/"aEj\_=;BnoCrm.>PRUc^2&Ted
%<OjG,E`JE:8VY;mC.afAOA*cXF@h\]Ot,!-7B/tc,Y=^ULeZ80)knc"U+U1i>u\e3W/+GN(*ufl!Cd+B.0)^<6NEheJ@88f!&O]l
%(IZKb[U9`WG[ktd4OCDbi7nLaG7O1e_fQb-</C0%*fi@$e7ce;*=D!5U"tE!FoX:4oYs:2'A"[qeaO+1!8*8?A."]b%HJ0j!LaMn
%JRDjf>(N&K"1j-3?iqI%#[mg\clmhT`H;#68-:jUEPhu9&&JRr!1JHm@KZIZBOV'MJtQQT\H&nR"u9f+M?Gb@N;eCpK8=">4T^1i
%Aca&>r368u5oHnXI"5s>"'G^p_$4pq_MX-r!bRV79`/[f#.b*j#-@p="bjhuEWYN]%:fs5&KAeEW$XFLKa+VLLk]S@cu:`9#PnpF
%%F"s"!@>bjZ3Mk?%HJ?7!&i110F-5q^FWJ!)1X!=#au$d72E6!YDK@f1'hIq)osfP)/Prb?uiK&Sq-pZ#!1Ll'e)5,!L.8R-3Xhp
%CGq$jJkQFO#d=G+#'!\:eNgY1cnl:;A=a+G6$/Qi+QB!rC&rVc$;psp;*eJE+ts3T":,:-D#oI&U^65h)@24tJATi%mHU?n)@2X[
%Muus^";Ls%'IV%rZCpl`]W)D6"dE.[@0)'?JK[S$AlZXK61O%dr[D4^^t+$5cqm8!XA!.D&A!^sJGG:G5qjVm(mQ#,Q9(BMTFM76
%6,]T#lp1+J@#PXf),(]=Xb!/I9*Ze:7hGouC*:uUa9!Op`_FI4_:7#NjJf=iJa(X>C)A(>-nH.<!XU<-TgX"&?oE!r[9a):Wdt3h
%.%h\\(1EU2"rGB+KD>Zn6!J,4NcD'7BWN(dC7q>"UmnbW-UV/r"!%fXO6@VJ<]/=8HD"oEL(W5KA`Abdqr?CnXplCPjP@UO<E(88
%?W1hpD[\dt:oOU%9eko,1'>kpJ#D,=6^bQ0H9M#+1.Su!]"u$s=BoINTeP5n3,=-]j"'@39qKjB`H5I0`hqfU=>AK-S#NBN)lsmj
%Y<U^I-QAF2=Ab^EN$k'^DQmT]Y<cCR"^,$I\-*@3Srhf!]HQg#TgqMC(j\X1(I:X>1SSfH]d*'.kT(Q@(jj?V8(NNXN4gM,PHS<s
%Sl-i*P4b(inWe[79__52pe'g'Q%ZULJ,/pUnWtTqQc*BkJ]Fhr*`EM1VEVh'b(7=/;1JE<("bh;1!RLD2Ml*DIjrG;1@UT!i%6Mn
%\>4O!9EM8"%t(49nWi;ed8q[nU_uS-e4WDbQ]-;;M-8:kP'G&E(.a*L@mq$WP5):WI$@6t98.U?lDl0CLC/UQZ:I5oP/pWN*YpjS
%Qo"$@W;iS5%"&nKO"CD:ojZF3Kq9jfA]1&mrX:n-`!/8Zjf)=>rEAR@@c'Yf)t@dHG@URjGW:Ld@NWX:\[7u%Hb.#E0qL#eFl<4]
%hJSLkS*KO:732uPhpXc--Ee6^4OEsC]cN!KXDU6qMR;-9KE1\'8We,o/2:US:kBfM_@Rgq!^`'#M$V3i#nrJV&r22EPWY0q%:YP1
%@\>PeY#I_;8h;)$&3qT)9ao+o,f[#R!X9kAKRc*<Pgj6DKTn>\:4as0e9QVi"0+tH`*nT'R"XOSN]?9TK,n=cN2O8Kk<%lqK,($;
%`+Nd%8'd,j3]"m"ZAFtrjYT!R^i7^Y4Pc7W<h%Ic\A='H'f!Q#9q0l/\A=&K:,AKh;La80aSF!cS:uiN#OlJWkaXk0JnO9_,^O]q
%,:Y(mfYUO0OG;Oj&r>"]>i]EQ&U*=G4u`*THc)FRk0BJ,[hQd7,kfOLB7k-]:R:g+36P"6=^`m7XN+I`<A(5n#u#IoXO'O4SM%"o
%JJ!kkG%&q(`mjFnqAjE=iNo4Jc%oO+&?H`K"U2G+1Mil,-SUh"YhCHZ2*Y:;X+n$sf<:PK@#_,fL:'9E%ucqu2'ZijR0YdV,-;J]
%ENLpp(CEjd0WZ86e\eVC=CpcRcp0C&;,`m_,&LN5oV`X)Mc^dZW<o7n#ZOcK9ZC*uL5B[D.nYe5CpI7EMGcg_4[lK&7B%G5ROsDe
%=fER=S/+`sJl2]7AdG00#18[Il)&&r4k$c3$^:ZmbYsJ%Jg;$Vd8GIu,,71Z.[3r0Zq<n]jT:R2F4Dh:DGdHGR`[Nj0r]t3L!2#Y
%<^@TlKb_j#CLgTY;8U)t!J2:ZXRu:<*Zg]bi;l)&80/bt@fmr.MM)3=OMun7&2bki(i^E=3%RTA(!tBa8UNgK8AGp&5VKu!![B+;
%=@'JbarCo<6:ZZ1l+"sR'KND5!P4aa&s/jY7ZAj8d,Kf!'K;c77TA"_AISnRP(a?Kekd#k%4aE4'@TAZVPIW(LMe<g5`$Jg.7(eb
%*YnTE\NboC,ndU9,k@h;1rdGDd45Eie[SSJ3o/#=dE#=H,?&Wu);gPtTeWS`4lr.^'PE/l)6]Xbh*HsRW8Ur_V"WtFs8RI;3mi;2
%6jX\n&?3oaD-Yf3AaLFHh1EPkUh-m,ibiG_dWR3ZeS5t[QEk/!r0F^&BksS8a.%(JQF13O/,&g>NYP4>YT3P*Z<g,W"gXZ'?.!Y'
%Cq%hn.rDToMhMH?,Sa%:/4_$8:e:(_-Xj_T%d>PX[YlCnYECSE-'<pWiWb>LR`*BB`+K1oLtAaBT5"oJBuL*h<\46to;'lmd_l4=
%F4u:VfF13P)2hq<<;t#lL:s8TPs4/Y'k]VkRe[AN3VAhc0)"HZrJsTsnl10sT$st90DQ@P,RMffEk_[O:I`J[p++P.1=>(<9Do3R
%E&oItTjIgrP41"UpFBVY&tW[??P*r<nu#Uda,E]N9G?ZY38n*c4[>W(ANK/Do/k(ni*"Tf+K8'"<D,OFP8Oe$E/jG)C@XYl[Qcb0
%M#4"/6aLTYQr<'08!N@hAnlSY4&1hmC_)`Ip`fCLclXS3UP-1=I/e3IIiNaROoN;=!S#?V!S#aeVTdl"I9_;o`c=`-M.[@e*:=5)
%llK?D#pWhSV<#1(OMf)D5/$$H0Cb"FK;</',-smiY2$d@26A]u/,)h15"PP"ilEsuB/2dLQRo)Aj`\'LcPGj";LVU--dVRo#6F12
%!IKd@*\tY=&FApTE-)+29#QpINB-i+!$2*ELFVhF96;$BqA&OS@:KghfV>&5(l10tatH&9:0upJ/MBjArS^*W9)+qh\HV<ckcZHL
%IGuDGR?Aer1B$_\Isa`>B7NZLiq:5&nmlVOIcHc%A2lc@kEG6Y_f_&t,i9tgIS)md`I!Cqe";]Cnpcf*j:mo&i#n/58Q%6F%ORI-
%%J%/(^+;s@L<9!Ob01tA=c(4b$0LJ[2=YcBNTk.V:ZHa>fc/0,_)/m(&O)3E+a#&M5)o2KXA>U>qBuH*pM%Rl4tTIgIN&%2fUkY5
%&H@A`.mXZ\4uZ.k!LaDCCk1XM@7EM'!g49$O$(e%!&=ZI)(h9td/8E+#W,%Z*hs0""e$sgCk7#;R-"f&COi@6IAE0WW0Vk5QKAbF
%K=*P"a?E]6=Hf8L3oSIi,KMLEkeUFKa>)c*,INLRdkJjU+1*0J:kOO:X22][ie5Y<OMb/t?CdN'3O<JkBJqZ8W<"8/`04+SR,SpS
%q%;t#]LS`,pe=E\c^obr_K.DMru-tLD@Jg+5&^`qN^'uL%TeDDo55Y?D_s(c-hq]uf1H26l6foOKm2FJmk:id*H@^c#[HOMN1J@a
%=5^<.qH<I`f<70JiS<F^o^8?Eh]DOi02I3cgB5/Q$a3"ei&Q=EP5uo8!r=[:HCEomG0f^KMcF`fdh^a^mq]<B[Lo7'rjJrX2VnSd
%/KAR6_6jhZK+LI7&b6*H;rE\oh_k=Am_NO6l"uRron?[D4A?1[<+Y'4#%/XO5M@3-aVOJ*>F\"?_D!a;qe*?I6&3WGfTVM`M$UDn
%e@_Wr`"^_<]Tj&,&2FGBGf]ufU81(RnmMn,AAD-m.u)P`iPX:.XFU9`5)qRe$i-F]$Y1ZBZ]L)c$K6A[e&VlA\-`OIo.^]*U6)50
%JsQmR'dX6VOp;p00En&JUu2o-i5=.l01,=fmKm5IjXF!0An'a5Bm?'R64OS_,fl`G(4@?a]o^)pMgHj+/6n;A-NTu/_gnWF_\U<&
%$XTXM$2DFAI'G#2\Kc+\P=\\U&3nCW(]lF-#t-f*&kEm=OCL&%nB"g;+P3s..\USk`uO+`B'g<5R(Knn2HU*QS2KE0`<$&2Zl$R5
%0oblpPEe*2R*#d0n/u-G`&pruph!6OP[b(V2M5F.aqt,m.:\Xk/;e#Y\qkV9Mb$NRo8"D9F>@XSGp\G?9Nl-4G,3L1eVZp?.@KTh
%nirb`87E3W,)J>R5Y;uKaD`OfP*eY/87L.Z<Kr/2:nB@E@\2+B$;r1&Nfn=)6aJ*%fr]oMM(,fAbGF:(./h+@;d#=\es`rPb9BW5
%15g.lj!k^I/u(O3b_^G=;,=`9`hY$s6Ei#j3=6i\RfPQ?k@<tQKfQ4.@S6+BO=\;R8T@"qpciO6O?QB0>PeP;@Z-j&NKcf"f]oAJ
%,Nf^f2Z64B8<$?tX68/)(@5;)F3I!D=CRrp/4:h`Mdan5#r-9CncHF+E[jP^10EX?Hq(.-A3(O/N9)F3jd?$t>%3Knj;G`ae?MTd
%L2L^uPmOUnOq2VM&CN:<!b0.hUd<<%U2"rM2r#0sD)G'N2<(u*9"pp!!]br34&L7Dk5KJF032=GJI^,3"2q&8?e>mIV0aTW&-*`"
%Is/a'na")2pojkd,'_dX@jStbIKgfo7u,-&a.ZRg2k=?&OlOc9r5r0Fn9;W+J/PE_19gZ6G02d'J&2_c3$pCJj7n&T3&0k$*/;AD
%mWit>(k'H64+P.3!JU<l:lK;lqC_rtlaEA3Ii*q5GZO^UgZs)d6n%4*%l;c0!J8nT7rZXnX?6faF*HuY*V'C2^G0aXaBPh9]DY+[
%eu)lsr\WO5QJoEga`'oQ"fCA=OiOB7B0]5orB>;hh[RE:o.g+;1e,kG4T(4QrQIdthSCk$Ii:7;r&rF7iQoF/YAVCqs5/`<!.Ob.
%WTbkX1ei5L%#2-n1`5&!:KsGFotO8+!0:7hQD25,g[!Rq*ra1$J(gqsL?/(/j>Ze<^VK$?Oc?8e(ubH1Gl=73dl.#%T)TOoRYU"Y
%Nu@Hj#p'!$=<]6pIM:RZgCI%l#,2R^Jb-M%.n!iuFTuD?-C?oPA?/@PH;"0A&S7+#^"iMRY>>06MZ"o(@r!@34AXiN7IJZH7ZR5\
%i@^Y8IEq,"ICn%sFo="CY:5@1"Ou&t29tpnQ>:gfY)PYJ`eg3%WR-i-n)t'BR>d1teL+.YR!#$kb-(Ue&?T'7Sm8djPsCl&HhLi(
%[-95Qh0Ifd2sUAmS1#Z()q(>DNa2Lq3EX]Q`a\f2LB6$SGO364jS(;_Es:utr]HY0EA3IOY*BM;S8mi8a5?A)j[]M9HPjn[qnqrY
%=MGfolNbo>W2#Lrq.V_SclUu%m5p(bFb^RqZ64fl%oVn-ljj-/1E1fGXSX[AZk+&RN*Q^UP.9bt);RN&Mnjk_io6*t<e!)G+'@:'
%HhO,'%]?TfO<pgE%IG=?2sU+W4e(+bUR%Sf_F!3BC+)NA@CMCHrb1M-fOsriUNBl#*^,0UNAAVLh<Dj-YO?Q/fQSQL75jnhOjiQT
%q[D;p0\/1DS'?b@`)?BcEDFJ$7I,-#3s>CgeGD1[^\$YDFqapo]3`PBjH,A]O'Vd2iuu&1f_"_$IO,\6f=uOBi_3;*rLY6=A!4';
%]oG%Ocq$)B!%!,,>"FTL>%9<D_'ah/kbLV/SbDf^dWPkgJj*2h.4`D:).Pq]-uUTfc'8(G_M"mpAnisd6]1[QGf)(oUsqfP6DWf$
%j%jDN:TW1^;;uDAqCJ/siGT`+GYFJaE:-!'InV*\mD,oIH:./PN=BAL(PfX%6NqsmETH!5<d]*NqdfW4`u'I9ZU'&1:3,S:-7>/*
%dJtX.,M7SjmAYp`o@W5)F,/Zn\q=3GS;1`uPG%;&\*1'Kg/J)(f&`RZL3P(A9?D&.h3QskHd4EbTo+9Qm7h(NR@2RW>Y;K=:'I2#
%cQ6,9bW7IH:s@MoS2tE>4XXG'abeu68tP-s=[RD_I=brg%9P<sGJ/Jh1!TC\l0kN<T\]2h;*<7CB54'+*83SqO42#Y=C*.dg7q^#
%n(Y`_k.4@X4.=e/:4K.dlo:d.h&o.:*<$A%?KE5-E9'^CD)1R`)<W:QdqV$Qs']4MIoj0I:K9_;1r8`PZTVo7;49[-2F1-`AF**`
%f>EFcHA"GN(6AB"TZ"b,1j=iKJq`6A1TV%Lq_6f8F4_Au6KrL&j>ksoR-4uV`5[1R@*2MXW-]!\PaM5^#60ht"=ZQ#6?p(=qDcBe
%XLo6"/*@Z8K@AgR(\41.pUP8BiT0WPOo$:bJJ*]LXFfRH%ON>tB&a,Q\*UrHS`]Z[pbj2#VoR"[[XiCS@J>G*arPZF:X'_>\OP>E
%65p=;_/b;h+jUJ1P[l7#0l-nq3I#"2X,Bi$(sYj3d[VCSmtmEH1iA;M=U#dg0l3I*fLa0[%.dU6SfAbrmPHR1YP<e.T`-DS@8C-L
%K[9-MiJd_Q0<R(kC(?(5g4Rd02!LfEYPiM\l)=3gRj$428b^]B"*ZuA3[<m\:c./M8\*tt8,J5V';dQ)X4fs;Qgi/*aW?T#4I>Fh
%-]r\W8*)i1S<k;Bj=jf`.nImO3?q,CQ.Z(7;3;*@m#;uic^Q+i3-Fl?*C?DXR%@TI:^c7ao#tc"Q>bRpr^8;qUDfKq@%)4a*gAe^
%pU&4UV!C-:Ymk?<"SK"jM=iP`cbt]q),rH<&f$C/C+?a3ZpG+XL;`?R1Li]t5E,f6p*(Kt$8^7b1iD6k,t"gs+LN=c2583/@5"9L
%putZHK>k4IQWp#:DBg8E,3&B]f6A)\@6\`Jh/%i#Ot`'DAcP\q-t3ud5pe1j-gCK-R$*6K"C[H)0\`\l-p@/fd+"hW#Rl,.':/t0
%?bbT?JF,[5U7[qPqfSaoTSXpEQaW-u6Zr:egQp2h3o;*I>M@rNpNSq]l>jT3Z.ArbZ21TeWZPcF_q_\Ej-ZFIFk5+;C<(ZqpLE0`
%W@c>$m+bnUESfG6Ca8:p4#K[cpV*`QRDkBT`k++-[/I_X$USj,/r7BPBAW'*T$pKL?<fBIXQk!jb*NT.SgTNoF/sq;XgtaeeE9FG
%QbU`Z^YRK(b4!)KF(JRT#lNh-!O2rTGZPnWUSI#3Yh@IJ_rJ3f#MNjl^:3X+!n^K0>MeP(6K;SIqP(O"Dmj'nECEq6_)Cl$]99_9
%@LA[f:M-ib[mD0,LBJTJ^Nr^*_M1-5Al'#"o9\Ts)opL><IXcB>\WMt0t5N.o<?JE\[\tuh/DIKn)f\o9'sbUNc!+El>gO?HuubT
%\+9=6'6sDZ:=n<:NdJQ4WPm[UN<O=@'\CU4c&2Y\]Xc]u5Fh<FlVk9,8OmoJGE.^gMrhR_/\$'*-oe,i-%UQ5YE7N#"g.5$6D;8[
%9>RlO$Gj@Cc3i@3="J3*\du[Fnm_tZ9>T^n@21FsK?M.^@RKUs]j102p;<XPnB/J<pYE`LIdl=6(LbY`[/e].[29FY3,EGtQiVQM
%g^FG3<AK+$J7Fc4nT$]2gZRUdjG!7g4WHEnUOfVa[)JWPmr#;HII,OsAiUntU+s:KmT4r$jV>nIqHSW+h@ue>U[M\03"sE1]R;dF
%Q_uq8i\tgHeV1_L)5jQlen<#G'$5>V>BLM7_`HI_rWN"CHGY<Y.:q/jE<.[Fags!e62]spR6N`^OQ#m@@)8=l2`Oum*@cJg^HPn^
%G5W1oo*r3:qmbA<m>WFEB'jK?S5d+q!mKBcD/$U`mpNQ"`PbDh$2AYn#W;!G"#pNtC>IC6BEb!@Y-bi!h[%gc^9,0!lFY<3A`oem
%hq=M-o]u?G$jHJo67^D2092NU^&<AYfXlDBLtf=CNTacVimp.n7=(5U<l=#F+6Z#V8e>3^qaGc(8JL#2Mh"(YX0e_j9.n&XA]s.D
%ROMA*Z)/XAe/:s]=om"F%D6qD0AFttPTPZ.q5,8i2FR:#9DfDH#?9Tdd+BEL!^oeR'r$i=o&f`T[Erj7`.!7+hQNZ`$"OKjqh&H=
%Di1.sci@$AZ!k&hV7tlH*m/`<''QkccV'8J:F/j)c#Ul;Zi]>6OEAIC^c'"'PH3-_m_KOM'Lh?2BG\[W4:GJdZGHT^5\rh:.OZ70
%J:R2k$_Rp[TQl1->,]e`.g/r')schD7bGCA<3-(eSisr%ZP)!p^pWiCo]?BQYrjjs`nLr(aBF>-gB%2e4G_o7d97TXLq`uQ1#0fP
%>JiejK&Q1Lk&@RdWg:tMSfobgD=6P3=WmKPS[ck-DG]1$m'd,&]XGRTg6S$mOAXJkMP"Y+f!)Y=N'(JFcA4W0.#`Z^?6XHK%#CBc
%[<j*3elP;uX(OW-gijM/n9-&@L0((P4somaQJ2!6`gN%)3PR8*(-'Pi:gMb.D(=(!]e=IC#7]#6FB8a\X;g"u4X)eY_N0pEWM!P?
%Yqq0Lg7,WAA"aJecsFjG@.6ZCZ3f(nRod42b_!V_6Gu.]Ja[J^>/Vr^h=B88nVUc4qo>r0g>fdmK9EmOZ13f%K=q0^p].aZofPLP
%>5SebCNG.QV2b0I)*6Y8*4Wk:2frH@GBqDoO#h/HC&Dg<-?=X@hlhFuj;&?kc_VtIM%p(A)(QK25P8L>:p/g;6IVm(!/=Qbf_,)>
%Je(AjO>+($$gLmb(iGhP7e=kd+Uk#1Pf.!`dT721l0]Q"q*TRt$i/f%S/XhNg:A1p>%s`d3Y)6:oO7f*NAsGZpdP7:`A]*[0/?@;
%/Y%4nVc2EJ1h"5WoEj0S9a5XDCVYnpairCD47ssV,K0s'kT"3-E@ci[XGP.>4!.MiE/i$*6uHI1[1WR-"aULqq.kfXV.Tf0gLSl;
%/!OCqLfmkT;)9KOm"eoLn[TV?+GPg^PVmq7d?=&KQHdCs9M8]L'R\8i%NisujZ2X"?cfr7N?TucdZX;T)SEYc0*ZdjmMYP$8>es7
%2Y#:&j09GQoj*NS/ln#Phh\N>mjWjP]GC6oO=T:._OTfdU\SK9f@[XI>i%)Ie]0.U"3Jja)5KU9NqHgNrjjK`j)+"$XrqWWkZT'%
%nOlGP`:_,nl0Z+=hYGk<Z'rM?p6h'62t;Wt\M),8'%B?<,??=N:>Y\skQFR1c!]o6[mfrGHlUXEp/)1&%h(fj;+OYa6'#X;D+jZ0
%N%\gcRlqh5%.#-_a;a+*aM3I\K2Tg;J$g(<'_D4>A:3k]Hpq>Z44"3QXp*)j>s4>bokQ-&!\)'Mac@ui^6KhXXI_'Ml'Yjb-4*"p
%s/AZ]LRcNoZSaYp$F#)3laf3o`9LhH9#8^8]4Dn1K!p%6Q6\-Fm1hC,1-Z2ai@$0b;Pc([#os&dX5u`3Z1aR1hn`\nE<LeMFWm#;
%"=s_+9<kohlNNHc&8WcS2h"0dcTu0=</X.&@/dl1_T,%i=C)J)`+84Z1L?<3[tT6n/Wq6@'()>cU/\Dq<K0OrN.c:'ZoC>ai2B>#
%>S;X5%`9e:SM&eF:5_Q2`0t[P:4mOT%&A3Cs-Z7ei"^/9+'&Ib.\B41g]PD9pE;@)GDBr867`ac&<YPq76<ouh.f?!#jA`)H^G.?
%fE)H\B!bFH>katgbbYp+o'g[6Y'g9J![Bck>%K,kT\*X/R@+qb<k]af+61]aM$CMo^\/G^m0r/,9[me&n!4&u]+Wt^4%L8i4dXVh
%;%tkMN`%:+kCmU$!\Ed.-7'95nF#'E!J4_.P)H<>&9(#WKVJEgN_S"]YKn*W8Z213Qs,c2*/'WB,c+BV7'K#-Qt->uX.WD^?<h\X
%2pU8%8)USogDBiN@MDYQ/'3?pTT8ST)[rCOUWZ<rOF)QiQMLF4W_T'5&e.c5U0.?@Q]`iRhTR!nMH);9#NGI^!27(p&cBEgdN.f8
%C0Embh9V,rs+j=`nA>d(!2JCANW#+lfd>:%"STtf;ZA;0<Yf@OC:rkN9#]Ki<6O`rUi5f.&IT9%F(JEh^Um_QkoWap*:jQ$[GJ(f
%QWcc@gP<<k**\1!AP$3k/k)"\##UEu5QY3ms(eFYi[.R&)U[jaYqIs.S9X5[.c7r=g5s#h%6"oDJc^ZJi\U(^08R67Bo(lkjXMrj
%?,;KOOG];`RXKme1J#Yt_QOsCQp6qUdY!AonldKIs4.OE$qCR_GBI2OAGKLrh!=Y@fT"uU_QSGc"K5KD<nRr>Cofn]ZY<k-dCLin
%M(=Qj!kXnG[^n0oP..K>GPCDHZ;42VoR$q7pjQN&0!6i@js&2L1?=.3lRdU.;6#PdpF?KIPe:*N>j:g2p8AOY&0,"_ln%K(bnmCI
%Ck"n`g'3ee[`%keA&#Ca^4_1;$@2>ZG?).9R^3PFZiYVV3OI.QIXXIrVt.5>[LR/:n.iEX*c&eh4J7.B(mq&Npe"6C<7Yrj]rP[H
%CPb;I;%q\+5?2@S.rLOOk4:X<f%cK!IW[0ag94SSD5fWF0/[RM_<j2QW)]=;]"aM0j)\@1=b1q=^-X.5E[TdL]-rNJk/k'EIAs6>
%R@X;<BfCM+:A-U'/I@I;eHF!.n;5m$?3^YnB<n!fZ_2c/*=1t[@0rk%5h'kS%).)_6\3hGU@=F"9q=7r+<8">=I!dt3b@Bi.P8kQ
%)%Q,;"D,*dH&P_Z/;L'q2p6:^EBo+%dK@/8EJYBmb9.3jG#mkhQ]XY0NTI[1+l%P&\I7GR!uB1f0_e*AJcKP>*A\L9d7n1qi)8o0
%!u6";DY#b)&=<L>H1%);Np2s`\9g1WKf@$uB)_5M8imqnAI!eu.>j[V"lbN\^"OWq%ZY6?7O3tQSP"!)CFH>\#c6BXk`g88`.d&6
%?s%)e@XIQs>gdalTu<UEI,1T!+=PC]ckCfc>""iJF=-\+(TjuDr493e]O+2T&qtem?qGGWL\1@ndRTHeRZC_Cs3-YRH:#7c8m2or
%f![33a1D,D;]l9;.XjLP$]FADV"h/;(,DjKmQ?0$Iph>+C@#eHo(Jainj[AAgo"#Te7bI&_7SR#'YGB7qF[LgWsIQ=$o?EnEh/eC
%&2^A^SI^?UTQ-dE#L'4a"Pte2Ln0APfZRZ)[N9M<cLB2=jq+J/4*+a1XYMDoXapPFQDH7pNIANfj]?,9g+>Z9M,e$EmjJap$Q[%B
%,*f"g"U?Yg)q@TPOG*q&RI`/%cC1f%4E##-(R3Le2H@^Jp&1KXm6U3VY!XF-"kSV[01U]*,RY*CnAO/+!bO<6-UD@Cs3DJ[%R==!
%-sU&WWtg"5I,&d*qTU+,be,!e7pc`eDUWZss5:Gp4kT/8s5#NF*PKqpnj*,Y^+I(&2r8Yr(u7$m^!C'6a17$XJje]ij&Xo_fR%\J
%BfBp`l`F.;$X(uu,A'f"GXf;)=2*pH_R&P!\\d4%9MTVH3nL_M)-7B@4tHt8^G;_maDJ!$CJ1g0[6>FgmpV\+hHsu]ZtbLX/89#-
%\rY_9gg4;,l[-$Xa!FI5ghpj7B-$TegGaI`NsknRag`s+[)@\#4G1D#D-l5-B(]6AM:A`?XBGK:3WB##QSkhY6JfAjA^0MDLr&n0
%QSkhY6JhVRroFH9`>l&YMT_I=?XZM#!gbdF^I$d2/o*oY&?4h$#(UAORSHSVDSX62gDt`"ga6'p0t'kREXb9E@KHZ$<$A]gGgQ2G
%)!+e[/Hr"n'dZk2[o1-GXlQVJRmRg';r+qGc`=l\+_uePn>VM?<I=kB8?/.iS+:nZoRc?tIXs;:!u!9(B=9(C0=:;\I#k]4K-IAR
%RU76ri5@DR@em6]MKQ.l/JoPuN43'=*d[JB3+WW;6X^(V67"T(hq]^b!dtc(TB6g/l9)17Z;SBjbHIg6C6:KNh8-uDk*T1hS*=G:
%GuL>rNbRD6SF[NL"j1+$[6Vi=fX;D_XP%)eAT*$HCO:9b3U^Xqfjkj0S9]fa/T>iTWpc)jLT]#V,RUggjj>FpOA"0foi4m?"0$%"
%dHHn4R2kam%oUaJ(#&CnF<_Gr%AQ#/-\:nua?d3V3p2II.)2GLSe"R(gF#MT$g5E;7-<uZ\J-,lP/FE[n<+ar*=^ZM_ClSJ0?Fe,
%3Hi+8(a!&kc%D!Sp=L*U!%&^Z-'*rMq:u[1!1JE(>+,HeR[AU8'fnGkVNNjr>T!Fa9?muD^\I^/j0(!iHC)[9R))R27Z%k(@%:Xp
%EM`<5e*(80Xu'CU!_:NSjlZ`.50P[ooN8e/aeL1/g<>?Y'0$%YYk-"9LmF4EEd>YN,OdM84iHr*e6*P700']7ALZJoMEBX0pV725
%4i42r$3SjE?9\n8l:Z,E!+'h]6p4.A@[\HH-PaK7QC)9?f?#p(/2>B\YJW7O/htT^YG7o,[)=dg]H00Eq4\MN%.QAro8hFS-HGH:
%j6qIr]M=:V_@k<+nToF"nWFO6%.tn\ka.U&AuIA:"oO^OQtE9M@=Igr'%<*AdX([c#A_[XIaDMC&\l$u^\$SEo+fo5p.r_eJ+kGj
%_L#;C7&eI'$MhdJ!P8lY\J3,,:+UF@(o#t*;u(]GQZ]jri79kKqZ^Z]%lt"U0HGn*nRj^sn9`r5I(B(]U!SSRc\5B+kP]"\>ZJ;t
%)e8d;\u#c*q@M5D[*3YLs"JR[>i.:Y%A?!q`a_FI.rtt[\[;7Zrh/<L*H[hKY4ja;!;,KAeDh(*e[Rr.]DD$neKOMfk_)(Zqna.F
%m5sLJZb&A2`ne`8iGdk1]XI:eLW8g6TLQ/s_i=*?^T[r]MJ`FFShsfhqYu=AJ%5~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 472 1403 a FO(F)o(igure)29 b(1.2.)48 b FN(Log)1001
1424 y Fz(10)1080 1403 y Fj(of)26 b(t)q(he)f(r)o(esidual)h(nor)q(m)g(v)
q(er)q(sus)e(t)q(he)i(number)f(of)h FN(GMRES)p Fi(\()t
Fj(m)t Fi(\))g Fj(it)q(er)l(ations)h(f)o(or)175 1495
y(c)35 b Fi(=)c Fj(d)38 b Fi(=)29 b FN(10)d Fj(wit)q(h)g(f)n(ast)g(P)n
(oisson)i(pr)o(econditioning.)51 b(Solid)27 b(cur)q(v)q(e:)39
b(Algor)q(it)q(hm)26 b FN(EHA)p Fj(;)h(do)o(tt)q(ed)g(cur)q(v)q(e:)39
b FN(FDP)173 1586 y Fj(met)q(hod;)18 b(dashed)h(cur)q(v)q(e:)j
FN(FSP)c Fj(met)q(hod.)173 1831 y FR(met)o(hod,)k(t)o(he)e(numbers)i
(of)f(GMRES\()t FH(m)t FR(\))h(it)o(er)o(ations)g(and)g
FH(F)14 b FR(-ev)n(aluations)22 b(r)o(equir)o(ed)f(bef)n(or)o(e)h(t)o
(er)q(mi-)173 1931 y(nation)h(did)f(not)h(v)n(ar)r(y)h(at)f(all)g(o)n
(v)n(er)g(t)o(he)g(20)f(tr)q(ials.)35 b(The)23 b(GMRES\()t
FH(m)t FR(\))h(it)o(er)o(ation)f(counts,)i(numbers)173
2031 y(of)h FH(F)14 b FR(-ev)n(aluations,)26 b(and)c(means)i(and)e(s)q
(tandar)o(d)g(deviations)i(of)f(t)o(he)g(r)r(un)g(times)g(ar)o(e)g(giv)
n(en)h(in)e(T)-6 b(able)173 2130 y(1.1.)298 2230 y(In)24
b(our)i(\014rs)q(t)e(set)h(of)g(e)o(xper)q(iments,)i(w)n(e)e(t)o(ook)h
FH(c)32 b FJ(=)27 b FH(d)34 b FJ(=)24 b FR(10)h(and)f(used)h(r)q(ight)f
(pr)o(econditioning)173 2329 y(wit)o(h)g(a)g(f)o(as)q(t)f(P)l(oisson)i
(sol)o(v)n(er)g(fr)o(om)f(FISHP)-8 b(A)i(CK)24 b FQ([)p
FR(16)o FQ(])p FR(,)i(whic)n(h)e(is)g(v)n(er)r(y)h(ef)q(f)n(ectiv)n(e)g
(f)n(or)g(t)o(hese)f(f)o(air)o(l)o(y)173 2429 y(small)j(v)n(alues)i(of)
g FH(c)34 b FR(and)29 b FH(d)9 b FR(.)48 b(W)-6 b(e)27
b(\014rs)q(t)g(s)q(tar)r(t)o(ed)g(eac)n(h)h(met)o(hod)g(wit)o(h)e(zer)o
(o)i(as)f(t)o(he)g(initial)f(appr)o(o)m(xi-)173 2529
y(mat)o(e)19 b(solution)f(and)g(allo)n(w)n(ed)g(it)f(t)o(o)h(r)r(un)g
(f)n(or)h(40)e(GMRES\()t FH(m)t FR(\))j(it)o(er)o(ations,)f(af)r(t)o
(er)g(whic)n(h)f(t)o(he)g(limit)f(of)173 2628 y(r)o(esidual)i(nor)q(m)f
(r)o(eduction)g(had)g(been)h(r)o(eac)n(hed.)27 b(F)n(igur)o(e)19
b(1.2)f(sho)n(w)o(s)g(plots)g(of)g(t)o(he)g(logar)q(it)o(hm)g(of)g(t)o
(he)173 2728 y(Euclidean)i(nor)q(m)g(of)f(t)o(he)h(r)o(esidual)f(v)n
(ersus)i(t)o(he)f(number)g(of)f(GMRES\()t FH(m)t FR(\))i(it)o(er)o
(ations)f(f)n(or)g(t)o(he)f(t)o(hr)o(ee)173 2828 y(met)o(hods.)26
b(W)-6 b(e)15 b(not)o(e)g(t)o(hat)f(in)g(F)n(ig.)i(1.2)e(and)h(in)f
(all)h(ot)o(her)g(\014gur)o(es)h(belo)n(w)-6 b(,)16 b(t)o(he)f(plott)o
(ed)g(r)o(esidual)g(nor)q(ms)173 2927 y(w)n(er)o(e)22
b(not)g(t)o(he)g(v)n(alues)h(maintained)f(b)n(y)g(GMRES\()t
FH(m)t FR(\),)j(but)d(r)o(at)o(her)h(w)n(er)o(e)f(com)o(put)o(ed)h(as)f
(accur)o(at)o(el)o(y)173 3027 y(as)16 b(possible)h(\223fr)o(om)f(scr)o
(atc)n(h.)m(\224)27 b(That)15 b(is,)i(at)e(eac)n(h)i(GMRES\()t
FH(m)t FR(\))g(it)o(er)o(ation,)g(t)o(he)f(curr)o(ent)g(appr)o(o)m
(ximat)o(e)173 3126 y(solution)21 b(w)n(as)g(f)n(or)q(med)g(and)f(its)g
(pr)o(oduct)h(wit)o(h)f(t)o(he)g(coef)q(\014cient)i(matr)q(ix)e(w)n(as)
h(subtr)o(act)o(ed)h(fr)o(om)e(t)o(he)173 3226 y(r)q(ight-hand)h(side,)
h(all)e(in)h(double)h(pr)o(ecision.)31 b(It)20 b(w)n(as)h(im)o(por)r
(tant)g(t)o(o)g(com)o(put)o(e)h(t)o(he)f(r)o(esidual)h(nor)q(ms)173
3326 y(in)i(t)o(his)g(w)n(a)n(y)h(because)g(t)o(he)f(v)n(alues)h
(maintained)f(b)n(y)h(GMRES\()t FH(m)t FR(\))g(become)g(incr)o(easingl)
o(y)g(untr)r(us)q(t-)173 3425 y(w)m(or)r(t)o(h)n(y)d(as)f(t)o(he)g
(limits)f(of)h(r)o(esidual)h(nor)q(m)f(r)o(eduction)g(ar)o(e)g(near)o
(ed;)h(see)f FQ([)p FR(17)p FQ(])p FR(.)29 b(It)20 b(is)h(seen)g(in)f
(F)n(ig.)h(1.2)173 3525 y(t)o(hat)g(Algor)q(it)o(hm)h(EHA)f(ac)n(hiev)n
(ed)i(t)o(he)e(same)h(ultimat)o(e)g(lev)n(el)g(of)g(r)o(esidual)g(nor)q
(m)f(r)o(eduction)h(as)g(t)o(he)173 3625 y(FDP)e(met)o(hod)h(and)f(r)o
(equir)o(ed)g(onl)o(y)g(a)g(f)n(ew)g(mor)o(e)h(GMRES\()t
FH(m)t FR(\))g(it)o(er)o(ations)g(t)o(o)f(do)g(so.)173
3788 y FT(Exam)o(ple)k(1.8.)42 b FR(Let)19 b FH(S)j FR(be)17
b(an)e(isolat)o(ed)i(in)n(v)n(ar)q(iant)e(set)h(wit)o(h)g(isolating)g
(neighbor)n(hood)i FH(N)10 b FR(.)26 b(An)15 b FH(inde)r(x)173
3888 y(pair)22 b FR(f)n(or)g FH(S)27 b FR(is)20 b(a)g(pair)h(of)f(com)o
(pact)h(sets)f FJ(\()p FH(N)1426 3911 y FK(1)1458 3888
y FR(,)10 b FH(N)1550 3911 y FK(0)1583 3888 y FJ(\))20
b FR(wit)o(h)f FH(N)1870 3911 y FK(0)1919 3888 y FA(\032)e
FH(N)2060 3911 y FK(1)2109 3888 y FA(\032)g FH(N)30 b
FR(suc)n(h)21 b(t)o(hat:)259 4039 y(\(i\))45 b FH(c)11
b(l)g FJ(\()p FH(N)540 4062 y FK(1)571 4039 y FA(n)p
FH(N)672 4062 y FK(0)704 4039 y FJ(\))20 b FR(is)g(an)g(isolating)h
(neighbor)n(hood)h(f)n(or)g FH(S)6 b FR(.)236 4155 y(\(ii\))43
b FH(N)435 4178 y FB(i)476 4155 y FR(is)14 b(positiv)n(el)o(y)g(in)n(v)
n(ar)q(iant)g(r)o(elativ)n(e)g(t)o(o)g FH(N)23 b FR(f)n(or)16
b FH(i)25 b FJ(=)17 b FR(0,)10 b(1,)15 b(i.e.,)i(giv)n(en)h
FH(x)23 b FA(2)17 b FH(N)2562 4178 y FB(i)2603 4155 y
FR(and)h FH(x)7 b FA(\001)p FJ([)p FR(0,)14 b FH(t)c
FJ(])17 b FA(\032)g FH(N)10 b FR(,)373 4255 y(t)o(hen)24
b FH(x)c FA(\001)13 b FJ([)p FR(0,)h FH(t)c FJ(])17 b
FA(\032)g FH(N)975 4278 y FB(i)1003 4255 y FR(.)213 4371
y(\(iii\))43 b FH(N)434 4394 y FK(0)484 4371 y FR(is)17
b(an)h(e)o(xit)g(set)g(f)n(or)g FH(N)1085 4394 y FK(1)1118
4371 y FR(,)g(i.e.)27 b(if)22 b FH(x)h FA(2)16 b FH(N)1547
4394 y FK(1)1580 4371 y FR(,)22 b FH(x)16 b FA(\001)9
b FJ([)p FR(0,)h FA(1)p FJ(\))16 b FA(6\032)h FH(N)2089
4394 y FK(1)2121 4371 y FR(,)i(t)o(hen)f(t)o(her)o(e)g(is)f(a)h
FH(T)33 b FA(\025)16 b FR(0)i(suc)n(h)h(t)o(hat)377 4471
y FH(x)h FA(\001)13 b FJ([)p FR(0,)d FH(T)16 b FJ(])h
FA(\032)g FH(N)826 4494 y FK(1)878 4471 y FR(and)24 b
FH(x)c FA(\001)13 b FH(T)33 b FA(2)16 b FH(N)1332 4494
y FK(0)1364 4471 y FR(.)173 4622 y(In)e(t)o(hese)h(tr)q(ials,)g(t)o(he)
g(initial)f(appr)o(o)m(ximat)o(e)i(solutions)g(w)n(er)o(e)e(obtained)h
(b)n(y)g(gener)o(ating)g(r)o(andom)g(com-)173 4722 y(ponents)21
b(as)f(in)g(t)o(he)g(similar)g(e)o(xper)q(iments)h(in)f(\2472.)p
1941 4722 45 66 v 298 4911 a(In)14 b(our)i(second)g(set)f(of)h(e)o
(xper)q(iments,)h(w)n(e)e(t)o(ook)i FH(c)24 b FJ(=)19
b FH(d)26 b FJ(=)17 b FR(100)e(and)g(carr)q(ied)g(out)h(tr)q(ials)e
(analogous)173 5010 y(t)o(o)24 b(t)o(hose)g(in)f(t)o(he)h(\014rs)q(t)f
(set)h(abo)n(v)n(e.)38 b(N)n(o)25 b(pr)o(econditioning)f(w)n(as)g(used)
g(in)g(t)o(hese)f(e)o(xper)q(iments,)j(bot)o(h)p eop
end
%%Page: 11 25
TeXDict begin 11 24 bop -172 -79 3343 7 v -172 -121 a
FV(Ex)n(ercises)2915 b(11)173 112 y FR(because)31 b(w)n(e)d(w)n(ant)o
(ed)h(t)o(o)g(com)o(par)o(e)h(t)o(he)f(met)o(hods)g(wit)o(hout)g(pr)o
(econditioning)h(and)f(because)h(t)o(he)173 212 y(f)o(as)q(t)24
b(P)l(oisson)h(pr)o(econditioning)g(used)f(in)g(t)o(he)h(\014rs)q(t)f
(set)g(of)h(e)o(xper)q(iments)g(is)f(not)g(cos)q(t)g(ef)q(f)n(ectiv)n
(e)h(f)n(or)173 311 y(t)o(hese)g(large)f(v)n(alues)h(of)h
FH(c)31 b FR(and)26 b FH(d)9 b FR(.)40 b(W)-6 b(e)24
b(\014rs)q(t)g(allo)n(w)n(ed)f(eac)n(h)i(met)o(hod)f(t)o(o)g(r)r(un)g
(f)n(or)h(600)e(GMRES\()t FH(m)t FR(\))173 411 y(it)o(er)o(ations,)g(s)
q(tar)r(ting)d(wit)o(h)h(zer)o(o)g(as)h(t)o(he)f(initial)f(appr)o(o)m
(ximat)o(e)j(solution,)f(af)r(t)o(er)g(whic)n(h)f(t)o(he)g(limit)f(of)
173 511 y(r)o(esidual)h(nor)q(m)f(r)o(eduction)h(had)f(been)h(r)o(eac)n
(hed.)p -175 712 3000 9 v 173 890 a FE(Ex)o(er)n(cises)242
1042 y FR(1.1.)42 b(The)20 b(\014rs)q(t)g(pr)o(oblem.)28
b(Sol)o(v)n(e)20 b(f)n(or)k FH(x)6 b FR(:)1580 1293 y
FH(y)23 b FJ(=)1720 1164 y Fw(s)p 1803 1164 199 5 v 1807
1293 a FH(x)d FJ(+)1951 1236 y FR(1)p 1951 1275 40 5
v 1951 1356 a(2)242 1517 y(1.2.)42 b(The)28 b(second)g(pr)o(oblem.)52
b(The)28 b(second)h(pr)o(oblem.)52 b(The)28 b(second)h(pr)o(oblem.)52
b(The)28 b(second)406 1617 y(pr)o(oblem.)35 b(The)22
b(second)h(pr)o(oblem.)35 b(The)22 b(second)h(pr)o(oblem.)35
b(The)22 b(second)i(pr)o(oblem.)35 b(The)406 1716 y(second)15
b(pr)o(oblem.)26 b(The)14 b(second)h(pr)o(oblem.)26 b(The)14
b(second)h(pr)o(oblem.)26 b(The)14 b(second)h(pr)o(oblem.)p
eop end
%%Page: 12 26
TeXDict begin 12 25 bop -172 -79 3343 7 v -172 -121 a
FV(12)1135 b(Chapter)21 b(1.)49 b(Sample)20 b(File)h(f)n(or)h(SIAM)e(L)
2248 -138 y Fx(A)2273 -121 y FV(T)2308 -100 y(E)2351
-121 y(X)h(Book)h(Macro)g(P)m(ac)n(kage)p eop end
%%Page: 13 27
TeXDict begin 13 26 bop 1045 776 a FU(Bib)n(liograph)l(y)209
1220 y FM([)p FN(1)p FM(])42 b FN(R.)22 b(A.)g(B)r Fa(RUA)t(L)t(D)t(I)i
(A)t(N)t(D)f FN(B.)g(L.)f(S)r Fa(H)t(A)t(D)t(E)t(R)r
FN(,)g Fj(On)g(sign-nonsingular)h(matr)q(ices)d(and)j(t)q(he)e(con)o(v)
q(er)q(sion)g(of)h(t)q(he)343 1312 y(per)q(manent)h(into)h(t)q(he)f
(det)q(er)q(minant)p FN(,)i(in)e(Applied)f(Geometr)r(y)h(and)f(Discr)o
(et)o(e)h(Mat)o(hematics,)h(The)f(V)o(ic-)343 1403 y(t)o(or)g(Klee)g(F)
n(es)q(tsc)o(hr)q(if)r(t,)i(P)-8 b(.)25 b(Gr)q(itzmann)f(and)g(B.)h
(Stur)q(mf)n(els,)g(eds.,)h(Amer)q(ican)d(Mat)o(hematical)g(Society)-6
b(,)343 1494 y(Pr)o(o)n(vidence,)16 b(RI,)j(1991,)e(pp.)i(117\226134.)
25 b(\(Cit)o(ed)17 b(on)i(p.)f(3\))209 1645 y FM([)p
FN(2)p FM(])42 b FN(J.)22 b(D)r Fa(R)t(E)t(W)m FN(,)i(C.)f(R.)g(J)r
Fa(O)t(H)t(N)t(S)t(O)t(N)r FN(,)f Fa(A)t(N)t(D)i FN(P)-8
b(.)26 b Fa(V)m(A)t(N)f(D)t(E)t(N)g FN(D)r Fa(R)t(I)t(E)t(S)t(S)t(C)t
(H)t(E)r FN(,)d Fj(S)o(tr)o(ong)i(f)o(or)q(ms)e(of)h(nonsingular)q(ity)
p FN(,)343 1737 y(Linear)17 b(Algebr)o(a)h(Appl.,)h(162)e(\(1992\),)h
(t)o(o)g(appear)l(.)25 b(\(Cit)o(ed)17 b(on)h(p.)h(3\))209
1888 y FM([)p FN(3)p FM(])42 b FN(P)-8 b(.)18 b(M.)g(G)r
Fa(I)t(B)t(S)t(O)t(N)r FN(,)d Fj(Con)o(v)q(er)q(sion)j(of)f(t)q(he)g
(per)q(manent)h(into)g(t)q(he)f(det)q(er)q(minant)p FN(,)i(Pr)o(oc.)e
(Amer)l(.)g(Mat)o(h.)h(Soc.,)g(27)343 1979 y(\(1971\),)f(pp.)h
(471\226476.)26 b(\(N)o(ot)17 b(cit)o(ed\))209 2130 y
FM([)p FN(4)p FM(])42 b FN(V)-7 b(.)19 b(K)r Fa(L)t(E)t(E)r
FN(,)h(R.)g(L)r Fa(A)t(D)t(N)t(E)t(R)r FN(,)i Fa(A)t(N)t(D)f
FN(R.)f(M)r Fa(A)t(N)t(B)t(E)t(R)r FN(,)g Fj(Signsol)n(vability)f(r)o
(e)q(visit)q(ed)p FN(,)h(Linear)f(Algebr)o(a)g(Appl.,)i(59)343
2221 y(\(1984\),)c(pp.)h(131\226157.)26 b(\(Cit)o(ed)17
b(on)h(p.)h(3\))209 2372 y FM([)p FN(5)p FM(])42 b FN(K.)27
b(M)r Fa(U)t(R)q(O)s(T)q(A)r FN(,)i(L)m(U-)p Fj(decom)o(position)h(of)e
(a)g(matr)q(ix)h(wit)q(h)e(entr)q(ies)h(of)g(dif)r(f)o(er)o(ent)f
(kinds)p FN(,)32 b(Linear)c(Algebr)o(a)343 2464 y(Appl.,)18
b(49)g(\(1983\),)f(pp.)i(275\226283.)25 b(\(N)o(ot)17
b(cit)o(ed\))209 2615 y FM([)p FN(6)p FM(])42 b FN(O.)24
b(A)r Fa(X)t(E)t(L)5 b(S)t(S)t(O)t(N)r FN(,)24 b Fj(Conjug)n(at)q(e)h
(g)q(r)l(adient)f(type)h(met)q(hods)f(f)o(or)g(unsymmetr)q(ic)e(and)j
(inconsist)q(ent)g(sy)o(st)q(ems)f(of)343 2706 y(linear)17
b(equations)p FN(,)i(Linear)f(Algebr)o(a)g(Appl.,)g(29)g(\(1980\),)g
(pp.)g(1\22616.)26 b(\(N)o(ot)17 b(cit)o(ed\))209 2857
y FM([)p FN(7)p FM(])42 b FN(P)-8 b(.)16 b(N)o(.)h(B)r
Fa(R)q(OW)t(N)i(A)t(N)t(D)f FN(Y)-7 b(.)16 b(S)p Fa(A)t(A)t(D)r
FN(,)h Fj(Hybr)q(id)e(Kr)r(ylov)g(met)q(hods)i(f)o(or)e(nonlinear)i(sy)
o(st)q(ems)g(of)f(equations)p FN(,)h(SIAM)343 2949 y(J.)g(Sci.)h
(Statis)q(t.)f(Com)o(put.,)h(11)g(\(1990\),)f(pp.)i(450\226481.)25
b(\(Cit)o(ed)17 b(on)i(p.)f(9\))209 3100 y FM([)p FN(8)p
FM(])42 b FN(R.)20 b(S.)g(D)r Fa(E)t(M)t(B)t(O)r FN(,)f(S.)h(C.)g(E)r
Fa(I)t(S)t(E)t(N)t(S)s(T)q(AT)m FN(,)g Fa(A)t(N)t(D)h
FN(T)-6 b(.)20 b(S)q Fa(T)t(E)t(I)t(H)t(A)o(U)t(G)r FN(,)e
Fj(Ine)q(x)r(act)j(Ne)q(wton)f(met)q(hods)p FN(,)g(SIAM)g(J.)g(N)n(u-)
343 3191 y(mer)l(.)d(Anal.,)i(19)f(\(1982\),)f(pp.)h(400\226408.)26
b(\(N)o(ot)17 b(cit)o(ed\))209 3342 y FM([)p FN(9)p FM(])42
b FN(S.)24 b(C.)i(E)r Fa(I)t(S)t(E)t(N)t(S)s(T)q(AT)m
FN(,)e(H.)h(C.)h(E)r Fa(L)t(M)t(A)t(N)r FN(,)h Fa(A)t(N)t(D)f
FN(M.)g(H.)g(S)r Fa(C)t(H)t(U)t(L)o(T)t(Z)r FN(,)e Fj(V)-5
b(ar)q(iational)27 b(it)q(er)l(ativ)q(e)d(met)q(hods)h(f)o(or)343
3433 y(nonsymmetr)q(ic)15 b(sy)o(st)q(ems)h(of)g(linear)g(equations)p
FN(,)h(SIAM)f(J.)f(N)n(umer)l(.)h(Anal.,)h(20)e(\(1983\),)h(pp.)g
(345\226357.)21 b(\(N)o(ot)343 3525 y(cit)o(ed\))173
3676 y FM([)p FN(10)p FM(])42 b FN(H.)26 b(C.)h(E)r Fa(L)t(M)t(A)t(N)r
FN(,)g Fj(It)q(er)l(ativ)q(e)f(met)q(hods)g(f)o(or)g(lar)q(g)o(e,)i
(spar)q(se,)g(nonsymmetr)q(ic)e(sy)o(st)q(ems)g(of)g(linear)h
(equations)p FN(,)343 3767 y(Ph.D.)15 b(t)o(hesis,)g(Depar)r(tment)f
(of)g(Com)o(put)o(er)g(Science,)g(Y)-7 b(ale)13 b(U)m(niv)n(ersity)-6
b(,)15 b(N)o(ew)g(Ha)o(v)n(en,)g(CT)-6 b(,)15 b(1982.)j(\(N)o(ot)343
3858 y(cit)o(ed\))173 4009 y FM([)p FN(11)p FM(])42 b
FN(R.)15 b(G)r Fa(L)s(OW)t(I)t(N)t(S)t(K)t(I)r FN(,)f(H.)i(B.)f(K)r
Fa(E)t(L)t(L)t(E)t(R)r FN(,)j Fa(A)t(N)t(D)f FN(L.)e(R)r
Fa(H)t(E)t(I)t(N)t(H)t(A)t(R)q(T)r FN(,)e Fj(Continuation-conjug)n(at)q
(e)18 b(g)q(r)l(adient)e(met)q(h-)343 4101 y(ods)27 b(f)o(or)g(t)q(he)f
(least-squar)o(es)h(solution)h(of)f(nonlinear)h(boundar)r(y)f(value)f
(pr)o(oblems)p FN(,)j(SIAM)e(J.)g(Sci.)g(Statis)q(t.)343
4192 y(Com)o(put.,)18 b(6)g(\(1985\),)f(pp.)i(793\226832.)25
b(\(Cit)o(ed)17 b(on)h(p.)h(9\))173 4343 y FM([)p FN(12)p
FM(])42 b FN(G.)16 b(H.)h(G)r Fa(O)t(L)r(U)t(B)i(A)t(N)t(D)e
FN(C.)g(F)l(.)f(V)-6 b Fa(A)t(N)17 b FN(L)q Fa(OA)t(N)r
FN(,)g Fj(Matr)q(ix)f(Com)o(put)r(ations)p FN(,)k(Second)15
b(ed.,)h(The)g(Johns)h(Hopkins)343 4434 y(U)m(niv)n(ersity)g(Pr)o(ess,)
i(Baltimor)o(e,)e(MD,)i(1989.)26 b(\(N)o(ot)17 b(cit)o(ed\))173
4585 y FM([)p FN(13)p FM(])42 b FN(J.)12 b(J.)g(M)r Fa(O)t(R)t(\311)r
FN(,)h Fj(A)f(collection)g(of)g(nonlinear)g(model)g(pr)o(oblems)p
FN(,)k(in)c(Com)o(putational)g(Solutions)g(of)g(N)o(onlinear)343
4677 y(Sys)q(t)o(ems)19 b(of)h(Equations,)g(E.)g(L.)h(Allgo)n(w)n(er)f
(and)f(K.)h(Georg,)h(eds.,)f(Lectur)o(es)g(in)g(Applied)f(Mat)o
(hematics,)343 4768 y(V)-6 b(ol.)17 b(26,)h(Amer)q(ican)f(Mat)o
(hematical)f(Society)-6 b(,)18 b(Pr)o(o)n(vidence,)e(RI,)j(1990,)e(pp.)
i(723\226762.)25 b(\(Cit)o(ed)17 b(on)h(p.)h(9\))173
4919 y FM([)p FN(14)p FM(])42 b FN(Y)-7 b(.)18 b(S)p
Fa(A)t(A)t(D)r FN(,)i Fj(Kr)r(ylov)d(subspace)h(met)q(hods)h(f)o(or)g
(sol)n(ving)f(lar)q(g)o(e)g(unsymmetr)q(ic)f(linear)i(sy)o(st)q(ems)p
FN(,)g(Mat)o(h.)h(Com)o(p.,)343 5010 y(37)d(\(1981\),)h(pp.)g
(105\226126.)25 b(\(N)o(ot)18 b(cit)o(ed\))1629 5220
y FV(13)p eop end
%%Page: 14 28
TeXDict begin 14 27 bop -172 -79 3343 7 v -172 -121 a
FV(14)2826 b(Bib)n(liog)o(r)o(aph)n(y)173 112 y FM([)p
FN(15)p FM(])42 b FN(Y)-7 b(.)20 b(S)p Fa(A)t(A)t(D)k(A)t(N)t(D)e
FN(M.)f(H.)f(S)r Fa(C)t(H)t(U)t(L)o(T)t(Z)r FN(,)f(GMRES)p
Fj(:)i(A)f(g)o(ener)l(alized)g(minimal)f(r)o(esidual)i(met)q(hod)f(f)o
(or)g(sol)n(ving)343 203 y(nonsymmetr)q(ic)c(linear)h(sy)o(st)q(ems)p
FN(,)g(SIAM)h(J.)e(Sci.)g(Statis)q(t.)g(Com)o(put.,)h(7)g(\(1986\),)g
(pp.)g(856\226869.)22 b(\(N)o(ot)16 b(cit)o(ed\))173
361 y FM([)p FN(16)p FM(])42 b FN(P)-8 b(.)17 b(N)o(.)h(S)r
Fa(W)n(A)t(R)t(Z)t(T)t(R)t(A)o(U)t(B)t(E)t(R)h(A)t(N)t(D)f
FN(R.)g(A.)f(S)r Fa(W)t(E)t(E)t(T)r FN(,)h Fj(Ef)r(\014cient)f
FN(F)o(OR)l(TRAN)i Fj(subpr)o(og)q(r)l(ams)e(f)o(or)g(t)q(he)f
(solution)343 453 y(of)24 b(ellip)o(tic)g(par)q(tial)i(dif)r(f)o(er)o
(ential)f(equations)p FN(,)i(A)-5 b(CM)25 b(T)-5 b(r)o(ans.)26
b(Mat)o(h.)f(Sof)r(tw)n(ar)o(e,)i(5)d(\(1979\),)i(pp.)e(352\226364.)343
544 y(\(Cit)o(ed)17 b(on)h(p.)g(10\))173 702 y FM([)p
FN(17)p FM(])42 b FN(H.)27 b(F)l(.)g(W)-5 b Fa(A)t(L)t(K)t(E)t(R)r
FN(,)29 b Fj(Im)o(plement)r(ation)e(of)g(t)q(he)f FN(GMRES)i
Fj(met)q(hod)f(using)f(Householder)g(tr)l(ansf)o(or)q(mations)p
FN(,)343 793 y(SIAM)18 b(J.)g(Sci.)f(Statis)q(t.)g(Com)o(put.,)i(9)e
(\(1988\),)h(pp.)g(152\226163.)26 b(\(Cit)o(ed)17 b(on)h(p.)g(10\))173
951 y FM([)p FN(18)p FM(])p 343 938 191 4 v 233 w FN(,)f
Fj(Im)o(plement)r(ations)h(of)g(t)q(he)f FN(GMRES)h Fj(met)q(hod)p
FN(,)g(Com)o(put)o(er)f(Ph)n(ys.)h(Comm.,)g(53)f(\(1989\),)g(pp.)h
(311\226)343 1042 y(320.)25 b(\(N)o(ot)18 b(cit)o(ed\))p
eop end
%%Page: 15 29
TeXDict begin 15 28 bop 1106 776 a FU(Inde)m(x)-170 1308
y FN(F)n(eatur)o(es,)18 b(3)-170 1490 y(Lis)q(ts)1058
1308 y(bullet,)f(4)1058 1399 y(r)o(emuner)o(at)o(e,)h(4)1058
1490 y(r)o(oman,)g(5)2153 1308 y(Sam)o(ple)2220 1399
y(\014le,)f(3)2153 1490 y(Sam)o(ple)g(t)o(e)o(xt,)i(3)1269
5220 y FV(15)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
